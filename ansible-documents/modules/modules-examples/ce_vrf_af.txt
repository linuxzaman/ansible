EXAMPLES:

- name: vrf af module test
  hosts: cloudengine
  connection: local
  gather_facts: no
  vars:
    cli:
      host: "{{ inventory_hostname }}"
      port: "{{ ansible_ssh_port }}"
      username: "{{ username }}"
      password: "{{ password }}"
      transport: cli

  tasks:

  - name: Config vpna, set address family is ipv4
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      state: present
      provider: "{{ cli }}"
  - name: Config vpna, delete address family is ipv4
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      state: absent
      provider: "{{ cli }}"
  - name: Config vpna, set address family is ipv4,rd=1:1,set vpn_target_type=export_extcommunity,vpn_target_value=2:2
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      route_distinguisher: 1:1
      vpn_target_type: export_extcommunity
      vpn_target_value: 2:2
      vpn_target_state: present
      state: present
      provider: "{{ cli }}"
  - name: Config vpna, set address family is ipv4,rd=1:1,delete vpn_target_type=export_extcommunity,vpn_target_value=2:2
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      route_distinguisher: 1:1
      vpn_target_type: export_extcommunity
      vpn_target_value: 2:2
      vpn_target_state: absent
      state: present
      provider: "{{ cli }}"


RETURN VALUES:

proposed:
    description: k/v pairs of parameters passed into module
    returned: always
    type: dict
    sample: {"vrf": "vpna",
             "vrf_aftype": "v4",
             "state": "present",
             "vpn_targe_state":"absent",
             "evpn": "none",
             "vpn_target_type": "none",
             "vpn_target_value": "none"}
existing:
    description: k/v pairs of existing switchport
    returned: always
    type: dict
    sample:  {
        "route_distinguisher": [
            "1:1",
            "2:2"
        ],
        "vpn_target_type": [],
        "vpn_target_value": [],
        "vrf": "vpna",
        "vrf_aftype": [
            "ipv4uni",
            "ipv6uni"
        ]
    }
end_state:
    description: k/v pairs of switchport after module execution
    returned: always
    type: dict
    sample:  {
        "route_distinguisher": [
            "1:1",
            "2:2"
        ],
        "vpn_target_type": [
            "import_extcommunity",
            "3:3"
        ],
        "vpn_target_value": [],
        "vrf": "vpna",
        "vrf_aftype": [
            "ipv4uni",
            "ipv6uni"
        ]
    }
updates:
    description: command list sent to the device
    returned: always
    type: list
    sample: [
        "ip vpn-instance vpna",
        "vpn-target 3:3 import_extcommunity"
    ]
changed:
    description: check to see if a change was made on the device
    returned: always
    type: bool
    sample: true

