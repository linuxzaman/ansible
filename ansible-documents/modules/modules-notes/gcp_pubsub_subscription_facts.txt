> GCP_PUBSUB_SUBSCRIPTION_FACTS    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/google/gcp_pubsub_subscription_facts.py)

        Gather facts for GCP Subscription

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= auth_kind
        The type of credential used.
        (Choices: application, machineaccount, serviceaccount)
        type: str

- project
        The Google Cloud Platform project to use.
        [Default: (null)]
        type: str

- scopes
        Array of scopes to be used.
        [Default: (null)]
        type: list

- service_account_contents
        A string representing the contents of a Service Account JSON file.
        This should not be passed in as a dictionary, but a string that has the exact contents of a service account json file (valid
        JSON)
        [Default: (null)]
        type: str

- service_account_email
        An optional service account email address if machineaccount is selected and the user does not wish to use the default email.
        [Default: (null)]
        type: str

- service_account_file
        The path of a Service Account JSON file if serviceaccount is selected as type.
        [Default: (null)]
        type: path


NOTES:
      * For authentication, you can set service_account_file using the `GCP_SERVICE_ACCOUNT_FILE' env variable.
      * For authentication, you can set service_account_email using the `GCP_SERVICE_ACCOUNT_EMAIL' env variable.
      * For authentication, you can set service_account_contents using the `GCP_SERVICE_ACCOUNT_CONTENTS' env variable.
      * For authentication, you can set auth_kind using the `GCP_AUTH_KIND' env variable.
      * For authentication, you can set scopes using the `GCP_SCOPES' env variable.
      * Environment variables values will only be used if the playbook values are not set.
      * The `service_account_email' and `service_account_file' options are mutually exclusive.


REQUIREMENTS:  python >= 2.6, requests >= 2.18.4, google-auth >= 1.3.0

AUTHOR: Google Inc. (@googlecloudplatform)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: " a subscription facts"
  gcp_pubsub_subscription_facts:
    project: test_project
    auth_kind: serviceaccount
    service_account_file: "/tmp/auth.pem"
    state: facts


RETURN VALUES:

items:
  description: List of items
  returned: always
  type: complex
  contains:
    name:
      description:
      - Name of the subscription.
      returned: success
      type: str
    topic:
      description:
      - A reference to a Topic resource.
      returned: success
      type: dict
    labels:
      description:
      - A set of key/value label pairs to assign to this Subscription.
      returned: success
      type: dict
    pushConfig:
      description:
      - If push delivery is used with this subscription, this field is used to configure
        it. An empty pushConfig signifies that the subscriber will pull and ack messages
        using API methods.
      returned: success
      type: complex
      contains:
        pushEndpoint:
          description:
          - A URL locating the endpoint to which messages should be pushed.
          - For example, a Webhook endpoint might use "U(https://example.com/push".)
          returned: success
          type: str
        attributes:
          description:
          - Endpoint configuration attributes.
          - Every endpoint has a set of API supported attributes that can be used
            to control different aspects of the message delivery.
          - The currently supported attribute is x-goog-version, which you can use
            to change the format of the pushed message. This attribute indicates the
            version of the data expected by the endpoint. This controls the shape
            of the pushed message (i.e., its fields and metadata). The endpoint version
            is based on the version of the Pub/Sub API.
          - If not present during the subscriptions.create call, it will default to
            the version of the API used to make such call. If not present during a
            subscriptions.modifyPushConfig call, its value will not be changed. subscriptions.get
            calls will always return a valid version, even if the subscription was
            created without this attribute.
          - 'The possible values for this attribute are: - v1beta1: uses the push
            format defined in the v1beta1 Pub/Sub API.'
          - "- v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API."
          returned: success
          type: dict
    ackDeadlineSeconds:
      description:
      - This value is the maximum time after a subscriber receives a message before
        the subscriber should acknowledge the message. After message delivery but
        before the ack deadline expires and before the message is acknowledged, it
        is an outstanding message and will not be delivered again during that time
        (on a best-effort basis).
      - For pull subscriptions, this value is used as the initial value for the ack
        deadline. To override this value for a given message, call subscriptions.modifyAckDeadline
        with the corresponding ackId if using pull. The minimum custom deadline you
        can specify is 10 seconds. The maximum custom deadline you can specify is
        600 seconds (10 minutes).
      - If this parameter is 0, a default value of 10 seconds is used.
      - For push delivery, this value is also used to set the request timeout for
        the call to the push endpoint.
      - If the subscriber never acknowledges the message, the Pub/Sub system will
        eventually redeliver the message.
      returned: success
      type: int
    messageRetentionDuration:
      description:
      - How long to retain unacknowledged messages in the subscription's backlog,
        from the moment a message is published. If retainAckedMessages is true, then
        this also configures the retention of acknowledged messages, and thus configures
        how far back in time a subscriptions.seek can be done. Defaults to 7 days.
        Cannot be more than 7 days (`"604800s"`) or less than 10 minutes (`"600s"`).
      - 'A duration in seconds with up to nine fractional digits, terminated by ''s''.
        Example: `"600.5s"`.'
      returned: success
      type: str
    retainAckedMessages:
      description:
      - Indicates whether to retain acknowledged messages. If `true`, then messages
        are not expunged from the subscription's backlog, even if they are acknowledged,
        until they fall out of the messageRetentionDuration window.
      returned: success
      type: bool

