> KEYCLOAK_GROUP    (/usr/lib/python2.7/dist-packages/ansible/modules/identity/keycloak/keycloak_group.py)

        This module allows you to add, remove or modify Keycloak groups via the Keycloak REST API. It requires access to the REST API via
        OpenID Connect; the user connecting and the client being used must have the requisite access rights. In a default Keycloak
        installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your needs
        and a user having the expected roles. The names of module options are snake_cased versions of the camelCase ones found in the
        Keycloak API and its documentation at http://www.keycloak.org/docs-api/3.3/rest-api/. Attributes are multi-valued in the Keycloak
        API. All attributes are lists of individual values and will be returned that way by this module. You may pass single values for
        attributes when calling the module, and this will be translated into a list suitable for the API. When updating a group, where
        possible provide the group ID to the module. This removes a lookup to the API to translate the name into the group ID.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- attributes
        A dict of key/value pairs to set as custom attributes for the group.
        Values may be single values (e.g. a string) or a list of strings.
        [Default: (null)]
        type: dict

= auth_client_id
        OpenID Connect `client_id' to authenticate to the API with.
        [Default: admin-cli]
        type: str

- auth_client_secret
        Client Secret to use in conjunction with `auth_client_id' (if required).
        [Default: (null)]
        type: str

= auth_keycloak_url
        URL to the Keycloak instance.
        (Aliases: url)
        type: str

= auth_password
        Password to authenticate for API access with.
        (Aliases: password)
        type: str

= auth_realm
        Keycloak realm name to authenticate to for API access.

        type: str

= auth_username
        Username to authenticate for API access with.
        (Aliases: username)
        type: str

- id
        The unique identifier for this group.
        This parameter is not required for updating or deleting a group but providing it will reduce the number of API calls required.
        [Default: (null)]
        type: str

- name
        Name of the group.
        This parameter is required only when creating or updating the group.
        [Default: (null)]
        type: str

- realm
        They Keycloak realm under which this group resides.
        [Default: master]
        type: str

= state
        State of the group.
        On `present', the group will be created if it does not yet exist, or updated with the parameters you provide.
        On `absent', the group will be removed if it exists.
        (Choices: present, absent)[Default: present]
        type: str

- validate_certs
        Verify TLS certificates (do not disable this in production).
        [Default: True]
        type: bool


NOTES:
      * Presently, the `realmRoles', `clientRoles' and `access' attributes returned by the Keycloak API are read-only for groups.
        This limitation will be removed in a later version of this module.


AUTHOR: Adam Goossens (@adamgoossens)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a Keycloak group
  keycloak_group:
    name: my-new-kc-group
    realm: MyCustomRealm
    state: present
    auth_client_id: admin-cli
    auth_keycloak_url: https://auth.example.com/auth
    auth_realm: master
    auth_username: USERNAME
    auth_password: PASSWORD
  delegate_to: localhost

- name: Delete a keycloak group
  keycloak_group:
    id: '9d59aa76-2755-48c6-b1af-beb70a82c3cd'
    state: absent
    realm: MyCustomRealm
    auth_client_id: admin-cli
    auth_keycloak_url: https://auth.example.com/auth
    auth_realm: master
    auth_username: USERNAME
    auth_password: PASSWORD
  delegate_to: localhost

- name: Delete a Keycloak group based on name
  keycloak_group:
    name: my-group-for-deletion
    state: absent
    auth_client_id: admin-cli
    auth_keycloak_url: https://auth.example.com/auth
    auth_realm: master
    auth_username: USERNAME
    auth_password: PASSWORD
  delegate_to: localhost

- name: Update the name of a Keycloak group
  keycloak_group:
    id: '9d59aa76-2755-48c6-b1af-beb70a82c3cd'
    name: an-updated-kc-group-name
    state: present
    auth_client_id: admin-cli
    auth_keycloak_url: https://auth.example.com/auth
    auth_realm: master
    auth_username: USERNAME
    auth_password: PASSWORD
  delegate_to: localhost

- name: Create a keycloak group with some custom attributes
  keycloak_group:
    auth_client_id: admin-cli
    auth_keycloak_url: https://auth.example.com/auth
    auth_realm: master
    auth_username: USERNAME
    auth_password: PASSWORD
    name: my-new_group
    attributes:
        attrib1: value1
        attrib2: value2
        attrib3:
            - with
            - numerous
            - individual
            - list
            - items
  delegate_to: localhost


RETURN VALUES:

group:
  description: Group representation of the group after module execution (sample is truncated).
  returned: always
  type: complex
  contains:
    id:
      description: GUID that identifies the group
      type: str
      returned: always
      sample: 23f38145-3195-462c-97e7-97041ccea73e
    name:
      description: Name of the group
      type: str
      returned: always
      sample: grp-test-123
    attributes:
      description: Attributes applied to this group
      type: dict
      returned: always
      sample:
        attr1: ["val1", "val2", "val3"]
    path:
      description: URI path to the group
      type: str
      returned: always
      sample: /grp-test-123
    realmRoles:
      description: An array of the realm-level roles granted to this group
      type: list
      returned: always
      sample: []
    subGroups:
      description: A list of groups that are children of this group. These groups will have the same parameters as
                   documented here.
      type: list
      returned: always
    clientRoles:
      description: A list of client-level roles granted to this group
      type: list
      returned: always
      sample: []
    access:
      description: A dict describing the accesses you have to this group based on the credentials used.
      type: dict
      returned: always
      sample:
        manage: true
        manageMembership: true
        view: true

