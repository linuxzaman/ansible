> CONSUL_ACL    (/usr/lib/python2.7/dist-packages/ansible/modules/clustering/consul_acl.py)

        Allows the addition, modification and deletion of ACL keys and associated rules in a consul cluster via the agent. For more
        details on using and configuring ACLs, see https://www.consul.io/docs/guides/acl.html.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- host
        host of the consul agent defaults to localhost
        [Default: localhost]

- mgmt_token
        a management token is required to manipulate the acl lists
        [Default: (null)]

- name
        the name that should be associated with the acl key, this is opaque to Consul
        [Default: (null)]

- port
        the port on which the consul agent is running
        [Default: 8500]

- rules
        a list of the rules that should be associated with a given token
        [Default: (null)]

- scheme
        the protocol scheme on which the consul agent is running
        [Default: http]
        version_added: 2.1

- state
        whether the ACL pair should be present or absent
        (Choices: present, absent)[Default: present]

- token
        the token key indentifying an ACL rule set. If generated by consul this will be a UUID
        [Default: (null)]

- token_type
        the type of token that should be created, either management or client
        (Choices: client, management)[Default: client]

- validate_certs
        whether to verify the tls certificate of the consul agent
        [Default: True]
        version_added: 2.1


REQUIREMENTS:  python >= 2.6, python-consul, pyhcl, requests

AUTHOR: Steve Gargan (@sgargan), Colin Nolan (@colin-nolan)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: create an ACL with rules
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    name: Foo access
    rules:
      - key: "foo"
        policy: read
      - key: "private/foo"
        policy: deny

- name: create an ACL with a specific token
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    name: Foo access
    token: my-token
    rules:
      - key: "foo"
        policy: read

- name: update the rules associated to an ACL token
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    name: Foo access
    token: some_client_token
    rules:
      - event: "bbq"
        policy: write
      - key: "foo"
        policy: read
      - key: "private"
        policy: deny
      - keyring: write
      - node: "hgs4"
        policy: write
      - operator: read
      - query: ""
        policy: write
      - service: "consul"
        policy: write
      - session: "standup"
        policy: write

- name: remove a token
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    token: 172bd5c8-9fe9-11e4-b1b0-3c15c2c9fd5e
    state: absent


RETURN VALUES:

token:
    description: the token associated to the ACL (the ACL's ID)
    returned: success
    type: str
    sample: a2ec332f-04cf-6fba-e8b8-acf62444d3da
rules:
    description: the HCL JSON representation of the rules associated to the ACL, in the format described in the
                 Consul documentation (https://www.consul.io/docs/guides/acl.html#rule-specification).
    returned: I(status) == "present"
    type: str
    sample: {
        "key": {
            "foo": {
                "policy": "write"
            },
            "bar": {
                "policy": "deny"
            }
        }
    }
operation:
    description: the operation performed on the ACL
    returned: changed
    type: str
    sample: update

