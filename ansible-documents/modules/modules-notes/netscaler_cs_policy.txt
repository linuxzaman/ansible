> NETSCALER_CS_POLICY    (/usr/lib/python2.7/dist-packages/ansible/modules/network/netscaler/netscaler_cs_policy.py)

        Manage content switching policy. This module is intended to run either on the ansible  control node or a bastion (jumpserver)
        with access to the actual netscaler instance.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- action
        Content switching action that names the target load balancing virtual server to which the traffic is switched.
        [Default: (null)]

- domain
        The domain name. The string value can range to 63 characters.
        Minimum length = 1
        [Default: (null)]

= nitro_pass
        The password with which to authenticate to the netscaler node.

        type: str

- nitro_protocol
        Which protocol to use when accessing the nitro API objects.
        (Choices: http, https)[Default: http]
        type: str

- nitro_timeout
        Time in seconds until a timeout error is thrown when establishing a new session with Netscaler
        [Default: 310]
        type: float

= nitro_user
        The username with which to authenticate to the netscaler node.

        type: str

= nsip
        The ip address of the netscaler appliance where the nitro API calls will be made.
        The port can be specified with the colon (:). E.g. 192.168.1.1:555.

        type: str

- policyname
        Name for the content switching policy. Must begin with an ASCII alphanumeric or underscore `_' character, and must contain only
        ASCII alphanumeric, underscore, hash `#', period `.', space ` ', colon `:', at sign `@', equal sign `=', and hyphen `-'
        characters. Cannot be changed after a policy is created.
        The following requirement applies only to the NetScaler CLI:
        If the name includes one or more spaces, enclose the name in double or single quotation marks (for example, my policy or my
        policy).
        Minimum length = 1
        [Default: (null)]

- rule
        Expression, or name of a named expression, against which traffic is evaluated. Written in the classic or default syntax.
        Note:
        Maximum length of a string literal in the expression is 255 characters. A longer string can be split into smaller strings of up
        to 255 characters each, and the smaller strings concatenated with the + operator. For example, you can create a 500-character
        string as follows: '"<string of 255 characters>" + "<string of 245 characters>"'
        [Default: (null)]

- save_config
        If `yes' the module will save the configuration on the netscaler node if it makes any changes.
        The module will not save the configuration on the netscaler node if it made no changes.
        [Default: True]
        type: bool

- state
        The state of the resource being configured by the module on the netscaler node.
        When present the resource will be created if needed and configured according to the module's parameters.
        When absent the resource will be deleted from the netscaler node.
        (Choices: absent, present)[Default: present]
        type: str

- url
        URL string that is matched with the URL of a request. Can contain a wildcard character. Specify the string value in the following
        format: `[[prefix] [*]] [.suffix]'.
        Minimum length = 1
        Maximum length = 208
        [Default: (null)]

- validate_certs
        If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed
        certificates.
        [Default: True]
        type: bool


NOTES:
      * For more information on using Ansible to manage Citrix NetScaler Network devices see https://www.ansible.com/ansible-
        netscaler.


REQUIREMENTS:  nitro python sdk

AUTHOR: George Nikolopoulos (@giorgos-nikolopoulos)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create url cs policy
  delegate_to: localhost
  netscaler_cs_policy:
    nsip: 172.18.0.2
    nitro_user: nsroot
    nitro_pass: nsroot
    validate_certs: no

    state: present

    policyname: policy_1
    url: /example/


RETURN VALUES:

loglines:
    description: list of logged messages by the module
    returned: always
    type: list
    sample: ['message 1', 'message 2']

msg:
    description: Message detailing the failure reason
    returned: failure
    type: str
    sample: "Could not load nitro python sdk"

diff:
    description: List of differences between the actual configured object and the configuration specified in the module
    returned: failure
    type: dict
    sample: { 'url': 'difference. ours: (str) example1 other: (str) /example1' }

