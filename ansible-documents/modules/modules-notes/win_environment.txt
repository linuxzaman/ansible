> WIN_ENVIRONMENT    (/usr/lib/python2.7/dist-packages/ansible/modules/windows/win_environment.py)

        Uses .net Environment to set or remove environment variables and can set at User, Machine or Process level. User level
        environment variables will be set, but not available until the user has logged off and on again.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= level
        The level at which to set the environment variable.
        Use `machine' to set for all users.
        Use `user' to set for the current user that ansible is connected as.
        Use `process' to set for the current process.  Probably not that useful.
        (Choices: machine, process, user)
        type: str

= name
        The name of the environment variable.

        type: str

- state
        Set to `present' to ensure environment variable is set.
        Set to `absent' to ensure it is removed.
        (Choices: absent, present)[Default: present]
        type: str

- value
        The value to store in the environment variable.
        Must be set when `state=present' and cannot be an empty string.
        Can be omitted for `state=absent'.
        [Default: (null)]
        type: str


NOTES:
      * This module is best-suited for setting the entire value of an environment variable. For safe element-based management of
        path-like environment vars, use the [win_path] module.
      * This module does not broadcast change events. This means that the minority of windows applications which can have their
        environment changed without restarting will not be notified and therefore will need restarting to pick up new environment
        settings. User level environment variables will require the user to log out and in again before they become available.


SEE ALSO:
      * Module win_path
           The official documentation on the win_path module.
           https://docs.ansible.com/ansible/latest/modules/win_path_module.html


AUTHOR: Jon Hawkesworth (@jhawkesworth)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Set an environment variable for all users
  win_environment:
    state: present
    name: TestVariable
    value: Test value
    level: machine

- name: Remove an environment variable for the current user
  win_environment:
    state: absent
    name: TestVariable
    level: user


RETURN VALUES:

before_value:
  description: the value of the environment key before a change, this is null if it didn't exist
  returned: always
  type: str
  sample: C:\Windows\System32
value:
  description: the value the environment key has been set to, this is null if removed
  returned: always
  type: str
  sample: C:\Program Files\jdk1.8

