> AEROSPIKE_MIGRATIONS    (/usr/lib/python2.7/dist-packages/ansible/modules/database/aerospike/aerospike_migrations.py)

        This can be used to check for migrations in a cluster. This makes it easy to do a rolling upgrade/update on Aerospike nodes. If
        waiting for migrations is not desired, simply just poll until port 3000 if available or asinfo -v status returns ok

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- connect_timeout
        How long to try to connect before giving up (milliseconds)
        [Default: 1000]
        type: int

- consecutive_good_checks
        How many times should the cluster report "no migrations" consecutively before returning OK back to ansible?
        [Default: 3]
        type: int

- fail_on_cluster_change
        Fail if the cluster key changes if something else is changing the cluster, we may want to fail
        [Default: True]
        type: bool

- host
        Which host do we use as seed for info connection
        [Default: localhost]
        type: str

= local_only
        Do you wish to only check for migrations on the local node before returning, or do you want all nodes in the cluster to finish
        before returning?

        type: bool

- migrate_rx_key
        The metric key used to determine if we have rx migrations remaining. Changeable due to backwards compatibility.
        [Default: migrate_rx_partitions_remaining]
        type: str

- migrate_tx_key
        The metric key used to determine if we have tx migrations remaining. Changeable due to backwards compatibility.
        [Default: migrate_tx_partitions_remaining]
        type: str

- min_cluster_size
        Check will return bad until cluster size is met or until tries is exhausted
        [Default: 1]
        type: int

- port
        Which port to connect to Aerospike on (service port)
        [Default: 3000]
        type: int

- sleep_between_checks
        How long to sleep between each check (seconds).
        [Default: 60]
        type: int

- target_cluster_size
        When all aerospike builds in the cluster are greater than version 4.3, then the `cluster-stable' info command will be used.
        Inside this command, you can optionally specify what the target cluster size is - but it is not necessary. You can still rely on
        min_cluster_size if you don't want to use this option.
        If this option is specified on a cluster that has at least 1 host <4.3 then it will be ignored until the min version reaches 4.3.
        [Default: (null)]
        type: int

- tries_limit
        How many times do we poll before giving up and failing?
        [Default: 300]
        type: int


AUTHOR: Albert Autin (@Alb0t)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# check for migrations on local node
- name: wait for migrations on local node before proceeding
  aerospike_migrations:
    host: "localhost"
    connect_timeout: 2000
    consecutive_good_checks: 5
    sleep_between_checks: 15
    tries_limit: 600
    local_only: False

# example playbook:
---
- name: upgrade aerospike
  hosts: all
  become: true
  serial: 1
  tasks:
    - name: Install dependencies
      apt:
        name:
            - python
            - python-pip
            - python-setuptools
        state: latest
    - name: setup aerospike
      pip:
          name: aerospike
# check for migrations every (sleep_between_checks)
# If at least (consecutive_good_checks) checks come back OK in a row, then return OK.
# Will exit if any exception, which can be caused by bad nodes,
# nodes not returning data, or other reasons.
# Maximum runtime before giving up in this case will be:
# Tries Limit * Sleep Between Checks * delay * retries
    - name: wait for aerospike migrations
      aerospike_migrations:
          local_only: True
          sleep_between_checks: 1
          tries_limit: 5
          consecutive_good_checks: 3
          fail_on_cluster_change: true
          min_cluster_size: 3
          target_cluster_size: 4
      register: migrations_check
      until: migrations_check is succeeded
      changed_when: false
      delay: 60
      retries: 120
    - name: another thing
      shell: |
          echo foo
    - name: reboot
      reboot:


RETURN VALUES:

# Returns only a success/failure result. Changed is always false.

