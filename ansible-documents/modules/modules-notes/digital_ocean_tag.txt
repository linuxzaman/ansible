> DIGITAL_OCEAN_TAG    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/digital_ocean/digital_ocean_tag.py)

        Create and remove tag(s) to DigitalOcean resource.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= name
        The name of the tag. The supported characters for names include alphanumeric characters, dashes, and underscores.


- oauth_token
        DigitalOcean OAuth token.
        There are several other environment variables which can be used to provide this value.
        i.e., - 'DO_API_TOKEN', 'DO_API_KEY', 'DO_OAUTH_TOKEN' and 'OAUTH_TOKEN'
        (Aliases: api_token)[Default: (null)]
        type: str

- resource_id
        The ID of the resource to operate on.
        The data type of resource_id is changed from integer to string, from version 2.5.
        (Aliases: droplet_id)[Default: (null)]

- resource_type
        The type of resource to operate on. Currently, only tagging of droplets is supported.
        (Choices: droplet)[Default: droplet]

- state
        Whether the tag should be present or absent on the resource.
        (Choices: present, absent)[Default: present]

- timeout
        The timeout in seconds used for polling DigitalOcean's API.
        [Default: 30]
        type: int

- validate_certs
        If set to `no', the SSL certificates will not be validated.
        This should only set to `no' used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool


NOTES:
      * Two environment variables can be used, DO_API_KEY and DO_API_TOKEN. They both refer to the v2 token.
      * As of Ansible 2.0, Version 2 of the DigitalOcean API is used.


REQUIREMENTS:  python >= 2.6

AUTHOR: Victor Volle (@kontrafiktion)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: create a tag
  digital_ocean_tag:
    name: production
    state: present

- name: tag a resource; creating the tag if it does not exist
  digital_ocean_tag:
    name: "{{ item }}"
    resource_id: "73333005"
    state: present
  loop:
    - staging
    - dbserver

- name: untag a resource
  digital_ocean_tag:
    name: staging
    resource_id: "73333005"
    state: absent

# Deleting a tag also untags all the resources that have previously been
# tagged with it
- name: remove a tag
  digital_ocean_tag:
    name: dbserver
    state: absent


RETURN VALUES:

data:
    description: a DigitalOcean Tag resource
    returned: success and no resource constraint
    type: dict
    sample: {
        "tag": {
        "name": "awesome",
        "resources": {
          "droplets": {
            "count": 0,
            "last_tagged": null
          }
        }
      }
    }

