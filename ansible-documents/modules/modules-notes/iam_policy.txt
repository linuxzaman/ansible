> IAM_POLICY    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/iam_policy.py)

        Allows uploading or removing IAM policies for IAM users, groups or roles.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- aws_access_key
        AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is
        used.
        (Aliases: ec2_access_key, access_key)[Default: (null)]
        type: str

- aws_secret_key
        AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is
        used.
        (Aliases: ec2_secret_key, secret_key)[Default: (null)]
        type: str

- debug_botocore_endpoint_logs
        Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing
        the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during
        a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
        [Default: no]
        type: bool
        version_added: 2.8

- ec2_url
        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where
        region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL
        environment variable, if any, is used.
        [Default: (null)]
        type: str

= iam_name
        Name of IAM resource you wish to target for policy actions. In other words, the user name, group name or role name.


= iam_type
        Type of IAM resource
        (Choices: user, group, role)

- policy_document
        The path to the properly json formatted policy file (mutually exclusive with `policy_json')
        [Default: (null)]

- policy_json
        A properly json formatted policy as string (mutually exclusive with `policy_document', see
        https://github.com/ansible/ansible/issues/7005#issuecomment-42894813 on how to use it properly)
        [Default: (null)]

= policy_name
        The name label for the policy to create or remove.


- profile
        Uses a boto profile. Only works with boto >= 2.24.0.
        [Default: (null)]
        type: str
        version_added: 1.6

- region
        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
        (Aliases: aws_region, ec2_region)[Default: (null)]
        type: str

- security_token
        AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
        (Aliases: access_token)[Default: (null)]
        type: str
        version_added: 1.6

- skip_duplicates
        By default the module looks for any policies that match the document you pass in, if there is a match it will not make a new
        policy object with the same rules. You can override this by specifying false which would allow for two policy objects with
        different names but same rules.
        [Default: /]

= state
        Whether to create or delete the IAM policy.
        (Choices: present, absent)

- validate_certs
        When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        [Default: True]
        type: bool
        version_added: 1.5


NOTES:
      * Currently boto does not support the removal of Managed Policies, the module will not work removing/adding managed policies.
      * If parameters are not set within the module, the following environment variables can be used in decreasing order of
        precedence `AWS_URL' or `EC2_URL', `AWS_ACCESS_KEY_ID' or `AWS_ACCESS_KEY' or `EC2_ACCESS_KEY', `AWS_SECRET_ACCESS_KEY' or
        `AWS_SECRET_KEY' or `EC2_SECRET_KEY', `AWS_SECURITY_TOKEN' or `EC2_SECURITY_TOKEN', `AWS_REGION' or `EC2_REGION'
      * Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See
        https://boto.readthedocs.io/en/latest/boto_config_tut.html
      * `AWS_REGION' or `EC2_REGION' can be typically be used to specify the AWS region, when required, but this can also be
        configured in the boto config file


REQUIREMENTS:  python >= 2.6, boto

AUTHOR: Jonathan I. Davila (@defionscode)
        METADATA:
          status:
          - stableinterface
          supported_by: community
        

EXAMPLES:

# Create a policy with the name of 'Admin' to the group 'administrators'
- name: Assign a policy called Admin to the administrators group
  iam_policy:
    iam_type: group
    iam_name: administrators
    policy_name: Admin
    state: present
    policy_document: admin_policy.json

# Advanced example, create two new groups and add a READ-ONLY policy to both
# groups.
- name: Create Two Groups, Mario and Luigi
  iam:
    iam_type: group
    name: "{{ item }}"
    state: present
  loop:
     - Mario
     - Luigi
  register: new_groups

- name: Apply READ-ONLY policy to new groups that have been recently created
  iam_policy:
    iam_type: group
    iam_name: "{{ item.created_group.group_name }}"
    policy_name: "READ-ONLY"
    policy_document: readonlypolicy.json
    state: present
  loop: "{{ new_groups.results }}"

# Create a new S3 policy with prefix per user
- name: Create S3 policy from template
  iam_policy:
    iam_type: user
    iam_name: "{{ item.user }}"
    policy_name: "s3_limited_access_{{ item.prefix }}"
    state: present
    policy_json: " {{ lookup( 'template', 's3_policy.json.j2') }} "
    loop:
      - user: s3_user
        prefix: s3_user_prefix


