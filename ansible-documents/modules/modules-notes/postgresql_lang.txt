> POSTGRESQL_LANG    (/usr/lib/python2.7/dist-packages/ansible/modules/database/postgresql/postgresql_lang.py)

        Adds, removes or changes procedural languages with a PostgreSQL database. This module allows you to add a language, remote a
        language or change the trust relationship with a PostgreSQL database. The module can be used on the machine where executed or on
        a remote host. When removing a language from a database, it is possible that dependencies prevent the database from being
        removed. In that case, you can specify casade to automatically drop objects that depend on the language (such as functions in the
        language). In case the language can't be deleted because it is required by the database system, you can specify fail_on_drop=no
        to ignore the error. Be carefull when marking a language as trusted since this could be a potential security breach. Untrusted
        languages allow only users with the PostgreSQL superuser privilege to use this language to create new functions. For more
        information about PostgreSQL languages see the official documentation https://www.postgresql.org/docs/current/sql-
        createlanguage.html, https://www.postgresql.org/docs/current/sql-alterlanguage.html, https://www.postgresql.org/docs/current/sql-
        droplanguage.html.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- ca_cert
        Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
        If the file exists, the server's certificate will be verified to be signed by one of these authorities.
        (Aliases: ssl_rootcert)[Default: (null)]
        type: str
        version_added: 2.8

- cascade
        When dropping a language, also delete object that depend on this language.
        Only used when `state=absent'.
        [Default: no]
        type: bool

- db
        Name of database to connect to and where the language will be added, removed or changed.
        (Aliases: login_db)[Default: (null)]
        type: str

- fail_on_drop
        If `yes', fail when removing a language. Otherwise just log and continue.
        In some cases, it is not possible to remove a language (used by the db-system).
        When dependencies block the removal, consider using `cascade'.
        [Default: yes]
        type: bool

- force_trust
        Marks the language as trusted, even if it's marked as untrusted in pg_pltemplate.
        Use with care!
        [Default: no]
        type: bool

= lang
        Name of the procedural language to add, remove or change.
        (Aliases: name)
        type: str

- login_host
        Host running the database.
        [Default: (null)]
        type: str

- login_password
        The password used to authenticate with.
        [Default: (null)]
        type: str

- login_unix_socket
        Path to a Unix domain socket for local connections.
        [Default: (null)]
        type: str
        version_added: 2.8

- login_user
        The username used to authenticate with.
        [Default: postgres]
        type: str

- port
        Database port to connect to.
        (Aliases: login_port)[Default: 5432]
        type: int

- session_role
        Switch to session_role after connecting.
        The specified session_role must be a role that the current login_user is a member of.
        Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.
        [Default: (null)]
        type: str
        version_added: 2.8

- ssl_mode
        Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
        See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
        Default of `prefer' matches libpq default.
        (Choices: allow, disable, prefer, require, verify-ca, verify-full)[Default: prefer]
        type: str
        version_added: 2.8

- state
        The state of the language for the selected database.
        (Choices: absent, present)[Default: present]
        type: str

- trust
        Make this language trusted for the selected db.
        [Default: no]
        type: bool


NOTES:
      * The default authentication assumes that you are either logging in as or sudo'ing to the postgres account on the host.
      * This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module.
      * If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the
        remote host.
      * For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using
        this module.
      * The default authentication assumes that you are either logging in as or sudo'ing to the `postgres' account on the host.
      * This module uses `psycopg2', a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module. If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must
        also be installed on the remote host. For Ubuntu-based systems, install the `postgresql', `libpq-dev', and `python-
        psycopg2' packages on the remote host before using this module.
      * The ca_cert parameter requires at least Postgres version 8.4 and `psycopg2' version 2.4.3.


REQUIREMENTS:  psycopg2

AUTHOR: Jens Depuydt (@jensdepuydt), Thomas O'Donnell (@andytom)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Add language pltclu to database testdb if it doesn't exist
  postgresql_lang: db=testdb lang=pltclu state=present

# Add language pltclu to database testdb if it doesn't exist and mark it as trusted.
# Marks the language as trusted if it exists but isn't trusted yet.
# force_trust makes sure that the language will be marked as trusted
- name: Add language pltclu to database testdb if it doesn't exist and mark it as trusted
  postgresql_lang:
    db: testdb
    lang: pltclu
    state: present
    trust: yes
    force_trust: yes

- name: Remove language pltclu from database testdb
  postgresql_lang:
    db: testdb
    lang: pltclu
    state: absent

- name: Remove language pltclu from database testdb and remove all dependencies
  postgresql_lang:
    db: testdb
    lang: pltclu
    state: absent
    cascade: yes

- name: Remove language c from database testdb but ignore errors if something prevents the removal
  postgresql_lang:
    db: testdb
    lang: pltclu
    state: absent
    fail_on_drop: no


RETURN VALUES:

queries:
  description: List of executed queries.
  returned: always
  type: list
  sample: ['CREATE LANGUAGE "acme"']
  version_added: '2.8'

