> CE_VXLAN_ARP    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cloudengine/ce_vxlan_arp.py)

        Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- arp_collect_host
        Enables EVN BGP or BGP EVPN to collect host information.
        (Choices: enable, disable)[Default: (null)]

- arp_suppress
        Enables ARP broadcast suppression in a BD.
        (Choices: enable, disable)[Default: (null)]

- bridge_domain_id
        Specifies a BD(bridge domain) ID. The value is an integer ranging from 1 to 16777215.
        [Default: (null)]

- evn_bgp
        Enables EVN BGP.
        (Choices: enable, disable)[Default: (null)]

- evn_peer_ip
        Specifies the IP address of an EVN BGP peer. The value is in dotted decimal notation.
        [Default: (null)]

- evn_reflect_client
        Configures the local device as the route reflector (RR) and its peer as the client.
        (Choices: enable, disable)[Default: (null)]

- evn_server
        Configures the local device as the router reflector (RR) on the EVN network.
        (Choices: enable, disable)[Default: (null)]

- evn_source_ip
        Specifies the source address of an EVN BGP peer. The value is in dotted decimal notation.
        [Default: (null)]

- host_collect_protocol
        Enables EVN BGP or BGP EVPN to advertise host information.
        (Choices: bgp, none)[Default: (null)]

- state
        Determines whether the config should be present or not on the device.
        (Choices: present, absent)[Default: present]

- vbdif_name
        Full name of VBDIF interface, i.e. Vbdif100.
        [Default: (null)]


AUTHOR: QijunPan (@QijunPan)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: vxlan arp module test
  hosts: ce128
  connection: local
  gather_facts: no
  vars:
    cli:
      host: "{{ inventory_hostname }}"
      port: "{{ ansible_ssh_port }}"
      username: "{{ username }}"
      password: "{{ password }}"
      transport: cli

  tasks:

  - name: Configure EVN BGP on Layer 2 and Layer 3 VXLAN gateways to establish EVN BGP peer relationships.
    ce_vxlan_arp:
      evn_bgp: enable
      evn_source_ip: 6.6.6.6
      evn_peer_ip: 7.7.7.7
      provider: "{{ cli }}"
  - name: Configure a Layer 3 VXLAN gateway as a BGP RR.
    ce_vxlan_arp:
      evn_bgp: enable
      evn_server: enable
      provider: "{{ cli }}"
  - name: Enable EVN BGP on a Layer 3 VXLAN gateway to collect host information.
    ce_vxlan_arp:
      vbdif_name: Vbdif100
      arp_collect_host: enable
      provider: "{{ cli }}"
  - name: Enable Layer 2 and Layer 3 VXLAN gateways to use EVN BGP to advertise host information.
    ce_vxlan_arp:
      host_collect_protocol: bgp
      provider: "{{ cli }}"
  - name: Enable ARP broadcast suppression on a Layer 2 VXLAN gateway.
    ce_vxlan_arp:
      bridge_domain_id: 100
      arp_suppress: enable
      provider: "{{ cli }}"


RETURN VALUES:

proposed:
    description: k/v pairs of parameters passed into module
    returned: verbose mode
    type: dict
    sample: {"evn_bgp": "enable", "evn_source_ip": "6.6.6.6", "evn_peer_ip":"7.7.7.7", state: "present"}
existing:
    description: k/v pairs of existing configuration
    returned: verbose mode
    type: dict
    sample: {"evn_bgp": "disable", "evn_source_ip": null, "evn_peer_ip": []}
end_state:
    description: k/v pairs of configuration after module execution
    returned: verbose mode
    type: dict
    sample: {"evn_bgp": "enable", "evn_source_ip": "6.6.6.6", "evn_peer_ip": ["7.7.7.7"]}
updates:
    description: commands sent to the device
    returned: always
    type: list
    sample: ["evn bgp",
             "source-address 6.6.6.6",
             "peer 7.7.7.7"]
changed:
    description: check to see if a change was made on the device
    returned: always
    type: bool
    sample: true

