> NXOS_VRF    (/usr/lib/python2.7/dist-packages/ansible/modules/network/nxos/nxos_vrf.py)

        This module provides declarative management of VRFs on CISCO NXOS network devices.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

- admin_state
        Administrative state of the VRF.
        (Choices: up, down)[Default: up]

- aggregate
        List of VRFs definitions.
        [Default: (null)]
        version_added: 2.5
        

- associated_interfaces
        This is a intent option and checks the operational state of the for given vrf `name' for associated interfaces. If the value in
        the `associated_interfaces' does not match with the operational state of vrf interfaces on device it will result in failure.
        [Default: (null)]
        version_added: 2.5

- delay
        Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state
        arguments.
        [Default: 10]

- description
        Description of the VRF or keyword 'default'.
        [Default: (null)]

- interfaces
        List of interfaces to check the VRF has been configured correctly or keyword 'default'.
        [Default: (null)]
        version_added: 2.5
        

= name
        Name of VRF to be managed.
        (Aliases: vrf)

- provider
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli'.
        This option is only required if you are using NX-API.
        For more information please see the L(NXOS Platform Options guide, ../network/user_guide/platform_nxos.html).
        HORIZONTALLINE
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          auth_pass:
            description:
            - Specifies the password to use if required to enter privileged mode on the remote
              device.  If `authorize' is false, then this argument does nothing. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_AUTH_PASS'
              will be used instead.
            type: str
            version_added: 2.5.3
          authorize:
            default: false
            description:
            - Instructs the module to enter privileged mode on the remote device before sending
              any commands.  If not specified, the device will attempt to execute all commands
              in non-privileged mode. If the value is not specified in the task, the value
              of environment variable `ANSIBLE_NET_AUTHORIZE' will be used instead.
            type: bool
            version_added: 2.5.3
          host:
            description:
            - Specifies the DNS host name or address for connecting to the remote device over
              the specified transport.  The value of host is used as the destination address
              for the transport.
            required: true
            type: str
          password:
            description:
            - Specifies the password to use to authenticate the connection to the remote device.  This
              is a common argument used for either `cli' or `nxapi' transports. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_PASSWORD'
              will be used instead.
            type: str
          port:
            default: 0 (use common port)
            description:
            - Specifies the port to use when building the connection to the remote device.  This
              value applies to either `cli' or `nxapi'.  The port value will default to
              the appropriate transport common port if none is provided in the task.  (cli=22,
              http=80, https=443).
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH key to use to authenticate the connection to the remote device.  This
              argument is only used for the `cli' transport. If the value is not specified
              in the task, the value of environment variable `ANSIBLE_NET_SSH_KEYFILE' will
              be used instead.
            type: str
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error. NX-API can be slow to return
              on long-running commands (sh mac, sh bgp, etc).
            type: int
            version_added: '2.3'
          transport:
            choices:
            - cli
            - nxapi
            default: cli
            description:
            - Configures the transport connection to use when connecting to the remote device.  The
              transport argument supports connectivity to the device over cli (ssh) or nxapi.
            required: true
            type: str
          use_proxy:
            default: true
            description:
            - If `no', the environment variables `http_proxy' and `https_proxy' will be
              ignored.
            type: bool
            version_added: '2.5'
          use_ssl:
            default: false
            description:
            - Configures the `transport' to use SSL if set to `yes' only when the `transport=nxapi',
              otherwise this value is ignored.
            type: bool
          username:
            description:
            - Configures the username to use to authenticate the connection to the remote
              device.  This value is used to authenticate either the CLI login or the nxapi
              authentication depending on which transport is used. If the value is not specified
              in the task, the value of environment variable `ANSIBLE_NET_USERNAME' will
              be used instead.
            type: str
          validate_certs:
            default: true
            description:
            - If `no', SSL certificates will not be validated. This should only be used on
              personally controlled sites using self-signed certificates.  If the transport
              argument is not nxapi, this value is ignored.
            type: bool
        
        type: dict

- purge
        Purge VRFs not defined in the `aggregate' parameter.
        [Default: no]
        type: bool
        version_added: 2.5
        

- rd
        VPN Route Distinguisher (RD). Valid values are a string in one of the route-distinguisher formats (ASN2:NN, ASN4:NN, or IPV4:NN);
        the keyword 'auto', or the keyword 'default'.
        [Default: (null)]
        version_added: 2.2

- state
        Manages desired state of the resource.
        (Choices: present, absent)[Default: present]

- vni
        Specify virtual network identifier. Valid values are Integer or keyword 'default'.
        [Default: (null)]
        version_added: 2.2


NOTES:
      * Tested against NXOSv 7.3.(0)D1(1) on VIRL
      * Cisco NX-OS creates the default VRF by itself. Therefore, you're not allowed to use default as `vrf' name in this module.
      * `vrf' name must be shorter than 32 chars.
      * VRF names are not case sensible in NX-OS. Anyway, the name is stored just like it's inserted by the user and it'll not be
        changed again unless the VRF is removed and re-created. i.e. `vrf=NTC' will create a VRF named NTC, but running it again
        with `vrf=ntc' will not cause a configuration change.
      * For information on using CLI and NX-API see the :ref:`NXOS Platform Options guide <nxos_platform_options>`
      * For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`
      * For more information on using Ansible to manage Cisco devices see the `Cisco integration page
        <https://www.ansible.com/integrations/networks/cisco>`_.


AUTHOR: Jason Edelman (@jedelman8), Gabriele Gerbino (@GGabriele), Trishna Guha (@trishnaguha)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

- name: Ensure ntc VRF exists on switch
  nxos_vrf:
    name: ntc
    description: testing
    state: present

- name: Aggregate definition of VRFs
  nxos_vrf:
    aggregate:
      - { name: test1, description: Testing, admin_state: down }
      - { name: test2, interfaces: Ethernet1/2 }

- name: Aggregate definitions of VRFs with Purge
  nxos_vrf:
    aggregate:
      - { name: ntc1, description: purge test1 }
      - { name: ntc2, description: purge test2 }
    state: present
    purge: yes

- name: Delete VRFs exist on switch
  nxos_vrf:
    aggregate:
      - { name: ntc1 }
      - { name: ntc2 }
    state: absent

- name: Assign interfaces to VRF declaratively
  nxos_vrf:
    name: test1
    interfaces:
      - Ethernet2/3
      - Ethernet2/5

- name: Check interfaces assigend to VRF
  nxos_vrf:
    name: test1
    associated_interfaces:
      - Ethernet2/3
      - Ethernet2/5

- name: Ensure VRF is tagged with interface Ethernet2/5 only (Removes from Ethernet2/3)
  nxos_vrf:
    name: test1
    interfaces:
      - Ethernet2/5

- name: Delete VRF
  nxos_vrf:
    name: ntc
    state: absent


RETURN VALUES:

commands:
  description: commands sent to the device
  returned: always
  type: list
  sample:
    - vrf context ntc
    - no shutdown
    - interface Ethernet1/2
    - no switchport
    - vrf member test2

