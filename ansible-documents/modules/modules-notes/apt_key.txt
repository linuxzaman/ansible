> APT_KEY    (/usr/lib/python2.7/dist-packages/ansible/modules/packaging/os/apt_key.py)

        Add or remove an `apt' key, optionally downloading it.

  * This module is maintained by The Ansible Core Team
OPTIONS (= is mandatory):

- data
        The keyfile contents to add to the keyring.
        [Default: (null)]

- file
        The path to a keyfile on the remote server to add to the keyring.
        [Default: (null)]

- id
        The identifier of the key.
        Including this allows check mode to correctly report the changed state.
        If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary
        key's id instead.
        This parameter is required when `state' is set to `absent'.
        [Default: (null)]

- keyring
        The full path to specific keyring file in /etc/apt/trusted.gpg.d/
        [Default: (null)]
        version_added: 1.3

- keyserver
        The keyserver to retrieve key from.
        [Default: (null)]
        version_added: 1.6

- state
        Ensures that the key is present (added) or absent (revoked).
        (Choices: absent, present)[Default: present]

- url
        The URL to retrieve key from.
        [Default: (null)]

- validate_certs
        If `no', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using
        self-signed certificates.
        [Default: yes]
        type: bool


NOTES:
      * Doesn't download the key unless it really needs it.
      * As a sanity check, downloaded key id must match the one specified.
      * Use full fingerprint (40 characters) key ids to avoid key collisions. To generate a full-fingerprint imported key: `apt-key
        adv --list-public-keys --with-fingerprint --with-colons'.
      * If you specify both the key id and the URL with `state=present', the task can verify or add the key as needed.
      * Adding a new key requires an apt cache update (e.g. using the apt module's update_cache option)


AUTHOR: Jayson Vantuyl (@jvantuyl)
        METADATA:
          status:
          - preview
          supported_by: core
        

EXAMPLES:

- name: Add an apt key by id from a keyserver
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 36A1D7869245C8950F966E92D8576A8BA88D21E9

- name: Add an Apt signing key, uses whichever key is at the URL
  apt_key:
    url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
    state: present

- name: Add an Apt signing key, will not download if present
  apt_key:
    id: 9FED2BCBDCD29CDF762678CBAED4B06F473041FA
    url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
    state: present

- name: Remove a Apt specific signing key, leading 0x is valid
  apt_key:
    id: 0x9FED2BCBDCD29CDF762678CBAED4B06F473041FA
    state: absent

# Use armored file since utf-8 string is expected. Must be of "PGP PUBLIC KEY BLOCK" type.
- name: Add a key from a file on the Ansible server.
  apt_key:
    data: "{{ lookup('file', 'apt.asc') }}"
    state: present

- name: Add an Apt signing key to a specific keyring file
  apt_key:
    id: 9FED2BCBDCD29CDF762678CBAED4B06F473041FA
    url: https://ftp-master.debian.org/keys/archive-key-6.0.asc
    keyring: /etc/apt/trusted.gpg.d/debian.gpg

- name: Add Apt signing key on remote server to keyring
  apt_key:
    id: 9FED2BCBDCD29CDF762678CBAED4B06F473041FA
    file: /tmp/apt.gpg
    state: present


