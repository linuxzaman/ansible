> GIT_CONFIG    (/usr/lib/python2.7/dist-packages/ansible/modules/source_control/git_config.py)

        The `git_config' module changes git configuration by invoking 'git config'. This is needed if you don't want to use [template]
        for the entire git config file (e.g. because you need to change just `user.email' in /etc/.git/config).  Solutions involving
        [command] are cumbersome or don't work correctly in check mode.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- list_all
        List all settings (optionally limited to a given `scope')
        [Default: no]
        type: bool

- name
        The name of the setting. If no value is supplied, the value will be read from the config if it has been set.
        [Default: (null)]

- repo
        Path to a git repository for reading and writing values from a specific repo.
        [Default: (null)]

- scope
        Specify which scope to read/set values from. This is required when setting config values. If this is set to local, you must also
        specify the repo parameter. It defaults to system only when not using `list_all'=yes.
        (Choices: local, global, system)[Default: (null)]

- state
        Indicates the setting should be set/unset. This parameter has higher precedence than `value' parameter: when `state'=absent and
        `value' is defined, `value' is discarded.
        (Choices: present, absent)[Default: present]
        version_added: 2.8

- value
        When specifying the name of a single setting, supply a value to set that setting to the given value.
        [Default: (null)]


REQUIREMENTS:  git

AUTHOR: Matthew Gamble (@djmattyg007), Marius Gedminas (@mgedmin)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Set some settings in ~/.gitconfig
- git_config:
    name: alias.ci
    scope: global
    value: commit

- git_config:
    name: alias.st
    scope: global
    value: status

# Unset some settings in ~/.gitconfig
- git_config:
    name: alias.ci
    scope: global
    state: absent

# Or system-wide:
- git_config:
    name: alias.remotev
    scope: system
    value: remote -v

- git_config:
    name: core.editor
    scope: global
    value: vim

# scope=system is the default
- git_config:
    name: alias.diffc
    value: diff --cached

- git_config:
    name: color.ui
    value: auto

# Make etckeeper not complain when invoked by cron
- git_config:
    name: user.email
    repo: /etc
    scope: local
    value: 'root@{{ ansible_fqdn }}'

# Read individual values from git config
- git_config:
    name: alias.ci
    scope: global

# scope: system is also assumed when reading values, unless list_all=yes
- git_config:
    name: alias.diffc

# Read all values from git config
- git_config:
    list_all: yes
    scope: global

# When list_all=yes and no scope is specified, you get configuration from all scopes
- git_config:
    list_all: yes

# Specify a repository to include local settings
- git_config:
    list_all: yes
    repo: /path/to/repo.git


RETURN VALUES:

---
config_value:
  description: When list_all=no and value is not set, a string containing the value of the setting in name
  returned: success
  type: str
  sample: "vim"

config_values:
  description: When list_all=yes, a dict containing key/value pairs of multiple configuration settings
  returned: success
  type: dict
  sample:
    core.editor: "vim"
    color.ui: "auto"
    alias.diffc: "diff --cached"
    alias.remotev: "remote -v"

