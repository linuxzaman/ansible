> TELNET    (/usr/lib/python2.7/dist-packages/ansible/modules/commands/telnet.py)

        Executes a low-down and dirty telnet command, not going through the module subsystem. This is mostly to be used for enabling ssh
        on devices that only have telnet enabled by default.

  * This module is maintained by The Ansible Community
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

= command
        List of commands to be executed in the telnet session.
        (Aliases: commands)

- host
        The host/target on which to execute the command
        [Default: remote_addr]

- login_prompt
        Login or username prompt to expect
        [Default: login: ]

- password
        The password for login
        [Default: (null)]

- password_prompt
        Login or username prompt to expect
        [Default: Password: ]

- pause
        Seconds to pause between each command issued
        [Default: 1]

- port
        Remote port to use
        [Default: 23]

- prompts
        List of prompts expected before sending next command
        [Default: [u'$']]

- send_newline
        Sends a newline character upon successful connection to start the terminal session.
        [Default: False]
        type: bool
        version_added: 2.7

- timeout
        timeout for remote operations
        [Default: 120]

- user
        The user for login
        [Default: remote_user]


NOTES:
      * The `environment' keyword does not work with this task


AUTHOR: Ansible Core Team
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: send configuration commands to IOS
  telnet:
    user: cisco
    password: cisco
    login_prompt: "Username: "
    prompts:
      - "[>#]"
    command:
      - terminal length 0
      - configure terminal
      - hostname ios01

- name: run show commands
  telnet:
    user: cisco
    password: cisco
    login_prompt: "Username: "
    prompts:
      - "[>#]"
    command:
      - terminal length 0
      - show version


RETURN VALUES:

output:
    description: output of each command is an element in this list
    type: list
    returned: always
    sample: [ 'success', 'success', '', 'warning .. something' ]

