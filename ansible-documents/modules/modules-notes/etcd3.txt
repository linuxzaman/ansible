> ETCD3    (/usr/lib/python2.7/dist-packages/ansible/modules/clustering/etcd3.py)

        Sets or deletes values in etcd3 cluster using its v3 api. Needs python etcd3 lib to work

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- ca_cert
        The Certificate Authority to use to verify the etcd host.
        Required if `client_cert' and `client_key' are defined.
        [Default: (null)]
        version_added: 2.8

- client_cert
        PEM formatted certificate chain file to be used for SSL client authentication.
        Required if `client_key' is defined.
        [Default: (null)]
        version_added: 2.8

- client_key
        PEM formatted file that contains your private key to be used for SSL client authentication.
        Required if `client_cert' is defined.
        [Default: (null)]
        version_added: 2.8

- host
        the IP address of the cluster
        [Default: localhost]

= key
        the key where the information is stored in the cluster


- password
        The password to use for authentication.
        Required if `user' is defined.
        [Default: (null)]
        version_added: 2.8

- port
        the port number used to connect to the cluster
        [Default: 2379]

= state
        the state of the value for the key.
        can be present or absent


- timeout
        The socket level timeout in seconds.
        [Default: (null)]
        version_added: 2.8

- user
        The etcd user to authenticate with.
        [Default: (null)]
        version_added: 2.8

= value
        the information stored



REQUIREMENTS:  etcd3

AUTHOR: Jean-Philippe Evrard (@evrardjp), Victor Fauth (@vfauth)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Store a value "bar" under the key "foo" for a cluster located "http://localhost:2379"
- etcd3:
    key: "foo"
    value: "baz3"
    host: "localhost"
    port: 2379
    state: "present"

# Authenticate using user/password combination with a timeout of 10 seconds
- etcd3:
    key: "foo"
    value: "baz3"
    state: "present"
    user: "someone"
    password: "password123"
    timeout: 10

# Authenticate using TLS certificates
- etcd3:
    key: "foo"
    value: "baz3"
    state: "present"
    ca_cert: "/etc/ssl/certs/CA_CERT.pem"
    client_cert: "/etc/ssl/certs/cert.crt"
    client_key: "/etc/ssl/private/key.pem"


RETURN VALUES:

key:
    description: The key that was queried
    returned: always
    type: str
old_value:
    description: The previous value in the cluster
    returned: always
    type: str

