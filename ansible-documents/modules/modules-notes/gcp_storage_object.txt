> GCP_STORAGE_OBJECT    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/google/gcp_storage_object.py)

        Upload or download a file from a GCS bucket.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- action
        Upload or download from the bucket.
        (Choices: download, upload)[Default: (null)]

= auth_kind
        The type of credential used.
        (Choices: application, machineaccount, serviceaccount)
        type: str

- bucket
        The name of the bucket.
        [Default: (null)]

- dest
        Destination location of file (may be local machine or cloud depending on action).
        [Default: (null)]

- overwrite
        'Overwrite the file on the bucket/local machine. If overwrite is false and a difference exists between GCS + local, module will
        fail with error' .
        [Default: (null)]
        type: bool

- project
        The Google Cloud Platform project to use.
        [Default: (null)]
        type: str

- scopes
        Array of scopes to be used.
        [Default: (null)]
        type: list

- service_account_contents
        A string representing the contents of a Service Account JSON file.
        This should not be passed in as a dictionary, but a string that has the exact contents of a service account json file (valid
        JSON)
        [Default: (null)]
        type: str

- service_account_email
        An optional service account email address if machineaccount is selected and the user does not wish to use the default email.
        [Default: (null)]
        type: str

- service_account_file
        The path of a Service Account JSON file if serviceaccount is selected as type.
        [Default: (null)]
        type: path

- src
        Source location of file (may be local machine or cloud depending on action).
        [Default: (null)]

- state
        Whether the given object should exist in GCP
        (Choices: present, absent)[Default: present]


NOTES:
      * For authentication, you can set service_account_file using the `GCP_SERVICE_ACCOUNT_FILE' env variable.
      * For authentication, you can set service_account_email using the `GCP_SERVICE_ACCOUNT_EMAIL' env variable.
      * For authentication, you can set service_account_contents using the `GCP_SERVICE_ACCOUNT_CONTENTS' env variable.
      * For authentication, you can set auth_kind using the `GCP_AUTH_KIND' env variable.
      * For authentication, you can set scopes using the `GCP_SCOPES' env variable.
      * Environment variables values will only be used if the playbook values are not set.
      * The `service_account_email' and `service_account_file' options are mutually exclusive.


REQUIREMENTS:  python >= 2.6, requests >= 2.18.4, google-auth >= 1.3.0

AUTHOR: Google Inc. (@googlecloudplatform)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: create a object
  gcp_storage_object:
    name: ansible-storage-module
    action: download
    bucket: ansible-bucket
    src: modules.zip
    dest: "~/modules.zip"
    project: test_project
    auth_kind: serviceaccount
    service_account_file: "/tmp/auth.pem"
    state: present


RETURN VALUES:

action:
  description:
  - Upload or download from the bucket.
  returned: success
  type: str
overwrite:
  description:
  - "'Overwrite the file on the bucket/local machine. If overwrite is false and a
    difference exists between GCS + local, module will fail with error' ."
  returned: success
  type: bool
src:
  description:
  - Source location of file (may be local machine or cloud depending on action).
  returned: success
  type: str
dest:
  description:
  - Destination location of file (may be local machine or cloud depending on action).
  returned: success
  type: str
bucket:
  description:
  - The name of the bucket.
  returned: success
  type: str

