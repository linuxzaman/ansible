> CV_SERVER_PROVISION    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cloudvision/cv_server_provision.py)

        This module allows a server team to provision server network ports for new servers without having to access Arista CVP or asking
        the network team to do it for them. Provide the information for connecting to CVP, switch rack, port the new server is connected
        to, optional vlan, and an action and the module will apply the configuration to the switch port via CVP. Actions are add (applies
        template config to port), remove (defaults the interface config) and show (returns the current port config).

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- action
        The action for the module to take. The actions are add, which applies the specified template config to port, remove, which
        defaults the specified interface configuration, and show, which will return the current port configuration with no changes.
        (Choices: show, add, remove)[Default: show]

- auto_run
        Flag that determines whether or not the module will execute the CVP task spawned as a result of changes to a switch configlet.
        When an add or remove action is taken which results in a change to a switch configlet, CVP will spawn a task that needs to be
        executed for the configuration to be applied to the switch. If this option is True then the module will determined the task
        number created by the configuration change, execute it and wait for the task to complete. If the option is False then the task
        will remain in the Pending state in CVP for a network administrator to review and execute.
        [Default: no]
        type: bool

= host
        The hostname or IP address of the CVP node being connected to.


= password
        The password of the user that will be used to connect to CVP for API calls.


- port
        The port number to use when making API calls to the CVP node. This will default to the default port for the specified protocol.
        Port 80 for http and port 443 for https.
        [Default: (null)]

- port_vlan
        The vlan that should be applied to the port for this server. This parameter is dependent on a proper template that supports
        single vlan provisioning with it. If a port vlan is specified by the template specified does not support this the module will
        exit out with no changes. If a template is specified that requires a port vlan but no port vlan is specified the module will exit
        out with no changes.
        [Default: (null)]

- protocol
        The protocol to use when making API calls to CVP. CVP defaults to https and newer versions of CVP no longer support http.
        (Choices: https, http)[Default: https]

= server_name
        The hostname or identifier for the server that is having it's switch port provisioned.


= switch_name
        The hostname of the switch is being configured for the server being provisioned.


= switch_port
        The physical port number on the switch that the new server is connected to.


= template
        A path to a Jinja formatted template file that contains the configuration block that will be applied to the specified switch
        port. This template will have variable fields replaced by the module before being applied to the switch configuration.


= username
        The user that will be used to connect to CVP for making API calls.



REQUIREMENTS:  Jinja2, cvprac >= 0.7.0

AUTHOR: EOS+ CS (ansible-dev@arista.com) (@mharista)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Get current configuration for interface Ethernet2
  cv_server_provision:
    host: cvp_node
    username: cvp_user
    password: cvp_pass
    protocol: https
    server_name: new_server
    switch_name: eos_switch_1
    switch_port: 2
    template: template_file.j2
    action: show

- name: Remove existing configuration from interface Ethernet2. Run task.
  cv_server_provision:
    host: cvp_node
    username: cvp_user
    password: cvp_pass
    protocol: https
    server_name: new_server
    switch_name: eos_switch_1
    switch_port: 2
    template: template_file.j2
    action: remove
    auto_run: True

- name: Add template configuration to interface Ethernet2. No VLAN. Run task.
  cv_server_provision:
    host: cvp_node
    username: cvp_user
    password: cvp_pass
    protocol: https
    server_name: new_server
    switch_name: eos_switch_1
    switch_port: 2
    template: single_attached_trunk.j2
    action: add
    auto_run: True

- name: Add template with VLAN configuration to interface Ethernet2. Run task.
  cv_server_provision:
    host: cvp_node
    username: cvp_user
    password: cvp_pass
    protocol: https
    server_name: new_server
    switch_name: eos_switch_1
    switch_port: 2
    port_vlan: 22
    template: single_attached_vlan.j2
    action: add
    auto_run: True


RETURN VALUES:

changed:
  description: Signifies if a change was made to the configlet
  returned: success
  type: bool
  sample: true
currentConfigBlock:
  description: The current config block for the user specified interface
  returned: when action = show
  type: str
  sample: |
    interface Ethernet4
    !
newConfigBlock:
  description: The new config block for the user specified interface
  returned: when action = add or remove
  type: str
  sample: |
    interface Ethernet3
        description example
        no switchport
    !
oldConfigBlock:
  description: The current config block for the user specified interface
               before any changes are made
  returned: when action = add or remove
  type: str
  sample: |
    interface Ethernet3
    !
fullConfig:
  description: The full config of the configlet after being updated
  returned: when action = add or remove
  type: str
  sample: |
    !
    interface Ethernet3
    !
    interface Ethernet4
    !
updateConfigletResponse:
  description: Response returned from CVP when configlet update is triggered
  returned: when action = add or remove and configuration changes
  type: str
  sample: "Configlet veos1-server successfully updated and task initiated."
portConfigurable:
  description: Signifies if the user specified port has an entry in the
               configlet that Ansible has access to
  returned: success
  type: bool
  sample: true
switchConfigurable:
  description: Signifies if the user specified switch has a configlet
               applied to it that CVP is allowed to edit
  returned: success
  type: bool
  sample: true
switchInfo:
  description: Information from CVP describing the switch being configured
  returned: success
  type: dict
  sample: {"architecture": "i386",
           "bootupTimeStamp": 1491264298.21,
           "complianceCode": "0000",
           "complianceIndication": "NONE",
           "deviceInfo": "Registered",
           "deviceStatus": "Registered",
           "fqdn": "veos1",
           "hardwareRevision": "",
           "internalBuildId": "12-12",
           "internalVersion": "4.17.1F-11111.4171F",
           "ipAddress": "192.168.1.20",
           "isDANZEnabled": "no",
           "isMLAGEnabled": "no",
           "key": "00:50:56:5d:e5:e0",
           "lastSyncUp": 1496432895799,
           "memFree": 472976,
           "memTotal": 1893460,
           "modelName": "vEOS",
           "parentContainerId": "container_13_5776759195930",
           "serialNumber": "",
           "systemMacAddress": "00:50:56:5d:e5:e0",
           "taskIdList": [],
           "tempAction": null,
           "type": "netelement",
           "unAuthorized": false,
           "version": "4.17.1F",
           "ztpMode": "false"}
taskCompleted:
  description: Signifies if the task created and executed has completed successfully
  returned: when action = add or remove, and auto_run = true,
            and configuration changes
  type: bool
  sample: true
taskCreated:
  description: Signifies if a task was created due to configlet changes
  returned: when action = add or remove, and auto_run = true or false,
            and configuration changes
  type: bool
  sample: true
taskExecuted:
  description: Signifies if the automation executed the spawned task
  returned: when action = add or remove, and auto_run = true,
            and configuration changes
  type: bool
  sample: true
taskId:
  description: The task ID created by CVP because of changes to configlet
  returned: when action = add or remove, and auto_run = true or false,
            and configuration changes
  type: str
  sample: "500"

