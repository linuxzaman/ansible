> ACI_REST    (/usr/lib/python2.7/dist-packages/ansible/modules/network/aci/aci_rest.py)

        Enables the management of the Cisco ACI fabric through direct access to the Cisco APIC REST API. Thanks to the idempotent nature
        of the APIC, this module is idempotent and reports changes.

  * This module is maintained by an Ansible Partner
OPTIONS (= is mandatory):

- certificate_name
        The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.
        If a `private_key' filename was provided, this defaults to the `private_key' basename, without extension.
        If PEM-formatted content was provided for `private_key', this defaults to the `username' value.
        (Aliases: cert_name)[Default: (null)]
        type: str

- content
        When used instead of `src', sets the payload of the API request directly.
        This may be convenient to template simple requests.
        For anything complex use the `template' lookup plugin (see examples) or the [template] module with parameter `src'.
        [Default: (null)]
        type: raw

= host
        IP Address or hostname of APIC resolvable by Ansible control host.
        (Aliases: hostname)
        type: str

- method
        The HTTP method of the request.
        Using `delete' is typically used for deleting objects.
        Using `get' is typically used for querying objects.
        Using `post' is typically used for modifying objects.
        (Aliases: action)(Choices: delete, get, post)[Default: get]
        type: str

- output_level
        Influence the output of this ACI module.
        `normal' means the standard output, incl. `current' dict
        `info' adds informational output, incl. `previous', `proposed' and `sent' dicts
        `debug' adds debugging output, incl. `filter_string', `method', `response', `status' and `url' information
        (Choices: debug, info, normal)[Default: normal]
        type: str

= password
        The password to use for authentication.
        This option is mutual exclusive with `private_key'. If `private_key' is provided too, it will be used instead.

        type: str

= path
        URI being used to execute API calls.
        Must end in `.xml' or `.json'.
        (Aliases: uri)
        type: str

- port
        Port number to be used for REST connection.
        The default value depends on parameter `use_ssl'.
        [Default: (null)]
        type: int

= private_key
        Either a PEM-formatted private key file or the private key content used for signature-based authentication.
        This value also influences the default `certificate_name' that is used.
        This option is mutual exclusive with `password'. If `password' is provided too, it will be ignored.
        (Aliases: cert_key)
        type: str

- src
        Name of the absolute path of the filname that includes the body of the HTTP request being sent to the ACI fabric.
        If you require a templated payload, use the `content' parameter together with the `template' lookup plugin, or use [template].
        (Aliases: config_file)[Default: (null)]
        type: path

- timeout
        The socket level timeout in seconds.
        [Default: 30]
        type: int

- use_proxy
        If `no', it will not use a proxy, even if one is defined in an environment variable on the target hosts.
        [Default: True]
        type: bool

- use_ssl
        If `no', an HTTP connection will be used instead of the default HTTPS connection.
        [Default: True]
        type: bool

- username
        The username to use for authentication.
        (Aliases: user)[Default: admin]
        type: str

- validate_certs
        If `no', SSL certificates will not be validated.
        This should only set to `no' when used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool


NOTES:
      * Certain payloads are known not to be idempotent, so be careful when constructing payloads, e.g. using `status="created"'
        will cause idempotency issues, use `status="modified"' instead. More information in :ref:`the ACI documentation
        <aci_guide_known_issues>`.
      * Certain payloads (and used paths) are known to report no changes happened when changes did happen. This is a known APIC
        problem and has been reported to the vendor. A workaround for this issue exists. More information in :ref:`the ACI
        documentation <aci_guide_known_issues>`.
      * XML payloads require the `lxml' and `xmljson' python libraries. For JSON payloads nothing special is needed.


SEE ALSO:
      * Module aci_tenant
           The official documentation on the aci_tenant module.
           https://docs.ansible.com/ansible/latest/modules/aci_tenant_module.html
      * Cisco APIC REST API Configuration Guide
           More information about the APIC REST API.
           http://www.cisco.com/c/en/us/td/docs/switches/datacenter/aci/apic/sw/2-x/rest_cfg/2_1_x/b_Cisco_APIC_REST_API_Configurat
           ion_Guide.html
      * Ansible documentation [aci_guide]
           Detailed information on how to manage your ACI infrastructure using Ansible.
           https://docs.ansible.com/ansible/latest/#stq=aci_guide&stp=1
      * Ansible documentation [aci_dev_guide]
           Detailed guide on how to write your own Cisco ACI modules to contribute.
           https://docs.ansible.com/ansible/latest/#stq=aci_dev_guide&stp=1


REQUIREMENTS:  lxml (when using XML payload), xmljson >= 0.1.8 (when using XML payload), python 2.7+ (when using xmljson)

AUTHOR: Dag Wieers (@dagwieers)
        METADATA:
          status:
          - preview
          supported_by: certified
        

EXAMPLES:

- name: Add a tenant using certificate authentication
  aci_rest:
    host: apic
    username: admin
    private_key: pki/admin.key
    method: post
    path: /api/mo/uni.xml
    src: /home/cisco/ansible/aci/configs/aci_config.xml
  delegate_to: localhost

- name: Add a tenant from a templated payload file from templates/
  aci_rest:
    host: apic
    username: admin
    private_key: pki/admin.key
    method: post
    path: /api/mo/uni.xml
    content: "{{ lookup('template', 'aci/tenant.xml.j2') }}"
  delegate_to: localhost

- name: Add a tenant using inline YAML
  aci_rest:
    host: apic
    username: admin
    private_key: pki/admin.key
    validate_certs: no
    path: /api/mo/uni.json
    method: post
    content:
      fvTenant:
        attributes:
          name: Sales
          descr: Sales departement
  delegate_to: localhost

- name: Add a tenant using a JSON string
  aci_rest:
    host: apic
    username: admin
    private_key: pki/admin.key
    validate_certs: no
    path: /api/mo/uni.json
    method: post
    content:
      {
        "fvTenant": {
          "attributes": {
            "name": "Sales",
            "descr": "Sales departement"
          }
        }
      }
  delegate_to: localhost

- name: Add a tenant using an XML string
  aci_rest:
    host: apic
    username: admin
    private_key: pki/{{ aci_username }}.key
    validate_certs: no
    path: /api/mo/uni.xml
    method: post
    content: '<fvTenant name="Sales" descr="Sales departement"/>'
  delegate_to: localhost

- name: Get tenants using password authentication
  aci_rest:
    host: apic
    username: admin
    password: SomeSecretPassword
    method: get
    path: /api/node/class/fvTenant.json
  delegate_to: localhost
  register: query_result

- name: Configure contracts
  aci_rest:
    host: apic
    username: admin
    private_key: pki/admin.key
    method: post
    path: /api/mo/uni.xml
    src: /home/cisco/ansible/aci/configs/contract_config.xml
  delegate_to: localhost

- name: Register leaves and spines
  aci_rest:
    host: apic
    username: admin
    private_key: pki/admin.key
    validate_certs: no
    method: post
    path: /api/mo/uni/controller/nodeidentpol.xml
    content: |
      <fabricNodeIdentPol>
        <fabricNodeIdentP name="{{ item.name }}" nodeId="{{ item.nodeid }}" status="{{ item.status }}" serial="{{ item.serial }}"/>
      </fabricNodeIdentPol>
  with_items:
  - '{{ apic_leavesspines }}'
  delegate_to: localhost

- name: Wait for all controllers to become ready
  aci_rest:
    host: apic
    username: admin
    private_key: pki/admin.key
    validate_certs: no
    path: /api/node/class/topSystem.json?query-target-filter=eq(topSystem.role,"controller")
  register: apics
  until: "'totalCount' in apics and apics.totalCount|int >= groups['apic']|count"
  retries: 120
  delay: 30
  delegate_to: localhost
  run_once: yes


RETURN VALUES:

error_code:
  description: The REST ACI return code, useful for troubleshooting on failure
  returned: always
  type: int
  sample: 122
error_text:
  description: The REST ACI descriptive text, useful for troubleshooting on failure
  returned: always
  type: str
  sample: unknown managed object class foo
imdata:
  description: Converted output returned by the APIC REST (register this for post-processing)
  returned: always
  type: str
  sample: [{"error": {"attributes": {"code": "122", "text": "unknown managed object class foo"}}}]
payload:
  description: The (templated) payload send to the APIC REST API (xml or json)
  returned: always
  type: str
  sample: '<foo bar="boo"/>'
raw:
  description: The raw output returned by the APIC REST API (xml or json)
  returned: parse error
  type: str
  sample: '<?xml version="1.0" encoding="UTF-8"?><imdata totalCount="1"><error code="122" text="unknown managed object class foo"/></imdata>'
response:
  description: HTTP response string
  returned: always
  type: str
  sample: 'HTTP Error 400: Bad Request'
status:
  description: HTTP status code
  returned: always
  type: int
  sample: 400
totalCount:
  description: Number of items in the imdata array
  returned: always
  type: str
  sample: '0'
url:
  description: URL used for APIC REST call
  returned: success
  type: str
  sample: https://1.2.3.4/api/mo/uni/tn-[Dag].json?rsp-subtree=modified

