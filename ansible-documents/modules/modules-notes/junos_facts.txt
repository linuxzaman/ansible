> JUNOS_FACTS    (/usr/lib/python2.7/dist-packages/ansible/modules/network/junos/junos_facts.py)

        Collects fact information from a remote device running the Junos operating system.  By default, the module will collect basic
        fact information from the device to be included with the hostvars. Additional fact information can be collected based on the
        configured set of arguments.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

- config_format
        The `config_format' argument specifies the format of the configuration when serializing output from the device. This argument is
        applicable only when `config' value is present in `gather_subset'. The `config_format' should be supported by the junos version
        running on device. This value is not applicable while fetching old style facts that is when `ofacts' value is present in value if
        `gather_subset' value.
        (Choices: xml, text, set, json)[Default: text]
        version_added: 2.3

- gather_subset
        When supplied, this argument will restrict the facts collected to a given subset.  Possible values for this argument include all,
        hardware, config, and interfaces.  Can specify a list of values to include a larger subset.  Values can also be used with an
        initial `[!]' to specify that a specific subset should not be collected. To maintain backward compatbility old style facts can be
        retrieved by explicilty adding `ofacts'  to value, this reqires junos-eznc to be installed as a prerequisite. Valid value of
        gather_subset are default, hardware, config, interfaces, ofacts. If `ofacts' is present in the list it fetches the old style
        facts (fact keys without 'ansible_' prefix) and it requires junos-eznc library to be installed on control node and the device
        login credentials must be given in `provider' option.
        [Default: [u'!config', u'!ofacts']]
        version_added: 2.3

- provider
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli' or `connection: netconf'.
        For more information please see the L(Junos OS Platform Options guide, ../network/user_guide/platform_junos.html).
        HORIZONTALLINE
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          host:
            description:
            - Specifies the DNS host name or address for connecting to the remote device over
              the specified transport.  The value of host is used as the destination address
              for the transport.
            required: true
            type: str
          password:
            description:
            - Specifies the password to use to authenticate the connection to the remote device.   This
              value is used to authenticate the SSH session. If the value is not specified
              in the task, the value of environment variable `ANSIBLE_NET_PASSWORD' will
              be used instead.
            type: str
          port:
            default: 22
            description:
            - Specifies the port to use when building the connection to the remote device.  The
              port value will default to the well known SSH port of 22 (for `transport=cli')
              or port 830 (for `transport=netconf') device.
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH key to use to authenticate the connection to the remote device.   This
              value is the path to the key used to authenticate the SSH session. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_SSH_KEYFILE'
              will be used instead.
            type: path
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error.
            type: int
          username:
            description:
            - Configures the username to use to authenticate the connection to the remote
              device.  This value is used to authenticate the SSH session. If the value is
              not specified in the task, the value of environment variable `ANSIBLE_NET_USERNAME'
              will be used instead.
            type: str
        
        type: dict


NOTES:
      * Ensure `config_format' used to retrieve configuration from device is supported by junos version running on device.
      * With `config_format = json', configuration in the results will be a dictionary(and not a JSON string)
      * This module requires the netconf system service be enabled on the remote device being managed.
      * Tested against vSRX JUNOS version 15.1X49-D15.4, vqfx-10000 JUNOS Version 15.1X53-D60.4.
      * Recommended connection is `netconf'. See L(the Junos OS Platform Options,../network/user_guide/platform_junos.html).
      * This module also works with `local' connections for legacy playbooks.
      * Fetching old style facts requires junos-eznc library to be installed on control node and the device login credentials must
        be given in provider option.
      * For information on using CLI and netconf see the :ref:`Junos OS Platform Options guide <junos_platform_options>`
      * For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`
      * For more information on using Ansible to manage Juniper network devices see https://www.ansible.com/ansible-juniper.


REQUIREMENTS:  ncclient (>=v0.5.2)

AUTHOR: Nathaniel Case (@qalthos)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

- name: collect default set of facts
  junos_facts:

- name: collect default set of facts and configuration
  junos_facts:
    gather_subset: config


RETURN VALUES:

ansible_facts:
  description: Returns the facts collect from the device
  returned: always
  type: dict

