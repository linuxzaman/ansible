> PROXYSQL_REPLICATION_HOSTGROUPS    (/usr/lib/python2.7/dist-packages/ansible/modules/database/proxysql/proxysql_replication_hostgroups.py)

        Each row in mysql_replication_hostgroups represent a pair of writer_hostgroup and reader_hostgroup. ProxySQL will monitor the
        value of read_only for all the servers in specified hostgroups, and based on the value of read_only will assign the server to the
        writer or reader hostgroups.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- comment
        Text field that can be used for any purposed defined by the user.
        [Default: (null)]

- config_file
        Specify a config file from which `login_user' and `login_password' are to be read.
        [Default: ]
        type: path

- load_to_runtime
        Dynamically load config to runtime memory.
        [Default: yes]
        type: bool

- login_host
        The host used to connect to ProxySQL admin interface.
        [Default: 127.0.0.1]
        type: str

- login_password
        The password used to authenticate to ProxySQL admin interface.
        [Default: (null)]
        type: str

- login_port
        The port used to connect to ProxySQL admin interface.
        [Default: 6032]
        type: int

- login_user
        The username used to authenticate to ProxySQL admin interface.
        [Default: (null)]
        type: str

= reader_hostgroup
        Id of the reader hostgroup.


- save_to_disk
        Save config to sqlite db on disk to persist the configuration.
        [Default: yes]
        type: bool

- state
        When `present' - adds the replication hostgroup, when `absent' - removes the replication hostgroup.
        (Choices: present, absent)[Default: present]

= writer_hostgroup
        Id of the writer hostgroup.



REQUIREMENTS:  PyMySQL (Python 2.7 and Python 3.X), or, MySQLdb (Python 2.x)

AUTHOR: Ben Mildren (@bmildren)
        METADATA:
          status:
          - stableinterface
          supported_by: community
        

EXAMPLES:

---
# This example adds a replication hostgroup, it saves the mysql server config
# to disk, but avoids loading the mysql server config to runtime (this might be
# because several replication hostgroup are being added and the user wants to
# push the config to runtime in a single batch using the
# M(proxysql_manage_config) module).  It uses supplied credentials to connect
# to the proxysql admin interface.

- proxysql_replication_hostgroups:
    login_user: 'admin'
    login_password: 'admin'
    writer_hostgroup: 1
    reader_hostgroup: 2
    state: present
    load_to_runtime: False

# This example removes a replication hostgroup, saves the mysql server config
# to disk, and dynamically loads the mysql server config to runtime.  It uses
# credentials in a supplied config file to connect to the proxysql admin
# interface.

- proxysql_replication_hostgroups:
    config_file: '~/proxysql.cnf'
    writer_hostgroup: 3
    reader_hostgroup: 4
    state: absent


RETURN VALUES:

stdout:
    description: The replication hostgroup modified or removed from proxysql
    returned: On create/update will return the newly modified group, on delete
              it will return the deleted record.
    type: dict
    "sample": {
        "changed": true,
        "msg": "Added server to mysql_hosts",
        "repl_group": {
            "comment": "",
            "reader_hostgroup": "1",
            "writer_hostgroup": "2"
        },
        "state": "present"
    }

