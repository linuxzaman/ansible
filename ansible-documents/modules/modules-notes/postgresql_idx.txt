> POSTGRESQL_IDX    (/usr/lib/python2.7/dist-packages/ansible/modules/database/postgresql/postgresql_idx.py)

        Create or drop indexes from a PostgreSQL database. For more information see https://www.postgresql.org/docs/current/sql-
        createindex.html, https://www.postgresql.org/docs/current/sql-dropindex.html.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- ca_cert
        Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
        If the file exists, the server's certificate will be verified to be signed by one of these authorities.
        (Aliases: ssl_rootcert)[Default: (null)]
        type: str

- cascade
        Automatically drop objects that depend on the index, and in turn all objects that depend on those objects
        https://www.postgresql.org/docs/current/sql-dropindex.html.
        It used only with `state=absent'.
        Mutually exclusive with `concurrent=yes'
        [Default: False]
        type: bool

- columns
        List of index columns that need to be covered by index.
        Mutually exclusive with `state=absent'.
        (Aliases: column)[Default: (null)]
        type: list

- concurrent
        Enable or disable concurrent mode (CREATE / DROP INDEX CONCURRENTLY).
        Pay attention, if `concurrent=no', the table will be locked (ACCESS EXCLUSIVE) during the building process. For more information
        about the lock levels see https://www.postgresql.org/docs/current/explicit-locking.html.
        If the building process was interrupted for any reason when `cuncurrent=yes', the index becomes invalid. In this case it should
        be dropped and created again.
        Mutually exclusive with `cascade=yes'.
        [Default: True]
        type: bool

- cond
        Index conditions.
        Mutually exclusive with `state=absent'.
        [Default: (null)]
        type: str

- db
        Name of database to connect to and where the index will be created/dropped.
        (Aliases: login_db)[Default: (null)]
        type: str

= idxname
        Name of the index to create or drop.
        (Aliases: name)
        type: str

- idxtype
        Index type (like btree, gist, gin, etc.).
        Mutually exclusive with `state=absent'.
        (Aliases: type)[Default: (null)]
        type: str

- login_host
        Host running the database.
        [Default: (null)]
        type: str

- login_password
        The password used to authenticate with.
        [Default: (null)]
        type: str

- login_unix_socket
        Path to a Unix domain socket for local connections.
        [Default: (null)]
        type: str

- login_user
        The username used to authenticate with.
        [Default: postgres]
        type: str

- port
        Database port to connect to.
        (Aliases: login_port)[Default: 5432]
        type: int

- schema
        Name of a database schema where the index will be created.
        [Default: (null)]
        type: str

- session_role
        Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.
        Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.
        [Default: (null)]
        type: str

- ssl_mode
        Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
        See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
        Default of `prefer' matches libpq default.
        (Choices: allow, disable, prefer, require, verify-ca, verify-full)[Default: prefer]
        type: str

- state
        Index state.
        `state=present' implies the index will be created if it does not exist.
        `state=absent' implies the index will be dropped if it exists.
        (Choices: absent, present)[Default: present]
        type: str

- storage_params
        Storage parameters like fillfactor, vacuum_cleanup_index_scale_factor, etc.
        Mutually exclusive with `state=absent'.
        [Default: (null)]
        type: list

= table
        Table to create index on it.
        Mutually exclusive with `state=absent'.

        type: str

- tablespace
        Set a tablespace for the index.
        Mutually exclusive with `state=absent'.
        [Default: (null)]
        type: str


NOTES:
      * The index building process can affect database performance.
      * To avoid table locks on production databases, use `concurrent=yes' (default behavior).
      * The default authentication assumes that you are either logging in as or sudo'ing to the postgres account on the host.
      * This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module.
      * If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the
        remote host.
      * For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using
        this module.
      * The default authentication assumes that you are either logging in as or sudo'ing to the `postgres' account on the host.
      * This module uses `psycopg2', a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module. If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must
        also be installed on the remote host. For Ubuntu-based systems, install the `postgresql', `libpq-dev', and `python-
        psycopg2' packages on the remote host before using this module.
      * The ca_cert parameter requires at least Postgres version 8.4 and `psycopg2' version 2.4.3.


REQUIREMENTS:  psycopg2

AUTHOR: Andrew Klychkov (@Andersson007)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create btree index if not exists test_idx concurrently covering columns id and name of table products
  postgresql_idx:
    db: acme
    table: products
    columns: id,name
    name: test_idx

- name: Create btree index test_idx concurrently with tablespace called ssd and storage parameter
  postgresql_idx:
    db: acme
    table: products
    columns:
    - id
    - name
    idxname: test_idx
    tablespace: ssd
    storage_params:
    - fillfactor=90

- name: Create gist index test_gist_idx concurrently on column geo_data of table map
  postgresql_idx:
    db: somedb
    table: map
    idxtype: gist
    columns: geo_data
    idxname: test_gist_idx

# Note: for the example below pg_trgm extension must be installed for gin_trgm_ops
- name: Create gin index gin0_idx not concurrently on column comment of table test
  postgresql_idx:
    idxname: gin0_idx
    table: test
    columns: comment gin_trgm_ops
    concurrent: no
    idxtype: gin

- name: Drop btree test_idx concurrently
  postgresql_idx:
    db: mydb
    idxname: test_idx
    state: absent

- name: Drop test_idx cascade
  postgresql_idx:
    db: mydb
    idxname: test_idx
    state: absent
    cascade: yes
    concurrent: no

- name: Create btree index test_idx concurrently on columns id,comment where column id > 1
  postgresql_idx:
    db: mydb
    table: test
    columns: id,comment
    idxname: test_idx
    cond: id > 1


RETURN VALUES:

name:
  description: Index name.
  returned: always
  type: str
  sample: 'foo_idx'
state:
  description: Index state.
  returned: always
  type: str
  sample: 'present'
schema:
  description: Schema where index exists.
  returned: always
  type: str
  sample: 'public'
tablespace:
  description: Tablespace where index exists.
  returned: always
  type: str
  sample: 'ssd'
query:
  description: Query that was tried to be executed.
  returned: always
  type: str
  sample: 'CREATE INDEX CONCURRENTLY foo_idx ON test_table USING BTREE (id)'
storage_params:
  description: Index storage parameters.
  returned: always
  type: list
  sample: [ "fillfactor=90" ]
valid:
  description: Index validity.
  returned: always
  type: bool
  sample: true

