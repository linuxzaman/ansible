> INI_FILE    (/usr/lib/python2.7/dist-packages/ansible/modules/files/ini_file.py)

        Manage (add, remove, change) individual settings in an INI-style file without having to manage the file as a whole with, say,
        [template] or [assemble]. Adds missing sections if they don't exist. Before Ansible 2.0, comments are discarded when the source
        file is read, and therefore will not show up in the destination file. Since Ansible 2.3, this module adds missing ending newlines
        to files to keep in line with the POSIX standard, even when no other modifications need to be applied.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- allow_no_value
        Allow option without value and without '=' symbol.
        [Default: False]
        type: bool
        version_added: 2.6

- attributes
        The attributes the resulting file or directory should have.
        To get supported flags look at the man page for `chattr' on the target system.
        This string should contain the attributes in the same order as the one displayed by `lsattr'.
        The `=' operator is assumed as default, otherwise `+' or `-' operators need to be included in the string.
        (Aliases: attr)[Default: (null)]
        type: str
        version_added: 2.3

- backup
        Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it
        incorrectly.
        [Default: False]
        type: bool

- create
        If set to `no', the module will fail if the file does not already exist.
        By default it will create the file if it is missing.
        [Default: True]
        type: bool
        version_added: 2.2

- group
        Name of the group that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

- mode
        The permissions the resulting file or directory should have.
        For those used to `/usr/bin/chmod' remember that modes are actually octal numbers. You must either add a leading zero so that
        Ansible's YAML parser knows it is an octal number (like `0644' or `01777') or quote it (like `'644'' or `'1777'') so Ansible
        receives a string and can do its own conversion from string into number.
        Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected
        results.
        As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
        As of Ansible 2.6, the mode may also be the special string `preserve'.
        When set to `preserve' the file will be given the same permissions as the source file.
        [Default: (null)]
        type: str

- no_extra_spaces
        Do not insert spaces before and after '=' symbol.
        [Default: False]
        type: bool
        version_added: 2.1

- option
        If set (required for changing a `value'), this is the name of the option.
        May be omitted if adding/removing a whole `section'.
        [Default: (null)]
        type: str

- others
        All arguments accepted by the [file] module also work here.
        [Default: (null)]
        type: str

- owner
        Name of the user that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

= path
        Path to the INI-style file; this file is created if required.
        Before Ansible 2.3 this option was only usable as `dest'.
        (Aliases: dest)
        type: path

= section
        Section name in INI file. This is added if `state=present' automatically when a single value is being set.
        If left empty or set to `null', the `option' will be placed before the first `section'.
        Using `null' is also required if the config format does not support sections.

        type: str

- selevel
        The level part of the SELinux file context.
        This is the MLS/MCS attribute, sometimes known as the `range'.
        When set to `_default', it will use the `level' portion of the policy if available.
        [Default: s0]
        type: str

- serole
        The role part of the SELinux file context.
        When set to `_default', it will use the `role' portion of the policy if available.
        [Default: (null)]
        type: str

- setype
        The type part of the SELinux file context.
        When set to `_default', it will use the `type' portion of the policy if available.
        [Default: (null)]
        type: str

- seuser
        The user part of the SELinux file context.
        By default it uses the `system' policy, where applicable.
        When set to `_default', it will use the `user' portion of the policy if available.
        [Default: (null)]
        type: str

- state
        If set to `absent' the option or section will be removed if present instead of created.
        (Choices: absent, present)[Default: present]
        type: str

- unsafe_writes
        Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.
        By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but
        sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be
        updated atomically from inside the container and can only be written in an unsafe manner.
        This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't
        force Ansible to perform unsafe writes).
        IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
        [Default: False]
        type: bool
        version_added: 2.2

- value
        The string value to be associated with an `option'.
        May be omitted when removing an `option'.
        [Default: (null)]
        type: str


NOTES:
      * While it is possible to add an `option' without specifying a `value', this makes no sense.
      * As of Ansible 2.3, the `dest' option has been changed to `path' as default, but `dest' still works as well.


AUTHOR: Jan-Piet Mens (@jpmens), Ales Nosek (@noseka1)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Before Ansible 2.3, option 'dest' was used instead of 'path'
- name: Ensure "fav=lemonade is in section "[drinks]" in specified file
  ini_file:
    path: /etc/conf
    section: drinks
    option: fav
    value: lemonade
    mode: '0600'
    backup: yes

- name: Ensure "temperature=cold is in section "[drinks]" in specified file
  ini_file:
    path: /etc/anotherconf
    section: drinks
    option: temperature
    value: cold
    backup: yes


