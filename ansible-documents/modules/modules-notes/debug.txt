> DEBUG    (/usr/lib/python2.7/dist-packages/ansible/modules/utilities/logic/debug.py)

        This module prints statements during execution and can be useful for debugging variables or expressions without necessarily
        halting the playbook. Useful for debugging together with the 'when:' directive. This module is also supported for Windows
        targets.

  * This module is maintained by The Ansible Core Team
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- msg
        The customized message that is printed. If omitted, prints a generic message.
        [Default: Hello world!]
        type: str

- var
        A variable name to debug.
        Mutually exclusive with the `msg' option.
        Be aware that this option already runs in Jinja2 context and has an implicit `{{ }}' wrapping, so you should not be using Jinja2
        delimiters unless you are looking for double interpolation.
        [Default: (null)]
        type: str

- verbosity
        A number that controls when the debug is run, if you set to 3 it will only run debug when -vvv or above
        [Default: 0]
        type: int
        version_added: 2.1


NOTES:
      * This module is also supported for Windows targets.


SEE ALSO:
      * Module assert
           The official documentation on the assert module.
           https://docs.ansible.com/ansible/latest/modules/assert_module.html
      * Module fail
           The official documentation on the fail module.
           https://docs.ansible.com/ansible/latest/modules/fail_module.html


AUTHOR: Dag Wieers (@dagwieers), Michael DeHaan
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:

# Example that prints the loopback address and gateway for each host
- debug:
    msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}

- debug:
    msg: System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}
  when: ansible_default_ipv4.gateway is defined

# Example that prints return information from the previous task
- shell: /usr/bin/uptime
  register: result

- debug:
    var: result
    verbosity: 2

- name: Display all variables/facts known for a host
  debug:
    var: hostvars[inventory_hostname]
    verbosity: 4

# Example that prints two lines of messages, but only if there is an environment value set
- debug:
    msg:
    - "Provisioning based on YOUR_KEY which is: {{ lookup('env', 'YOUR_KEY') }}"
    - "These servers were built using the password of '{{ password_used }}'. Please retain this for later use."


