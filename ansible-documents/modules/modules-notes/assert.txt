> ASSERT    (/usr/lib/python2.7/dist-packages/ansible/modules/utilities/logic/assert.py)

        This module asserts that given expressions are true with an optional custom message. This module is also supported for Windows
        targets.

  * This module is maintained by The Ansible Core Team
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- fail_msg
        The customized message used for a failing assertion.
        This argument was called 'msg' before Ansible 2.7, now it is renamed to 'fail_msg' with alias 'msg'.
        (Aliases: msg)[Default: (null)]
        type: str
        version_added: 2.7

- quiet
        Set this to `yes' to avoid verbose output.
        [Default: False]
        type: bool
        version_added: 2.8

- success_msg
        The customized message used for a successful assertion.
        [Default: (null)]
        type: str
        version_added: 2.7

= that
        A list of string expressions of the same form that can be passed to the 'when' statement.

        type: list


NOTES:
      * This module is also supported for Windows targets.


SEE ALSO:
      * Module debug
           The official documentation on the debug module.
           https://docs.ansible.com/ansible/latest/modules/debug_module.html
      * Module fail
           The official documentation on the fail module.
           https://docs.ansible.com/ansible/latest/modules/fail_module.html
      * Module meta
           The official documentation on the meta module.
           https://docs.ansible.com/ansible/latest/modules/meta_module.html


AUTHOR: Ansible Core Team, Michael DeHaan
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:

- assert: { that: "ansible_os_family != 'RedHat'" }

- assert:
    that:
      - "'foo' in some_command_result.stdout"
      - number_of_the_counting == 3

- name: After version 2.7 both 'msg' and 'fail_msg' can customize failing assertion message
  assert:
    that:
      - my_param <= 100
      - my_param >= 0
    fail_msg: "'my_param' must be between 0 and 100"
    success_msg: "'my_param' is between 0 and 100"

- name: Please use 'msg' when ansible version is smaller than 2.7
  assert:
    that:
      - my_param <= 100
      - my_param >= 0
    msg: "'my_param' must be between 0 and 100"

- name: use quiet to avoid verbose output
  assert:
    that:
      - my_param <= 100
      - my_param >= 0
    quiet: true


