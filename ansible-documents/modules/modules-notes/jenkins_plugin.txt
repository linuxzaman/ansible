> JENKINS_PLUGIN    (/usr/lib/python2.7/dist-packages/ansible/modules/web_infrastructure/jenkins_plugin.py)

        Ansible module which helps to manage Jenkins plugins.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- client_cert
        PEM formatted certificate chain file to be used for SSL client authentication.
        This file can also include the key as well, and if the key is included, `client_key' is not required.
        [Default: (null)]
        type: path

- client_key
        PEM formatted file that contains your private key to be used for SSL client authentication.
        If `client_cert' contains both the certificate and key, this option is not required.
        [Default: (null)]
        type: path

- force
        If `yes' do not get a cached copy.
        (Aliases: thirsty)[Default: False]
        type: bool

- force_basic_auth
        Credentials specified with `url_username' and `url_password' should be passed in HTTP Header.
        [Default: False]
        type: bool

- group
        Name of the Jenkins group on the OS.
        [Default: jenkins]

- http_agent
        Header to identify as, generally appears in web server logs.
        [Default: ansible-httpget]
        type: str

- jenkins_home
        Home directory of the Jenkins user.
        [Default: /var/lib/jenkins]

- mode
        File mode applied on versioned plugins.
        [Default: 0644]

= name
        Plugin name.


- owner
        Name of the Jenkins user on the OS.
        [Default: jenkins]

- state
        Desired plugin state.
        If the `latest' is set, the check for new version will be performed every time. This is suitable to keep the plugin up-to-date.
        (Choices: absent, present, pinned, unpinned, enabled, disabled, latest)[Default: present]

- timeout
        Server connection timeout in secs.
        [Default: 30]

- updates_expiration
        Number of seconds after which a new copy of the `update-center.json' file is downloaded. This is used to avoid the need to
        download the plugin to calculate its checksum when `latest' is specified.
        Set it to `0' if no cache file should be used. In that case, the plugin file will always be downloaded to calculate its checksum
        when `latest' is specified.
        [Default: 86400]

- updates_url
        URL of the Update Centre.
        Used as the base URL to download the plugins and the `update-center.json' JSON file.
        [Default: https://updates.jenkins.io]

- url
        URL of the Jenkins server.
        [Default: http://localhost:8080]
        type: str

- url_password
        The password for use in HTTP basic authentication.
        If the `url_username' parameter is not specified, the `url_password' parameter will not be used.
        [Default: (null)]
        type: str

- url_username
        The username for use in HTTP basic authentication.
        This parameter can be used without `url_password' for sites that allow empty passwords
        [Default: (null)]
        type: str

- use_proxy
        If `no', it will not use a proxy, even if one is defined in an environment variable on the target hosts.
        [Default: True]
        type: bool

- validate_certs
        If `no', SSL certificates will not be validated.
        This should only be used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool

- version
        Plugin version number.
        If this option is specified, all plugin dependencies must be installed manually.
        It might take longer to verify that the correct version is installed. This is especially true if a specific version number is
        specified.
        Quote the version to prevent the value to be interpreted as float. For example if `1.20' would be unquoted, it would become
        `1.2'.
        [Default: (null)]

- with_dependencies
        Defines whether to install plugin dependencies.
        This option takes effect only if the `version' is not defined.
        [Default: True]
        type: bool


NOTES:
      * Plugin installation should be run under root or the same user which owns the plugin files on the disk. Only if the plugin
        is not installed yet and no version is specified, the API installation is performed which requires only the Web UI
        credentials.
      * It's necessary to notify the handler or call the `service' module to restart the Jenkins service after a new plugin was
        installed.
      * Pinning works only if the plugin is installed and Jenkis service was successfully restarted after the plugin installation.
      * It is not possible to run the module remotely by changing the `url' parameter to point to the Jenkins server. The module
        must be used on the host where Jenkins runs as it needs direct access to the plugin files.
      * The `params' option was removed in Ansible 2.5 due to circumventing Ansible's option handling


AUTHOR: Jiri Tyr (@jtyr)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Install plugin
  jenkins_plugin:
    name: build-pipeline-plugin

- name: Install plugin without its dependencies
  jenkins_plugin:
    name: build-pipeline-plugin
    with_dependencies: no

- name: Make sure the plugin is always up-to-date
  jenkins_plugin:
    name: token-macro
    state: latest

- name: Install specific version of the plugin
  jenkins_plugin:
    name: token-macro
    version: "1.15"

- name: Pin the plugin
  jenkins_plugin:
    name: token-macro
    state: pinned

- name: Unpin the plugin
  jenkins_plugin:
    name: token-macro
    state: unpinned

- name: Enable the plugin
  jenkins_plugin:
    name: token-macro
    state: enabled

- name: Disable the plugin
  jenkins_plugin:
    name: token-macro
    state: disabled

- name: Uninstall plugin
  jenkins_plugin:
    name: build-pipeline-plugin
    state: absent

#
# Example of how to authenticate
#
- name: Install plugin
  jenkins_plugin:
    name: build-pipeline-plugin
    url_username: admin
    url_password: p4ssw0rd
    url: http://localhost:8888

#
# Example of a Play which handles Jenkins restarts during the state changes
#
- name: Jenkins Master play
  hosts: jenkins-master
  vars:
    my_jenkins_plugins:
      token-macro:
        enabled: yes
      build-pipeline-plugin:
        version: "1.4.9"
        pinned: no
        enabled: yes
  tasks:
    - name: Install plugins without a specific version
      jenkins_plugin:
        name: "{{ item.key }}"
      register: my_jenkins_plugin_unversioned
      when: >
        'version' not in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - name: Install plugins with a specific version
      jenkins_plugin:
        name: "{{ item.key }}"
        version: "{{ item.value['version'] }}"
      register: my_jenkins_plugin_versioned
      when: >
        'version' in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - name: Initiate the fact
      set_fact:
        jenkins_restart_required: no

    - name: Check if restart is required by any of the versioned plugins
      set_fact:
        jenkins_restart_required: yes
      when: item.changed
      with_items: "{{ my_jenkins_plugin_versioned.results }}"

    - name: Check if restart is required by any of the unversioned plugins
      set_fact:
        jenkins_restart_required: yes
      when: item.changed
      with_items: "{{ my_jenkins_plugin_unversioned.results }}"

    - name: Restart Jenkins if required
      service:
        name: jenkins
        state: restarted
      when: jenkins_restart_required

    - name: Wait for Jenkins to start up
      uri:
        url: http://localhost:8080
        status_code: 200
        timeout: 5
      register: jenkins_service_status
      # Keep trying for 5 mins in 5 sec intervals
      retries: 60
      delay: 5
      until: >
         'status' in jenkins_service_status and
         jenkins_service_status['status'] == 200
      when: jenkins_restart_required

    - name: Reset the fact
      set_fact:
        jenkins_restart_required: no
      when: jenkins_restart_required

    - name: Plugin pinning
      jenkins_plugin:
        name: "{{ item.key }}"
        state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
      when: >
        'pinned' in item.value
      with_dict: "{{ my_jenkins_plugins }}"

    - name: Plugin enabling
      jenkins_plugin:
        name: "{{ item.key }}"
        state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
      when: >
        'enabled' in item.value
      with_dict: "{{ my_jenkins_plugins }}"


RETURN VALUES:

plugin:
    description: plugin name
    returned: success
    type: str
    sample: build-pipeline-plugin
state:
    description: state of the target, after execution
    returned: success
    type: str
    sample: "present"

