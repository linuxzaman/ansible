> INCLUDE_ROLE    (/usr/lib/python2.7/dist-packages/ansible/modules/utilities/logic/include_role.py)

        Dynamically loads and executes a specified role as a task. May be used only where Ansible tasks are allowed - inside `pre_tasks',
        `tasks', or `post_tasks' playbook objects, or as a task inside a role. Task-level keywords, loops, and conditionals apply only to
        the `include_role' statement itself. To apply keywords to the tasks within the role, pass them using the `apply' option or use
        [import_role] instead. Ignores some keywords, like `until' and `retries'. This module is also supported for Windows targets.

  * This module is maintained by The Ansible Core Team
OPTIONS (= is mandatory):

- allow_duplicates
        Overrides the role's metadata setting to allow using a role more than once with the same parameters.
        [Default: True]
        type: bool

- apply
        Accepts a hash of task keywords (e.g. `tags', `become') that will be applied to all tasks within the included role.
        [Default: (null)]
        version_added: 2.7

- defaults_from
        File to load from a role's `defaults/' directory.
        [Default: main]
        type: str

- handlers_from
        File to load from a role's `handlers/' directory.
        [Default: main]
        type: str
        version_added: 2.8

= name
        The name of the role to be executed.

        type: str

- public
        This option dictates whether the role's `vars' and `defaults' are exposed to the playbook. If set to `yes' the variables will be
        available to tasks following the `include_role' task. This functionality differs from standard variable exposure for roles listed
        under the `roles' header or `import_role' as they are exposed at playbook parsing time, and available to earlier roles and tasks
        as well.
        [Default: False]
        type: bool
        version_added: 2.7

- tasks_from
        File to load from a role's `tasks/' directory.
        [Default: main]
        type: str

- vars_from
        File to load from a role's `vars/' directory.
        [Default: main]
        type: str


NOTES:
      * Handlers are made available to the whole play.
      * Before Ansible 2.4, as with `include', this task could be static or dynamic, If static, it implied that it won't need
        templating, loops or conditionals and will show included tasks in the `--list' options. Ansible would try to autodetect
        what is needed, but you can set `static' to `yes' or `no' at task level to control this.
      * After Ansible 2.4, you can use [import_role] for `static' behaviour and this action for `dynamic' one.


SEE ALSO:
      * Module import_playbook
           The official documentation on the import_playbook module.
           https://docs.ansible.com/ansible/latest/modules/import_playbook_module.html
      * Module import_role
           The official documentation on the import_role module.
           https://docs.ansible.com/ansible/latest/modules/import_role_module.html
      * Module import_tasks
           The official documentation on the import_tasks module.
           https://docs.ansible.com/ansible/latest/modules/import_tasks_module.html
      * Module include_tasks
           The official documentation on the include_tasks module.
           https://docs.ansible.com/ansible/latest/modules/include_tasks_module.html
      * Ansible documentation [playbooks_reuse_includes]
           More information related to including and importing playbooks, roles and tasks.
           https://docs.ansible.com/ansible/latest/#stq=playbooks_reuse_includes&stp=1


AUTHOR: Ansible Core Team (@ansible)
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:

- include_role:
    name: myrole

- name: Run tasks/other.yaml instead of 'main'
  include_role:
    name: myrole
    tasks_from: other

- name: Pass variables to role
  include_role:
    name: myrole
  vars:
    rolevar1: value from task

- name: Use role in loop
  include_role:
    name: '{{ roleinputvar }}'
  loop:
    - '{{ roleinput1 }}'
    - '{{ roleinput2 }}'
  loop_control:
    loop_var: roleinputvar

- name: Conditional role
  include_role:
    name: myrole
  when: not idontwanttorun

- name: Apply tags to tasks within included file
  include_role:
    name: install
    apply:
      tags:
        - install
  tags:
    - always


RETURN VALUES:

# This module does not return anything except tasks to execute.

