> BIGIQ_REGKEY_LICENSE_ASSIGNMENT    (/usr/lib/python2.7/dist-packages/ansible/modules/network/f5/bigiq_regkey_license_assignment.py)

        Manages the assignment of regkey licenses on a BIG-IQ. Assignment means that the license is assigned to a BIG-IP, or, it needs to
        be assigned to a BIG-IP. Additionally, this module supported revoking the assignments from BIG-IP devices.

  * This module is maintained by an Ansible Partner
OPTIONS (= is mandatory):

- device
        When `managed' is `no', specifies the address, or hostname, where the BIG-IQ can reach the remote device to register.
        When `managed' is `yes', specifies the managed device, or device UUID, that you want to register.
        If `managed' is `yes', it is very important that you do not have more than one device with the same name. BIG-IQ internally
        recognizes devices by their ID, and therefore, this module's cannot guarantee that the correct device will be registered. The
        device returned is the device that will be used.
        [Default: (null)]
        type: str

- device_password
        The password of the `device_username'.
        When `managed' is `no', this parameter is required.
        [Default: (null)]
        type: str

- device_port
        Specifies the port of the remote device to connect to.
        If this parameter is not specified, the default of `443' will be used.
        [Default: 443]
        type: int

- device_username
        The username used to connect to the remote device.
        This username should be one that has sufficient privileges on the remote device to do licensing. Usually this is the
        `Administrator' role.
        When `managed' is `no', this parameter is required.
        [Default: (null)]
        type: str

= key
        The registration key that you want to assign from the pool.

        type: str

- managed
        Whether the specified device is a managed or un-managed device.
        When `state' is `present', this parameter is required.
        [Default: (null)]
        type: bool

= password
        The password for the user account used to connect to the BIG-IP.
        You may omit this option by setting the environment variable `F5_PASSWORD'.
        (Aliases: pass, pwd)
        type: str

= pool
        The registration key pool to use.

        type: str

- provider
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          password:
            aliases:
            - pass
            - pwd
            description:
            - The password for the user account used to connect to the BIG-IP.
            - You may omit this option by setting the environment variable `F5_PASSWORD'.
            required: true
            type: str
          server:
            description:
            - The BIG-IP host.
            - You may omit this option by setting the environment variable `F5_SERVER'.
            required: true
            type: str
          server_port:
            default: 443
            description:
            - The BIG-IP server port.
            - You may omit this option by setting the environment variable `F5_SERVER_PORT'.
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH keyfile to use to authenticate the connection to the remote
              device.  This argument is only used for `cli' transports.
            - You may omit this option by setting the environment variable `ANSIBLE_NET_SSH_KEYFILE'.
            type: path
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error.
            type: int
          transport:
            choices:
            - cli
            - rest
            default: rest
            description:
            - Configures the transport connection to use when connecting to the remote device.
            type: str
          user:
            description:
            - The username to connect to the BIG-IP with. This user must have administrative
              privileges on the device.
            - You may omit this option by setting the environment variable `F5_USER'.
            required: true
            type: str
          validate_certs:
            default: true
            description:
            - If `no', SSL certificates are not validated. Use this only on personally controlled
              sites using self-signed certificates.
            - You may omit this option by setting the environment variable `F5_VALIDATE_CERTS'.
            type: bool
        
        type: dict
        version_added: 2.5

= server
        The BIG-IP host.
        You may omit this option by setting the environment variable `F5_SERVER'.

        type: str

- server_port
        The BIG-IP server port.
        You may omit this option by setting the environment variable `F5_SERVER_PORT'.
        [Default: 443]
        type: int
        version_added: 2.2

- state
        When `present', ensures that the device is assigned the specified license.
        When `absent', ensures the license is revokes from the remote device and freed on the BIG-IQ.
        (Choices: present, absent)[Default: present]
        type: str

= user
        The username to connect to the BIG-IP with. This user must have administrative privileges on the device.
        You may omit this option by setting the environment variable `F5_USER'.

        type: str

- validate_certs
        If `no', SSL certificates are not validated. Use this only on personally controlled sites using self-signed certificates.
        You may omit this option by setting the environment variable `F5_VALIDATE_CERTS'.
        [Default: True]
        type: bool
        version_added: 2.0


NOTES:
      * For more information on using Ansible to manage F5 Networks devices see https://www.ansible.com/integrations/networks/f5.
      * Requires BIG-IP software version >= 12.
      * The F5 modules only manipulate the running configuration of the F5 product. To ensure that BIG-IP specific configuration
        persists to disk, be sure to include at least one task that uses the [bigip_config] module to save the running
        configuration. Refer to the module's documentation for the correct usage of the module to save your running configuration.


AUTHOR: Tim Rupp (@caphrim007)
        METADATA:
          status:
          - preview
          supported_by: certified
        

EXAMPLES:

- name: Register an unmanaged device
  bigiq_regkey_license_assignment:
    pool: my-regkey-pool
    key: XXXX-XXXX-XXXX-XXXX-XXXX
    device: 1.1.1.1
    managed: no
    device_username: admin
    device_password: secret
    state: present
    provider:
      user: admin
      password: secret
      server: lb.mydomain.com
  delegate_to: localhost

- name: Register a managed device, by name
  bigiq_regkey_license_assignment:
    pool: my-regkey-pool
    key: XXXX-XXXX-XXXX-XXXX-XXXX
    device: bigi1.foo.com
    managed: yes
    state: present
    provider:
      user: admin
      password: secret
      server: lb.mydomain.com
  delegate_to: localhost

- name: Register a managed device, by UUID
  bigiq_regkey_license_assignment:
    pool: my-regkey-pool
    key: XXXX-XXXX-XXXX-XXXX-XXXX
    device: 7141a063-7cf8-423f-9829-9d40599fa3e0
    managed: yes
    state: present
    provider:
      user: admin
      password: secret
      server: lb.mydomain.com
  delegate_to: localhost


RETURN VALUES:

# only common fields returned

