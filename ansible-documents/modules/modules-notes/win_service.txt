> WIN_SERVICE    (/usr/lib/python2.7/dist-packages/ansible/modules/windows/win_service.py)

        Manage and query Windows services. For non-Windows targets, use the [service] module instead.

  * This module is maintained by The Ansible Core Team
OPTIONS (= is mandatory):

- dependencies
        A list of service dependencies to set for this particular service.
        This should be a list of service names and not the display name of the service.
        This works by `dependency_action' to either add/remove or set the services in this list.
        [Default: (null)]
        type: list
        version_added: 2.3

- dependency_action
        Used in conjunction with `dependency' to either add the dependencies to the existing service dependencies.
        Remove the dependencies to the existing dependencies.
        Set the dependencies to only the values in the list replacing the existing dependencies.
        (Choices: add, remove, set)[Default: set]
        type: str
        version_added: 2.3

- description
        The description to set for the service.
        [Default: (null)]
        type: str
        version_added: 2.3

- desktop_interact
        Whether to allow the service user to interact with the desktop.
        This should only be set to `yes' when using the `LocalSystem' username.
        [Default: False]
        type: bool
        version_added: 2.3

- display_name
        The display name to set for the service.
        [Default: (null)]
        type: str
        version_added: 2.3

- force_dependent_services
        If `yes', stopping or restarting a service with dependent services will force the dependent services to stop or restart also.
        If `no', stopping or restarting a service with dependent services may fail.
        [Default: False]
        type: bool
        version_added: 2.3

= name
        Name of the service.
        If only the name parameter is specified, the module will report on whether the service exists or not without making any changes.

        type: str

- password
        The password to set the service to start as.
        This and the `username' argument must be supplied together.
        If specifying `LocalSystem', `NetworkService' or `LocalService' this field must be an empty string and not null.
        [Default: (null)]
        type: str
        version_added: 2.3

- path
        The path to the executable to set for the service.
        [Default: (null)]
        type: str
        version_added: 2.3

- start_mode
        Set the startup type for the service.
        A newly created service will default to `auto'.
        `delayed' added in Ansible 2.3
        (Choices: auto, delayed, disabled, manual)[Default: (null)]
        type: str

- state
        The desired state of the service.
        `started'/`stopped'/`absent'/`paused' are idempotent actions that will not run commands unless necessary.
        `restarted' will always bounce the service.
        `absent' was added in Ansible 2.3
        `paused' was added in Ansible 2.4
        Only services that support the paused state can be paused, you can check the return value `can_pause_and_continue'.
        You can only pause a service that is already started.
        A newly created service will default to `stopped'.
        (Choices: absent, paused, started, stopped, restarted)[Default: (null)]
        type: str

- username
        The username to set the service to start as.
        This and the `password' argument must be supplied together when using a local or domain account.
        Set to `LocalSystem' to use the SYSTEM account.
        A newly created service will default to `LocalSystem'.
        [Default: (null)]
        type: str
        version_added: 2.3


SEE ALSO:
      * Module service
           The official documentation on the service module.
           https://docs.ansible.com/ansible/latest/modules/service_module.html
      * Module win_nssm
           The official documentation on the win_nssm module.
           https://docs.ansible.com/ansible/latest/modules/win_nssm_module.html


AUTHOR: Chris Hoffman (@chrishoffman)
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:

- name: Restart a service
  win_service:
    name: spooler
    state: restarted

- name: Set service startup mode to auto and ensure it is started
  win_service:
    name: spooler
    start_mode: auto
    state: started

- name: Pause a service
  win_service:
    name: Netlogon
    state: paused

- name: Ensure that WinRM is started when the system has settled
  win_service:
    name: WinRM
    start_mode: delayed

# A new service will also default to the following values:
# - username: LocalSystem
# - state: stopped
# - start_mode: auto
- name: Create a new service
  win_service:
    name: service name
    path: C:\temp\test.exe

- name: Create a new service with extra details
  win_service:
    name: service name
    path: C:\temp\test.exe
    display_name: Service Name
    description: A test service description

- name: Remove a service
  win_service:
    name: service name
    state: absent

- name: Check if a service is installed
  win_service:
    name: service name
  register: service_info

- name: Set the log on user to a domain account
  win_service:
    name: service name
    state: restarted
    username: DOMAIN\User
    password: Password

- name: Set the log on user to a local account
  win_service:
    name: service name
    state: restarted
    username: .\Administrator
    password: Password

- name: Set the log on user to Local System
  win_service:
    name: service name
    state: restarted
    username: LocalSystem
    password: ''

- name: Set the log on user to Local System and allow it to interact with the desktop
  win_service:
    name: service name
    state: restarted
    username: LocalSystem
    password: ""
    desktop_interact: yes

- name: Set the log on user to Network Service
  win_service:
    name: service name
    state: restarted
    username: NT AUTHORITY\NetworkService
    password: ''

- name: Set the log on user to Local Service
  win_service:
    name: service name
    state: restarted
    username: NT AUTHORITY\LocalService
    password: ''

- name: Set dependencies to ones only in the list
  win_service:
    name: service name
    dependencies: [ service1, service2 ]

- name: Add dependencies to existing dependencies
  win_service:
    name: service name
    dependencies: [ service1, service2 ]
    dependency_action: add

- name: Remove dependencies from existing dependencies
  win_service:
    name: service name
    dependencies:
    - service1
    - service2
    dependency_action: remove


RETURN VALUES:

exists:
    description: Whether the service exists or not.
    returned: success
    type: bool
    sample: true
name:
    description: The service name or id of the service.
    returned: success and service exists
    type: str
    sample: CoreMessagingRegistrar
display_name:
    description: The display name of the installed service.
    returned: success and service exists
    type: str
    sample: CoreMessaging
state:
    description: The current running status of the service.
    returned: success and service exists
    type: str
    sample: stopped
start_mode:
    description: The startup type of the service.
    returned: success and service exists
    type: str
    sample: manual
path:
    description: The path to the service executable.
    returned: success and service exists
    type: str
    sample: C:\Windows\system32\svchost.exe -k LocalServiceNoNetwork
can_pause_and_continue:
    description: Whether the service can be paused and unpaused.
    returned: success and service exists
    type: bool
    sample: true
description:
    description: The description of the service.
    returned: success and service exists
    type: str
    sample: Manages communication between system components.
username:
    description: The username that runs the service.
    returned: success and service exists
    type: str
    sample: LocalSystem
desktop_interact:
    description: Whether the current user is allowed to interact with the desktop.
    returned: success and service exists
    type: bool
    sample: false
dependencies:
    description: A list of services that is depended by this service.
    returned: success and service exists
    type: list
    sample: false
depended_by:
    description: A list of services that depend on this service.
    returned: success and service exists
    type: list
    sample: false

