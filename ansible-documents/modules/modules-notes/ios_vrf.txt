> IOS_VRF    (/usr/lib/python2.7/dist-packages/ansible/modules/network/ios/ios_vrf.py)

        This module provides declarative management of VRF definitions on Cisco IOS devices.  It allows playbooks to manage individual or
        the entire VRF collection.  It also supports purging VRF definitions from the configuration that are not explicitly defined.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

- associated_interfaces
        This is a intent option and checks the operational state of the for given vrf `name' for associated interfaces. If the value in
        the `associated_interfaces' does not match with the operational state of vrf interfaces on device it will result in failure.
        [Default: (null)]
        version_added: 2.5

- auth_pass
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli' and `become: yes' with `become_pass'.
        For more information please see the L(IOS Platform Options guide, ../network/user_guide/platform_ios.html).
        HORIZONTALLINE
        Specifies the password to use if required to enter privileged mode on the remote device.  If `authorize' is false, then this
        argument does nothing. If the value is not specified in the task, the value of environment variable `ANSIBLE_NET_AUTH_PASS' will
        be used instead.
        [Default: (null)]
        type: str

- authorize
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli' and `become: yes'.
        For more information please see the L(IOS Platform Options guide, ../network/user_guide/platform_ios.html).
        HORIZONTALLINE
        Instructs the module to enter privileged mode on the remote device before sending any commands.  If not specified, the device
        will attempt to execute all commands in non-privileged mode. If the value is not specified in the task, the value of environment
        variable `ANSIBLE_NET_AUTHORIZE' will be used instead.
        [Default: False]
        type: bool

- delay
        Time in seconds to wait before checking for the operational state on remote device.
        [Default: 10]
        version_added: 2.4

- description
        Provides a short description of the VRF definition in the current active configuration.  The VRF definition value accepts
        alphanumeric characters used to provide additional information about the VRF.
        [Default: (null)]

- interfaces
        Identifies the set of interfaces that should be configured in the VRF.  Interfaces must be routed interfaces in order to be
        placed into a VRF.
        [Default: (null)]

- name
        The name of the VRF definition to be managed on the remote IOS device.  The VRF definition name is an ASCII string name used to
        uniquely identify the VRF.  This argument is mutually exclusive with the `vrfs' argument
        [Default: (null)]

- provider
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli'.
        For more information please see the L(IOS Platform Options guide, ../network/user_guide/platform_ios.html).
        HORIZONTALLINE
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          auth_pass:
            description:
            - Specifies the password to use if required to enter privileged mode on the remote
              device.  If `authorize' is false, then this argument does nothing. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_AUTH_PASS'
              will be used instead.
            type: str
          authorize:
            default: false
            description:
            - Instructs the module to enter privileged mode on the remote device before sending
              any commands.  If not specified, the device will attempt to execute all commands
              in non-privileged mode. If the value is not specified in the task, the value
              of environment variable `ANSIBLE_NET_AUTHORIZE' will be used instead.
            type: bool
          host:
            description:
            - Specifies the DNS host name or address for connecting to the remote device over
              the specified transport.  The value of host is used as the destination address
              for the transport.
            required: true
            type: str
          password:
            description:
            - Specifies the password to use to authenticate the connection to the remote device.   This
              value is used to authenticate the SSH session. If the value is not specified
              in the task, the value of environment variable `ANSIBLE_NET_PASSWORD' will
              be used instead.
            type: str
          port:
            default: 22
            description:
            - Specifies the port to use when building the connection to the remote device.
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH key to use to authenticate the connection to the remote device.   This
              value is the path to the key used to authenticate the SSH session. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_SSH_KEYFILE'
              will be used instead.
            type: path
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error.
            type: int
          username:
            description:
            - Configures the username to use to authenticate the connection to the remote
              device.  This value is used to authenticate the SSH session. If the value is
              not specified in the task, the value of environment variable `ANSIBLE_NET_USERNAME'
              will be used instead.
            type: str
        
        type: dict

- purge
        Instructs the module to consider the VRF definition absolute.  It will remove any previously configured VRFs on the device.
        [Default: False]
        type: bool

- rd
        The router-distinguisher value uniquely identifies the VRF to routing processes on the remote IOS system.  The RD value takes the
        form of `A:B' where `A' and `B' are both numeric values.
        [Default: (null)]

- route_both
        Adds an export and import list of extended route target communities to the VRF.
        [Default: (null)]
        version_added: 2.5

- route_both_ipv4
        Adds an export and import list of extended route target communities in address-family configuration submode to the VRF.
        [Default: (null)]
        version_added: 2.7

- route_both_ipv6
        Adds an export and import list of extended route target communities in address-family configuration submode to the VRF.
        [Default: (null)]
        version_added: 2.7

- route_export
        Adds an export list of extended route target communities to the VRF.
        [Default: (null)]
        version_added: 2.5

- route_export_ipv4
        Adds an export list of extended route target communities in address-family configuration submode to the VRF.
        [Default: (null)]
        version_added: 2.7

- route_export_ipv6
        Adds an export list of extended route target communities in address-family configuration submode to the VRF.
        [Default: (null)]
        version_added: 2.7

- route_import
        Adds an import list of extended route target communities to the VRF.
        [Default: (null)]
        version_added: 2.5

- route_import_ipv4
        Adds an import list of extended route target communities in address-family configuration submode to the VRF.
        [Default: (null)]
        version_added: 2.7

- route_import_ipv6
        Adds an import list of extended route target communities in address-family configuration submode to the VRF.
        [Default: (null)]
        version_added: 2.7

- state
        Configures the state of the VRF definition as it relates to the device operational configuration.  When set to `present', the VRF
        should be configured in the device active configuration and when set to `absent' the VRF should not be in the device active
        configuration
        (Choices: present, absent)[Default: present]

- vrfs
        The set of VRF definition objects to be configured on the remote IOS device.  Ths list entries can either be the VRF name or a
        hash of VRF definitions and attributes.  This argument is mutually exclusive with the `name' argument.
        [Default: (null)]


NOTES:
      * Tested against IOS 15.6
      * For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`
      * For more information on using Ansible to manage Cisco devices see the `Cisco integration page
        <https://www.ansible.com/integrations/networks/cisco>`_.


AUTHOR: Peter Sprygada (@privateip)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

- name: configure a vrf named management
  ios_vrf:
    name: management
    description: oob mgmt vrf
    interfaces:
      - Management1

- name: remove a vrf named test
  ios_vrf:
    name: test
    state: absent

- name: configure set of VRFs and purge any others
  ios_vrf:
    vrfs:
      - red
      - blue
      - green
    purge: yes

- name: Creates a list of import RTs for the VRF with the same parameters
  ios_vrf:
    name: test_import
    rd: 1:100
    route_import:
      - 1:100
      - 3:100

- name: Creates a list of import RTs in address-family configuration submode for the VRF with the same parameters
  ios_vrf:
    name: test_import_ipv4
    rd: 1:100
    route_import_ipv4:
      - 1:100
      - 3:100

- name: Creates a list of import RTs in address-family configuration submode for the VRF with the same parameters
  ios_vrf:
    name: test_import_ipv6
    rd: 1:100
    route_import_ipv6:
      - 1:100
      - 3:100

- name: Creates a list of export RTs for the VRF with the same parameters
  ios_vrf:
    name: test_export
    rd: 1:100
    route_export:
      - 1:100
      - 3:100

- name: Creates a list of export RTs in address-family configuration submode for the VRF with the same parameters
  ios_vrf:
    name: test_export_ipv4
    rd: 1:100
    route_export_ipv4:
      - 1:100
      - 3:100

- name: Creates a list of export RTs in address-family configuration submode for the VRF with the same parameters
  ios_vrf:
    name: test_export_ipv6
    rd: 1:100
    route_export_ipv6:
      - 1:100
      - 3:100

- name: Creates a list of import and export route targets for the VRF with the same parameters
  ios_vrf:
    name: test_both
    rd: 1:100
    route_both:
      - 1:100
      - 3:100

- name: Creates a list of import and export route targets in address-family configuration submode for the VRF with the same parameters
  ios_vrf:
    name: test_both_ipv4
    rd: 1:100
    route_both_ipv4:
      - 1:100
      - 3:100

- name: Creates a list of import and export route targets in address-family configuration submode for the VRF with the same parameters
  ios_vrf:
    name: test_both_ipv6
    rd: 1:100
    route_both_ipv6:
      - 1:100
      - 3:100


RETURN VALUES:

commands:
  description: The list of configuration mode commands to send to the device
  returned: always
  type: list
  sample:
    - vrf definition ansible
    - description management vrf
    - rd: 1:100
start:
  description: The time the job started
  returned: always
  type: str
  sample: "2016-11-16 10:38:15.126146"
end:
  description: The time the job ended
  returned: always
  type: str
  sample: "2016-11-16 10:38:25.595612"
delta:
  description: The time elapsed to perform all operations
  returned: always
  type: str
  sample: "0:00:10.469466"

