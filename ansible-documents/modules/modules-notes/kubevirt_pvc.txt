> KUBEVIRT_PVC    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/kubevirt/kubevirt_pvc.py)

        Use Openshift Python SDK to manage PVCs on Kubernetes Support Containerized Data Importer out of the box

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- access_modes
        Contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
        [Default: (null)]
        type: list

- annotations
        Annotations attached to this object.
        https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
        [Default: (null)]
        type: dict

- api_key
        Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.
        [Default: (null)]
        type: str

- ca_cert
        Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate
        validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.
        (Aliases: ssl_ca_cert)[Default: (null)]
        type: path

- cdi_source
        If data is to be copied onto the PVC using the Containerized Data Importer you can specify the source of the data (along with any
        additional configuration) as well as it's format.
        Valid source types are: blank, http, s3, registry, pvc and upload. The last one requires using the [kubevirt_cdi_upload] module
        to actually perform an upload.
        Source data format is specified using the optional `content_type'. Valid options are `kubevirt' (default; raw image) and
        `archive' (tar.gz).
        This uses the DataVolume source syntax: https://github.com/kubevirt/containerized-data-importer/blob/master/doc/datavolumes.md
        #https3registry-source
        [Default: (null)]
        type: dict

- client_cert
        Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.
        (Aliases: cert_file)[Default: (null)]
        type: path

- client_key
        Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.
        (Aliases: key_file)[Default: (null)]
        type: path

- context
        The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.
        [Default: (null)]
        type: str

- force
        If set to `True', and `state' is `present', an existing object will be replaced.
        [Default: False]
        type: bool

- host
        Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.
        [Default: (null)]
        type: str

- kubeconfig
        Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client
        will attempt to load the default configuration file from `~/.kube/config.json'. Can also be specified via K8S_AUTH_KUBECONFIG
        environment variable.
        [Default: (null)]
        type: path

- labels
        Labels attached to this object.
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        [Default: (null)]
        type: dict

- merge_type
        Whether to override the default patch merge approach with a specific type.
        This defaults to `['strategic-merge', 'merge']', which is ideal for using the same parameters on resource kinds that combine
        Custom Resources and built-in resources.
        See https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-
        update-a-deployment
        If more than one merge_type is given, the merge_types will be tried in order
        (Choices: json, merge, strategic-merge)[Default: (null)]
        type: list

= name
        Use to specify a PVC object name.

        type: str

= namespace
        Use to specify a PVC object namespace.

        type: str

- password
        Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.
        Please read the description of the `username' option for a discussion of when this option is applicable.
        [Default: (null)]
        type: str

- resource_definition
        A partial YAML definition of the PVC object being created/updated. Here you can define Kubernetes PVC Resource parameters not
        covered by this module's parameters.
        NOTE: `resource_definition' has lower priority than module parameters. If you try to define e.g. `metadata.namespace' here, that
        value will be ignored and `namespace' used instead.
        (Aliases: definition, inline)[Default: (null)]
        type: dict

- selector
        A label query over volumes to consider for binding.
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        [Default: (null)]
        type: dict

- size
        How much storage to allocate to the PVC.
        (Aliases: storage)[Default: (null)]
        type: str

- state
        Determines if an object should be created, patched, or deleted. When set to `present', an object will be created, if it does not
        already exist. If set to `absent', an existing object will be deleted. If set to `present', an existing object will be patched,
        if its attributes differ from those specified using module options and `resource_definition'.
        (Choices: present, absent)[Default: present]

- storage_class_name
        Name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        [Default: (null)]
        type: str

- username
        Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.
        Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of
        authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the `k8s_auth' module,
        as that might do what you need.
        [Default: (null)]
        type: str

- validate_certs
        Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.
        (Aliases: verify_ssl)[Default: (null)]
        type: bool

- volume_mode
        This defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This
        is an alpha feature of kubernetes and may change in the future.
        [Default: (null)]
        type: str

- volume_name
        This is the binding reference to the PersistentVolume backing this claim.
        [Default: (null)]
        type: str

- wait
        If set, this module will wait for the PVC to become bound and CDI (if enabled) to finish its operation before returning.
        Used only if `state' set to `present'.
        Unless used in conjuction with `cdi_source', this might result in a timeout, as clusters may be configured to not bind PVCs until
        first usage.
        [Default: False]
        type: bool

- wait_timeout
        Specifies how much time in seconds to wait for PVC creation to complete if `wait' option is enabled.
        Default value is reasonably high due to an expectation that CDI might take a while to finish its operation.
        [Default: 300]
        type: int


NOTES:
      * The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on
        both platforms. For API version details and additional information visit https://github.com/openshift/openshift-restclient-
        python
      * To avoid SSL certificate validation errors when `validate_certs' is `True', the full certificate chain for the API server
        must be provided via `ca_cert' or in the kubeconfig file.


REQUIREMENTS:  python >= 2.7, openshift >= 0.8.2

AUTHOR: KubeVirt Team (@kubevirt)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a PVC and import data from an external source
  kubevirt_pvc:
    name: pvc1
    namespace: default
    size: 100Mi
    access_modes:
      - ReadWriteOnce
    cdi_source:
      http:
        url: https://www.source.example/path/of/data/vm.img
      # If the URL points to a tar.gz containing the disk image, ucomment the line below:
      #content_type: archive

- name: Create a PVC as a clone from a different PVC
  kubevirt_pvc:
    name: pvc2
    namespace: default
    size: 100Mi
    access_modes:
      - ReadWriteOnce
    cdi_source:
      pvc:
        namespace: source-ns
        name: source-pvc

- name: Create a PVC ready for data upload
  kubevirt_pvc:
    name: pvc3
    namespace: default
    size: 100Mi
    access_modes:
      - ReadWriteOnce
    cdi_source:
      upload: yes
    # You need the kubevirt_cdi_upload module to actually upload something

- name: Create a PVC with a blank raw image
  kubevirt_pvc:
    name: pvc4
    namespace: default
    size: 100Mi
    access_modes:
      - ReadWriteOnce
    cdi_source:
      blank: yes

- name: Create a PVC and fill it with data from a container
  kubevirt_pvc:
    name: pvc5
    namespace: default
    size: 100Mi
    access_modes:
      - ReadWriteOnce
    cdi_source:
      registry:
        url: "docker://kubevirt/fedora-cloud-registry-disk-demo"


RETURN VALUES:

result:
  description:
  - The created, patched, or otherwise present object. Will be empty in the case of a deletion.
  returned: success
  type: complex
  contains:
     api_version:
       description: The versioned schema of this representation of an object.
       returned: success
       type: str
     kind:
       description: Represents the REST resource this object represents.
       returned: success
       type: str
     metadata:
       description: Standard object metadata. Includes name, namespace, annotations, labels, etc.
       returned: success
       type: complex
     spec:
       description: Specific attributes of the object. Will vary based on the I(api_version) and I(kind).
       returned: success
       type: complex
     status:
       description: Current status details for the object.
       returned: success
       type: complex
     items:
       description: Returned only when multiple yaml documents are passed to src or resource_definition
       returned: when resource_definition or src contains list of objects
       type: list
     duration:
       description: elapsed time of task in seconds
       returned: when C(wait) is true
       type: int
       sample: 48

