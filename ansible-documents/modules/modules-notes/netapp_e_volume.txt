> NETAPP_E_VOLUME    (/usr/lib/python2.7/dist-packages/ansible/modules/storage/netapp/netapp_e_volume.py)

        Create or remove volumes (standard and thin) for NetApp E/EF-series storage arrays.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= api_password
        The password to authenticate with the SANtricity Web Services Proxy or Embedded Web Services API.


= api_url
        The url to the SANtricity Web Services Proxy or Embedded Web Services API. Example https://prod-1.wahoo.acme.com/devmgr/v2


= api_username
        The username to authenticate with the SANtricity Web Services Proxy or Embedded Web Services API.


- data_assurance_enabled
        Determines whether data assurance (DA) should be enabled for the volume
        Only available when creating a new volume and on a storage pool with drives supporting the DA capability.
        [Default: False]
        type: bool

- metadata
        Dictionary containing meta data for the use, user, location, etc of the volume (dictionary is arbitrarily defined for whatever
        the user deems useful)
        When `workload_name' exists on the storage array but the metadata is different then the workload definition will be updated.
        (Changes will update all associated volumes!)
        `workload_name' must be specified when `metadata' are defined.
        [Default: (null)]
        type: dict
        version_added: 2.8
        

= name
        The name of the volume to manage.


- read_ahead_enable
        Indicates whether or not automatic cache read-ahead is enabled.
        This option has no effect on thinly provisioned volumes since the architecture for thin volumes cannot benefit from read ahead
        caching.
        [Default: False]
        type: bool
        version_added: 2.8
        

- read_cache_enable
        Indicates whether read caching should be enabled for the volume.
        [Default: True]
        type: bool
        version_added: 2.8
        

- segment_size_kb
        Segment size of the volume
        All values are in kibibytes.
        Some common choices include '8', '16', '32', '64', '128', '256', and '512' but options are system dependent.
        Retrieve the definitive system list from [netapp_e_facts] under segment_sizes.
        When the storage pool is a raidDiskPool then the segment size must be 128kb.
        Segment size migrations are not allowed in this module
        [Default: 128]

= size
        Required only when `state=='present''.
        Size of the volume in `size_unit'.
        Size of the virtual volume in the case of a thin volume in `size_unit'.
        Maximum virtual volume size of a thin provisioned volume is 256tb; however other OS-level restrictions may exist.


- size_unit
        The unit used to interpret the size parameter
        (Choices: bytes, b, kb, mb, gb, tb, pb, eb, zb, yb)[Default: gb]

- ssd_cache_enabled
        Whether an existing SSD cache should be enabled on the volume (fails if no SSD cache defined)
        The default value is to ignore existing SSD cache setting.
        [Default: False]
        type: bool

- ssid
        The ID of the array to manage. This value must be unique for each array.
        [Default: 1]

= state
        Whether the specified volume should exist
        (Choices: present, absent)

- storage_pool_name
        Required only when requested `state=='present''.
        Name of the storage pool wherein the volume should reside.
        [Default: (null)]

- thin_provision
        Whether the volume should be thin provisioned.
        Thin volumes can only be created when `raid_level=="raidDiskPool"'.
        Generally, use of thin-provisioning is not recommended due to performance impacts.
        [Default: False]
        type: bool

- thin_volume_expansion_policy
        This is the thin volume expansion policy.
        When `thin_volume_expansion_policy=="automatic"' and `thin_volume_growth_alert_threshold' is exceed the
        `thin_volume_max_repo_size' will be automatically expanded.
        When `thin_volume_expansion_policy=="manual"' and `thin_volume_growth_alert_threshold' is exceeded the storage system will wait
        for manual intervention.
        The thin volume_expansion policy can not be modified on existing thin volumes in this module.
        Generally speaking you should almost always use `thin_volume_expansion_policy=="automatic'.
        (Choices: automatic, manual)[Default: automatic]
        version_added: 2.8
        

- thin_volume_growth_alert_threshold
        This is the thin provision repository utilization threshold (in percent).
        When the percentage of used storage of the maximum repository size exceeds this value then a alert will be issued and the
        `thin_volume_expansion_policy' will be executed.
        Values must be between or equal to 10 and 99.
        [Default: 95]
        version_added: 2.8
        

- thin_volume_max_repo_size
        This is the maximum amount the thin volume repository will be allowed to grow.
        Only has significance when `thin_volume_expansion_policy=="automatic"'.
        When the percentage `thin_volume_repo_size' of `thin_volume_max_repo_size' exceeds `thin_volume_growth_alert_threshold' then a
        warning will be issued and the storage array will execute the `thin_volume_expansion_policy' policy.
        Expansion operations when `thin_volume_expansion_policy=="automatic"' will increase the maximum repository size.
        [Default: same as size (in size_unit)]

- thin_volume_repo_size
        This value (in size_unit) sets the allocated space for the thin provisioned repository.
        Initial value must between or equal to 4gb and 256gb in increments of 4gb.
        During expansion operations the increase must be between or equal to 4gb and 256gb in increments of 4gb.
        This option has no effect during expansion if `thin_volume_expansion_policy=="automatic"'.
        Generally speaking you should almost always use `thin_volume_expansion_policy=="automatic'.
        [Default: (null)]

- validate_certs
        Should https certificates be validated?
        [Default: True]
        type: bool

- wait_for_initialization
        Forces the module to wait for expansion operations to complete before continuing.
        [Default: False]
        type: bool
        version_added: 2.8
        

- workload_name
        Label for the workload defined by the metadata.
        When `workload_name' and `metadata' are specified then the defined workload will be added to the storage array.
        When `workload_name' exists on the storage array but the metadata is different then the workload definition will be updated.
        (Changes will update all associated volumes!)
        Existing workloads can be retrieved using [netapp_e_facts].
        [Default: (null)]
        version_added: 2.8
        

- write_cache_enable
        Indicates whether write-back caching should be enabled for the volume.
        [Default: False]
        type: bool
        version_added: 2.8
        


NOTES:
      * The E-Series Ansible modules require either an instance of the Web Services Proxy (WSP), to be available to manage the
        storage-system, or an E-Series storage-system that supports the Embedded Web Services API.
      * Embedded Web Services is currently available on the E2800, E5700, EF570, and newer hardware models.
      * [netapp_e_storage_system] may be utilized for configuring the systems managed by a WSP instance.


AUTHOR: Kevin Hulquest (@hulquest), Nathan Swartz (@ndswartz)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create simple volume with workload tags (volume meta data)
  netapp_e_volume:
    ssid: "{{ ssid }}"
    api_url: "{{ netapp_api_url }}"
    api_username: "{{ netapp_api_username }}"
    api_password: "{{ netapp_api_password }}"
    validate_certs: "{{ netapp_api_validate_certs }}"
    state: present
    name: volume
    storage_pool_name: storage_pool
    size: 300
    size_unit: gb
    workload_name: volume_tag
    metadata:
      key1: value1
      key2: value2
- name: Create a thin volume
  netapp_e_volume:
    ssid: "{{ ssid }}"
    api_url: "{{ netapp_api_url }}"
    api_username: "{{ netapp_api_username }}"
    api_password: "{{ netapp_api_password }}"
    validate_certs: "{{ netapp_api_validate_certs }}"
    state: present
    name: volume1
    storage_pool_name: storage_pool
    size: 131072
    size_unit: gb
    thin_provision: true
    thin_volume_repo_size: 32
    thin_volume_max_repo_size: 1024
- name: Expand thin volume's virtual size
  netapp_e_volume:
    ssid: "{{ ssid }}"
    api_url: "{{ netapp_api_url }}"
    api_username: "{{ netapp_api_username }}"
    api_password: "{{ netapp_api_password }}"
    validate_certs: "{{ netapp_api_validate_certs }}"
    state: present
    name: volume1
    storage_pool_name: storage_pool
    size: 262144
    size_unit: gb
    thin_provision: true
    thin_volume_repo_size: 32
    thin_volume_max_repo_size: 1024
- name: Expand thin volume's maximum repository size
  netapp_e_volume:
    ssid: "{{ ssid }}"
    api_url: "{{ netapp_api_url }}"
    api_username: "{{ netapp_api_username }}"
    api_password: "{{ netapp_api_password }}"
    validate_certs: "{{ netapp_api_validate_certs }}"
    state: present
    name: volume1
    storage_pool_name: storage_pool
    size: 262144
    size_unit: gb
    thin_provision: true
    thin_volume_repo_size: 32
    thin_volume_max_repo_size: 2048
- name: Delete volume
  netapp_e_volume:
    ssid: "{{ ssid }}"
    api_url: "{{ netapp_api_url }}"
    api_username: "{{ netapp_api_username }}"
    api_password: "{{ netapp_api_password }}"
    validate_certs: "{{ netapp_api_validate_certs }}"
    state: absent
    name: volume


RETURN VALUES:

msg:
    description: State of volume
    type: str
    returned: always
    sample: "Standard volume [workload_vol_1] has been created."

