> NETSCALER_CS_VSERVER    (/usr/lib/python2.7/dist-packages/ansible/modules/network/netscaler/netscaler_cs_vserver.py)

        Manage content switching vserver This module is intended to run either on the ansible  control node or a bastion (jumpserver)
        with access to the actual netscaler instance

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- appflowlog
        Enable logging appflow flow information.
        (Choices: enabled, disabled)[Default: (null)]

- authentication
        Authenticate users who request a connection to the content switching virtual server.
        [Default: (null)]
        type: bool

- authenticationhost
        FQDN of the authentication virtual server. The service type of the virtual server should be either `HTTP' or `SSL'.
        Minimum length = 3
        Maximum length = 252
        [Default: (null)]

- authn401
        Enable HTTP 401-response based authentication.
        [Default: (null)]
        type: bool

- authnprofile
        Name of the authentication profile to be used when authentication is turned on.
        [Default: (null)]

- authnvsname
        Name of authentication virtual server that authenticates the incoming user requests to this content switching virtual server. .
        Minimum length = 1
        Maximum length = 252
        [Default: (null)]

- backupip
        .
        Minimum length = 1
        [Default: (null)]

- backupvserver
        Name of the backup virtual server that you are configuring. Must begin with an ASCII alphanumeric or underscore `_' character,
        and must contain only ASCII alphanumeric, underscore `_', hash `#', period `.', space ` ', colon `:', at sign `@', equal sign
        `=', and hyphen `-' characters. Can be changed after the backup virtual server is created. You can assign a different backup
        virtual server or rename the existing virtual server.
        Minimum length = 1
        [Default: (null)]

- cacheable
        Use this option to specify whether a virtual server, used for load balancing or content switching, routes requests to the cache
        redirection virtual server before sending it to the configured servers.
        [Default: (null)]
        type: bool

- casesensitive
        Consider case in URLs (for policies that use URLs instead of RULES). For example, with the `on' setting, the URLs /a/1.html and
        /A/1.HTML are treated differently and can have different targets (set by content switching policies). With the `off' setting,
        /a/1.html and /A/1.HTML are switched to the same target.
        [Default: (null)]
        type: bool

- clttimeout
        Idle time, in seconds, after which the client connection is terminated. The default values are:
        Minimum value = `0'
        Maximum value = `31536000'
        [Default: (null)]

- comment
        Information about this virtual server.
        [Default: (null)]

- cookiedomain
        .
        Minimum length = 1
        [Default: (null)]

- cookietimeout
        .
        Minimum value = `0'
        Maximum value = `1440'
        [Default: (null)]

- dbprofilename
        Name of the DB profile.
        Minimum length = 1
        Maximum length = 127
        [Default: (null)]

- disabled
        When set to `yes' the cs vserver will be disabled.
        When set to `no' the cs vserver will be enabled.
        Note that due to limitations of the underlying NITRO API a `disabled' state change alone does not cause the module result to
        report a changed status.
        [Default: no]
        type: bool

- disableprimaryondown
        Continue forwarding the traffic to backup virtual server even after the primary server comes UP from the DOWN state.
        (Choices: enabled, disabled)[Default: (null)]

- dnsprofilename
        Name of the DNS profile to be associated with the VServer. DNS profile properties will applied to the transactions processed by a
        VServer. This parameter is valid only for DNS and DNS-TCP VServers.
        Minimum length = 1
        Maximum length = 127
        [Default: (null)]

- domainname
        Domain name for which to change the time to live (TTL) and/or backup service IP address.
        Minimum length = 1
        [Default: (null)]

- downstateflush
        Flush all active transactions associated with a virtual server whose state transitions from UP to DOWN. Do not enable this option
        for applications that must complete their transactions.
        (Choices: enabled, disabled)[Default: (null)]

- httpprofilename
        Name of the HTTP profile containing HTTP configuration settings for the virtual server. The service type of the virtual server
        should be either `HTTP' or `SSL'.
        Minimum length = 1
        Maximum length = 127
        [Default: (null)]

- icmpvsrresponse
        Can be active or passive.
        (Choices: PASSIVE, ACTIVE)[Default: (null)]

- insertvserveripport
        Insert the virtual server's VIP address and port number in the request header. Available values function as follows:
        `VIPADDR' - Header contains the vserver's IP address and port number without any translation.
        `OFF' - The virtual IP and port header insertion option is disabled.
        `V6TOV4MAPPING' - Header contains the mapped IPv4 address corresponding to the IPv6 address of the vserver and the port number.
        An IPv6 address can be mapped to a user-specified IPv4 address using the set ns ip6 command.
        (Choices: OFF, VIPADDR, V6TOV4MAPPING)[Default: (null)]

- ipmask
        IP mask, in dotted decimal notation, for the IP Pattern parameter. Can have leading or trailing non-zero octets (for example,
        `255.255.240.0' or `0.0.255.255'). Accordingly, the mask specifies whether the first n bits or the last n bits of the destination
        IP address in a client request are to be matched with the corresponding bits in the IP pattern. The former is called a forward
        mask. The latter is called a reverse mask.
        [Default: (null)]

- ippattern
        IP address pattern, in dotted decimal notation, for identifying packets to be accepted by the virtual server. The IP Mask
        parameter specifies which part of the destination IP address is matched against the pattern. Mutually exclusive with the IP
        Address parameter.
        For example, if the IP pattern assigned to the virtual server is `198.51.100.0' and the IP mask is `255.255.240.0' (a forward
        mask), the first 20 bits in the destination IP addresses are matched with the first 20 bits in the pattern. The virtual server
        accepts requests with IP addresses that range from 198.51.96.1 to 198.51.111.254. You can also use a pattern such as `0.0.2.2'
        and a mask such as `0.0.255.255' (a reverse mask).
        If a destination IP address matches more than one IP pattern, the pattern with the longest match is selected, and the associated
        virtual server processes the request. For example, if the virtual servers, `vs1' and `vs2', have the same IP pattern,
        `0.0.100.128', but different IP masks of `0.0.255.255' and `0.0.224.255', a destination IP address of 198.51.100.128 has the
        longest match with the IP pattern of `vs1'. If a destination IP address matches two or more virtual servers to the same extent,
        the request is processed by the virtual server whose port number matches the port number in the request.
        [Default: (null)]

- ipv46
        IP address of the content switching virtual server.
        Minimum length = 1
        [Default: (null)]

- l2conn
        Use L2 Parameters to identify a connection.
        [Default: (null)]
        type: bool

- lbvserver
        The default Load Balancing virtual server.
        [Default: (null)]
        version_added: 2.5

- listenpolicy
        String specifying the listen policy for the content switching virtual server. Can be either the name of an existing expression or
        an in-line expression.
        [Default: (null)]

- mssqlserverversion
        The version of the MSSQL server.
        (Choices: 70, 2000, 2000SP1, 2005, 2008, 2008R2, 2012, 2014)[Default: (null)]

- mysqlcharacterset
        The character set returned by the mysql vserver.
        [Default: (null)]

- mysqlprotocolversion
        The protocol version returned by the mysql vserver.
        [Default: (null)]

- mysqlservercapabilities
        The server capabilities returned by the mysql vserver.
        [Default: (null)]

- mysqlserverversion
        The server version string returned by the mysql vserver.
        Minimum length = 1
        Maximum length = 31
        [Default: (null)]

- name
        Name for the content switching virtual server. Must begin with an ASCII alphanumeric or underscore `_' character, and must
        contain only ASCII alphanumeric, underscore `_', hash `#', period `.', space, colon `:', at sign `@', equal sign `=', and hyphen
        `-' characters.
        Cannot be changed after the CS virtual server is created.
        Minimum length = 1
        [Default: (null)]

- netprofile
        The name of the network profile.
        Minimum length = 1
        Maximum length = 127
        [Default: (null)]

= nitro_pass
        The password with which to authenticate to the netscaler node.

        type: str

- nitro_protocol
        Which protocol to use when accessing the nitro API objects.
        (Choices: http, https)[Default: http]
        type: str

- nitro_timeout
        Time in seconds until a timeout error is thrown when establishing a new session with Netscaler
        [Default: 310]
        type: float

= nitro_user
        The username with which to authenticate to the netscaler node.

        type: str

= nsip
        The ip address of the netscaler appliance where the nitro API calls will be made.
        The port can be specified with the colon (:). E.g. 192.168.1.1:555.

        type: str

- oracleserverversion
        Oracle server version.
        (Choices: 10G, 11G)[Default: (null)]

- port
        Port number for content switching virtual server.
        Minimum value = 1
        Range `1' - `65535'
        * in CLI is represented as 65535 in NITRO API
        [Default: (null)]

- precedence
        Type of precedence to use for both RULE-based and URL-based policies on the content switching virtual server. With the default
        `RULE' setting, incoming requests are evaluated against the rule-based content switching policies. If none of the rules match,
        the URL in the request is evaluated against the URL-based content switching policies.
        (Choices: RULE, URL)[Default: (null)]

- push
        Process traffic with the push virtual server that is bound to this content switching virtual server (specified by the Push
        VServer parameter). The service type of the push virtual server should be either `HTTP' or `SSL'.
        (Choices: enabled, disabled)[Default: (null)]

- pushlabel
        Expression for extracting the label from the response received from server. This string can be either an existing rule name or an
        inline expression. The service type of the virtual server should be either `HTTP' or `SSL'.
        [Default: (null)]

- pushmulticlients
        Allow multiple Web 2.0 connections from the same client to connect to the virtual server and expect updates.
        [Default: (null)]
        type: bool

- pushvserver
        Name of the load balancing virtual server, of type `PUSH' or `SSL_PUSH', to which the server pushes updates received on the
        client-facing load balancing virtual server.
        Minimum length = 1
        [Default: (null)]

- range
        Number of consecutive IP addresses, starting with the address specified by the IP Address parameter, to include in a range of
        addresses assigned to this virtual server.
        Minimum value = `1'
        Maximum value = `254'
        [Default: (null)]

- redirectportrewrite
        State of port rewrite while performing HTTP redirect.
        (Choices: enabled, disabled)[Default: (null)]

- redirecturl
        URL to which traffic is redirected if the virtual server becomes unavailable. The service type of the virtual server should be
        either `HTTP' or `SSL'.
        Caution: Make sure that the domain in the URL does not match the domain specified for a content switching policy. If it does,
        requests are continuously redirected to the unavailable virtual server.
        Minimum length = 1
        [Default: (null)]

- rhistate
        A host route is injected according to the setting on the virtual servers
        * If set to `PASSIVE' on all the virtual servers that share the IP address, the appliance always injects the hostroute.
        * If set to `ACTIVE' on all the virtual servers that share the IP address, the appliance injects even if one virtual server is
        UP.
        * If set to `ACTIVE' on some virtual servers and `PASSIVE' on the others, the appliance, injects even if one virtual server set
        to `ACTIVE' is UP.
        (Choices: PASSIVE, ACTIVE)[Default: (null)]

- rtspnat
        Enable network address translation (NAT) for real-time streaming protocol (RTSP) connections.
        [Default: (null)]
        type: bool

- save_config
        If `yes' the module will save the configuration on the netscaler node if it makes any changes.
        The module will not save the configuration on the netscaler node if it made no changes.
        [Default: True]
        type: bool

- servicetype
        Protocol used by the virtual server.
        (Choices: HTTP, SSL, TCP, FTP, RTSP, SSL_TCP, UDP, DNS, SIP_UDP, SIP_TCP, SIP_SSL, ANY, RADIUS, RDP, MYSQL, MSSQL, DIAMETER,
        SSL_DIAMETER, DNS_TCP, ORACLE, SMPP)[Default: (null)]

- sitedomainttl
        .
        Minimum value = `1'
        [Default: (null)]

- sobackupaction
        Action to be performed if spillover is to take effect, but no backup chain to spillover is usable or exists.
        (Choices: DROP, ACCEPT, REDIRECT)[Default: (null)]

- somethod
        Type of spillover used to divert traffic to the backup virtual server when the primary virtual server reaches the spillover
        threshold. Connection spillover is based on the number of connections. Bandwidth spillover is based on the total Kbps of incoming
        and outgoing traffic.
        (Choices: CONNECTION, DYNAMICCONNECTION, BANDWIDTH, HEALTH, NONE)[Default: (null)]

- sopersistence
        Maintain source-IP based persistence on primary and backup virtual servers.
        (Choices: enabled, disabled)[Default: (null)]

- sopersistencetimeout
        Time-out value, in minutes, for spillover persistence.
        Minimum value = `2'
        Maximum value = `1440'
        [Default: (null)]

- sothreshold
        Depending on the spillover method, the maximum number of connections or the maximum total bandwidth (Kbps) that a virtual server
        can handle before spillover occurs.
        Minimum value = `1'
        Maximum value = `4294967287'
        [Default: (null)]

- ssl_certkey
        The name of the ssl certificate that is bound to this service.
        The ssl certificate must already exist.
        Creating the certificate can be done with the [netscaler_ssl_certkey] module.
        This option is only applicable only when `servicetype' is `SSL'.
        [Default: (null)]
        version_added: 2.5

- state
        The state of the resource being configured by the module on the netscaler node.
        When present the resource will be created if needed and configured according to the module's parameters.
        When absent the resource will be deleted from the netscaler node.
        (Choices: absent, present)[Default: present]
        type: str

- stateupdate
        Enable state updates for a specific content switching virtual server. By default, the Content Switching virtual server is always
        UP, regardless of the state of the Load Balancing virtual servers bound to it. This parameter interacts with the global setting
        as follows:
        Global Level | Vserver Level | Result
        enabled enabled enabled
        enabled disabled enabled
        disabled enabled enabled
        disabled disabled disabled
        If you want to enable state updates for only some content switching virtual servers, be sure to disable the state update
        parameter.
        (Choices: enabled, disabled)[Default: (null)]

- targettype
        Virtual server target type.
        (Choices: GSLB)[Default: (null)]

- tcpprofilename
        Name of the TCP profile containing TCP configuration settings for the virtual server.
        Minimum length = 1
        Maximum length = 127
        [Default: (null)]

- td
        Integer value that uniquely identifies the traffic domain in which you want to configure the entity. If you do not specify an ID,
        the entity becomes part of the default traffic domain, which has an ID of 0.
        Minimum value = 0
        Maximum value = 4094
        [Default: (null)]

- ttl
        .
        Minimum value = `1'
        [Default: (null)]

- validate_certs
        If `no', SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed
        certificates.
        [Default: True]
        type: bool

- vipheader
        Name of virtual server IP and port header, for use with the VServer IP Port Insertion parameter.
        Minimum length = 1
        [Default: (null)]


NOTES:
      * For more information on using Ansible to manage Citrix NetScaler Network devices see https://www.ansible.com/ansible-
        netscaler.


REQUIREMENTS:  nitro python sdk

AUTHOR: George Nikolopoulos (@giorgos-nikolopoulos)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# policy_1 must have been already created with the netscaler_cs_policy module
# lbvserver_1 must have been already created with the netscaler_lb_vserver module

- name: Setup content switching vserver
  delegate_to: localhost
  netscaler_cs_vserver:
    nsip: 172.18.0.2
    nitro_user: nsroot
    nitro_pass: nsroot

    state: present

    name: cs_vserver_1
    ipv46: 192.168.1.1
    port: 80
    servicetype: HTTP

    policybindings:
      - policyname: policy_1
        targetlbvserver: lbvserver_1


RETURN VALUES:

loglines:
    description: list of logged messages by the module
    returned: always
    type: list
    sample: ['message 1', 'message 2']

msg:
    description: Message detailing the failure reason
    returned: failure
    type: str
    sample: "Action does not exist"

diff:
    description: List of differences between the actual configured object and the configuration specified in the module
    returned: failure
    type: dict
    sample: { 'clttimeout': 'difference. ours: (float) 100.0 other: (float) 60.0' }

