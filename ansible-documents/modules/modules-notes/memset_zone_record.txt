> MEMSET_ZONE_RECORD    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/memset/memset_zone_record.py)

        Manage DNS records in a Memset account.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= address
        The address for this record (can be IP or text string depending on record type).
        (Aliases: ip, data)

= api_key
        The API key obtained from the Memset control panel.


- priority
        `SRV' and `TXT' record priority, in the range 0 > 999 (inclusive).
        [Default: (null)]

- record
        The subdomain to create.
        [Default: (null)]

- relative
        If set then the current domain is added onto the address field for `CNAME', `MX', `NS' and `SRV'record types.
        [Default: (null)]
        type: bool

- state
        Indicates desired state of resource.
        (Choices: absent, present)[Default: present]

- ttl
        The record's TTL in seconds (will inherit zone's TTL if not explicitly set). This must be a valid int from
        https://www.memset.com/apidocs/methods_dns.html#dns.zone_record_create.
        (Choices: 0, 300, 600, 900, 1800, 3600, 7200, 10800, 21600, 43200, 86400)[Default: (null)]

= type
        The type of DNS record to create.
        (Choices: A, AAAA, CNAME, MX, NS, SRV, TXT)

= zone
        The name of the zone to which to add the record to.



NOTES:
      * Zones can be thought of as a logical group of domains, all of which share the same DNS records (i.e. they point to the same
        IP). An API key generated via the Memset customer control panel is needed with the following minimum scope -
        `dns.zone_create', `dns.zone_delete', `dns.zone_list'.
      * Currently this module can only create one DNS record at a time. Multiple records should be created using `with_items'.


AUTHOR: Simon Weald (@glitchcrab)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Create DNS record for www.domain.com
- name: create DNS record
  memset_zone_record:
    api_key: dcf089a2896940da9ffefb307ef49ccd
    state: present
    zone: domain.com
    type: A
    record: www
    address: 1.2.3.4
    ttl: 300
    relative: false
  delegate_to: localhost

# create an SPF record for domain.com
- name: create SPF record for domain.com
  memset_zone_record:
    api_key: dcf089a2896940da9ffefb307ef49ccd
    state: present
    zone: domain.com
    type: TXT
    address: "v=spf1 +a +mx +ip4:a1.2.3.4 ?all"
  delegate_to: localhost

# create multiple DNS records
- name: create multiple DNS records
  memset_zone_record:
    api_key: dcf089a2896940da9ffefb307ef49ccd
    zone: "{{ item.zone }}"
    type: "{{ item.type }}"
    record: "{{ item.record }}"
    address: "{{ item.address }}"
  delegate_to: localhost
  with_items:
    - { 'zone': 'domain1.com', 'type': 'A', 'record': 'www', 'address': '1.2.3.4' }
    - { 'zone': 'domain2.com', 'type': 'A', 'record': 'mail', 'address': '4.3.2.1' }


RETURN VALUES:

memset_api:
  description: Record info from the Memset API.
  returned: when state == present
  type: complex
  contains:
    address:
      description: Record content (may be an IP, string or blank depending on record type).
      returned: always
      type: str
      sample: 1.1.1.1
    id:
      description: Record ID.
      returned: always
      type: str
      sample: "b0bb1ce851aeea6feeb2dc32fe83bf9c"
    priority:
      description: Priority for C(MX) and C(SRV) records.
      returned: always
      type: int
      sample: 10
    record:
      description: Name of record.
      returned: always
      type: str
      sample: "www"
    relative:
      description: Adds the current domain onto the address field for C(CNAME), C(MX), C(NS) and C(SRV) types.
      returned: always
      type: bool
      sample: False
    ttl:
      description: Record TTL.
      returned: always
      type: int
      sample: 10
    type:
      description: Record type.
      returned: always
      type: str
      sample: AAAA
    zone_id:
      description: Zone ID.
      returned: always
      type: str
      sample: "b0bb1ce851aeea6feeb2dc32fe83bf9c"

