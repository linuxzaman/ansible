> CE_CONFIG    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cloudengine/ce_config.py)

        Huawei CloudEngine configurations use a simple block indent file syntax for segmenting configuration into sections.  This module
        provides an implementation for working with CloudEngine configuration sections in a deterministic way.  This module works with
        CLI transports.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- after
        The ordered set of commands to append to the end of the command stack if a change needs to be made.  Just like with `before' this
        allows the playbook designer to append a set of commands to be executed after the command set.
        [Default: (null)]

- backup
        This argument will cause the module to create a full backup of the current `current-configuration' from the remote device before
        any changes are made. If the `backup_options' value is not given, the backup file is written to the `backup' folder in the
        playbook root directory. If the directory does not exist, it is created.
        [Default: no]
        type: bool

- backup_options
        This is a dict object containing configurable options related to backup file path. The value of this option is read only when
        `backup' is set to `yes', if `backup' is set to `no' this option will be silently ignored.
        [Default: (null)]
        suboptions:
          dir_path:
            description:
            - This option provides the path ending with directory name in which the backup
              configuration file will be stored. If the directory does not exist it will be
              first created and the filename is either the value of `filename' or default
              filename as described in `filename' options description. If the path value
              is not given in that case a `backup' directory will be created in the current
              working directory and backup configuration will be copied in `filename' within
              `backup' directory.
            type: path
          filename:
            description:
            - The filename to be used to store the backup configuration. If the the filename
              is not given it will be generated based on the hostname, current time and date
              in format defined by <hostname>_config.<current-date>@<current-time>
        
        type: dict
        version_added: 2.8

- before
        The ordered set of commands to push on to the command stack if a change needs to be made.  This allows the playbook designer the
        opportunity to perform configuration commands prior to pushing any changes without affecting how the set of commands are matched
        against the system.
        [Default: (null)]

- config
        The module, by default, will connect to the remote device and retrieve the current current-configuration to use as a base for
        comparing against the contents of source.  There are times when it is not desirable to have the task get the current-
        configuration for every task in a playbook.  The `config' argument allows the implementer to pass in the configuration to use as
        the base config for comparison.
        [Default: (null)]

- defaults
        The `defaults' argument will influence how the current-configuration is collected from the device.  When the value is set to
        true, the command used to collect the current-configuration is append with the all keyword.  When the value is set to false, the
        command is issued without the all keyword.
        [Default: no]
        type: bool

- lines
        The ordered set of commands that should be configured in the section.  The commands must be the exact same commands as found in
        the device current-configuration.  Be sure to note the configuration command syntax as some commands are automatically modified
        by the device config parser.
        [Default: (null)]

- match
        Instructs the module on the way to perform the matching of the set of commands against the current device config.  If match is
        set to `line', commands are matched line by line.  If match is set to `strict', command lines are matched with respect to
        position.  If match is set to `exact', command lines must be an equal match.  Finally, if match is set to `none', the module will
        not attempt to compare the source configuration with the current-configuration on the remote device.
        (Choices: line, strict, exact, none)[Default: line]

- parents
        The ordered set of parents that uniquely identify the section or hierarchy the commands should be checked against.  If the
        parents argument is omitted, the commands are checked against the set of top level or global commands.
        [Default: (null)]

- replace
        Instructs the module on the way to perform the configuration on the device.  If the replace argument is set to `line' then the
        modified lines are pushed to the device in configuration mode.  If the replace argument is set to `block' then the entire command
        block is pushed to the device in configuration mode if any line is not correct.
        (Choices: line, block)[Default: line]

- save
        The `save' argument instructs the module to save the current-configuration to saved-configuration.  This operation is performed
        after any changes are made to the current running config.  If no changes are made, the configuration is still saved to the
        startup config.  This option will always cause the module to return changed.
        [Default: no]
        type: bool

- src
        The `src' argument provides a path to the configuration file to load into the remote system.  The path can either be a full
        system path to the configuration file if the value starts with / or relative to the root of the implemented role or playbook.
        This argument is mutually exclusive with the `lines' and `parents' arguments.
        [Default: (null)]


AUTHOR: QijunPan (@QijunPan)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Note: examples below use the following provider dict to handle
#       transport and authentication to the node.

- name: CloudEngine config test
  hosts: cloudengine
  connection: local
  gather_facts: no
  vars:
    cli:
      host: "{{ inventory_hostname }}"
      port: "{{ ansible_ssh_port }}"
      username: "{{ username }}"
      password: "{{ password }}"
      transport: cli

  tasks:
  - name: "Configure top level configuration and save it"
    ce_config:
      lines: sysname {{ inventory_hostname }}
      save: yes
      provider: "{{ cli }}"

  - name: "Configure acl configuration and save it"
    ce_config:
      lines:
        - rule 10 permit source 1.1.1.1 32
        - rule 20 permit source 2.2.2.2 32
        - rule 30 permit source 3.3.3.3 32
        - rule 40 permit source 4.4.4.4 32
        - rule 50 permit source 5.5.5.5 32
      parents: acl 2000
      before: undo acl 2000
      match: exact
      provider: "{{ cli }}"

  - name: "Configure acl configuration and save it"
    ce_config:
      lines:
        - rule 10 permit source 1.1.1.1 32
        - rule 20 permit source 2.2.2.2 32
        - rule 30 permit source 3.3.3.3 32
        - rule 40 permit source 4.4.4.4 32
      parents: acl 2000
      before: undo acl 2000
      replace: block
      provider: "{{ cli }}"

  - name: configurable backup path
    ce_config:
      lines: sysname {{ inventory_hostname }}
      provider: "{{ cli }}"
      backup: yes
      backup_options:
        filename: backup.cfg
        dir_path: /home/user


RETURN VALUES:

updates:
  description: The set of commands that will be pushed to the remote device
  returned: Only when lines is specified.
  type: list
  sample: ['...', '...']
backup_path:
  description: The full path to the backup file
  returned: when backup is yes
  type: str
  sample: /playbooks/ansible/backup/ce_config.2016-07-16@22:28:34

