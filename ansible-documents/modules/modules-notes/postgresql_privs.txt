> POSTGRESQL_PRIVS    (/usr/lib/python2.7/dist-packages/ansible/modules/database/postgresql/postgresql_privs.py)

        Grant or revoke privileges on PostgreSQL database objects. This module is basically a wrapper around most of the functionality of
        PostgreSQL's GRANT and REVOKE statements with detection of changes (GRANT/REVOKE `privs' ON `type' `objs' TO/FROM `roles').

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- ca_cert
        Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
        If the file exists, the server's certificate will be verified to be signed by one of these authorities.
        (Aliases: ssl_rootcert)[Default: (null)]
        type: str
        version_added: 2.3

= database
        Name of database to connect to.
        (Aliases: db, login_db)
        type: str

- fail_on_role
        If `yes', fail when target role (for whom privs need to be granted) does not exist. Otherwise just warn and continue.
        [Default: True]
        type: bool
        version_added: 2.8

- grant_option
        Whether `role' may grant/revoke the specified privileges/group memberships to others.
        Set to `no' to revoke GRANT OPTION, leave unspecified to make no changes.
        `grant_option' only has an effect if `state' is `present'.
        (Aliases: admin_option)[Default: (null)]
        type: bool

- host
        Database host address. If unspecified, connect via Unix socket.
        (Aliases: login_host)[Default: (null)]
        type: str

- login
        The username to authenticate with.
        (Aliases: login_user)[Default: postgres]
        type: str

- login_host
        Host running the database.
        [Default: (null)]
        type: str

- login_password
        The password used to authenticate with.
        [Default: (null)]
        type: str

- login_unix_socket
        Path to a Unix domain socket for local connections.
        [Default: (null)]
        type: str

- login_user
        The username used to authenticate with.
        [Default: postgres]
        type: str

- objs
        Comma separated list of database objects to set privileges on.
        If `type' is `table', `partition table', `sequence' or `function', the special value`ALL_IN_SCHEMA' can be provided instead to
        specify all database objects of type `type' in the schema specified via `schema'. (This also works with PostgreSQL < 9.0.)
        (`ALL_IN_SCHEMA' is available for `function' and `partition table' from version 2.8)
        If `type' is `database', this parameter can be omitted, in which case privileges are set for the database specified via
        `database'.
        If `type' is `function', colons (":") in object names will be replaced with commas (needed to specify function signatures, see
        examples)
        (Aliases: obj)[Default: (null)]
        type: str

- password
        The password to authenticate with.
        (Aliases: login_password)[Default: (null)]
        type: str

- port
        Database port to connect to.
        (Aliases: login_port)[Default: 5432]
        type: int

- privs
        Comma separated list of privileges to grant/revoke.
        (Aliases: priv)[Default: (null)]
        type: str

= roles
        Comma separated list of role (user/group) names to set permissions for.
        The special value `PUBLIC' can be provided instead to set permissions for the implicitly defined PUBLIC group.
        (Aliases: role)
        type: str

- schema
        Schema that contains the database objects specified via `objs'.
        May only be provided if `type' is `table', `sequence', `function' or `default_privs'. Defaults to  `public' in these cases.
        [Default: (null)]
        type: str

- session_role
        Switch to session_role after connecting.
        The specified session_role must be a role that the current login_user is a member of.
        Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.
        [Default: (null)]
        type: str
        version_added: 2.8

- ssl_mode
        Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
        See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
        Default of `prefer' matches libpq default.
        (Choices: allow, disable, prefer, require, verify-ca, verify-full)[Default: prefer]
        type: str
        version_added: 2.3

- state
        If `present', the specified privileges are granted, if `absent' they are revoked.
        (Choices: absent, present)[Default: present]
        type: str

- target_roles
        A list of existing role (user/group) names to set as the default permissions for database objects subsequently created by them.
        Parameter `target_roles' is only available with `type=default_privs'.
        [Default: (null)]
        type: str
        version_added: 2.8

- type
        Type of database object to set privileges on.
        The `default_prives` choice is available starting at version 2.7.
        The 'foreign_data_wrapper' and 'foreign_server' object types are available from Ansible version '2.8'.
        (Choices: database, default_privs, foreign_data_wrapper, foreign_server, function, group, language, table, tablespace, schema,
        sequence)[Default: table]
        type: str

- unix_socket
        Path to a Unix domain socket for local connections.
        (Aliases: login_unix_socket)[Default: (null)]
        type: str


NOTES:
      * Default authentication assumes that postgresql_privs is run by the `postgres' user on the remote host. (Ansible's `user' or
        `sudo-user').
      * This module requires Python package `psycopg2' to be installed on the remote host. In the default case of the remote host
        also being the PostgreSQL server, PostgreSQL has to be installed there as well, obviously. For Debian/Ubuntu-based systems,
        install packages `postgresql' and `python-psycopg2'.
      * Parameters that accept comma separated lists (`privs', `objs', `roles') have singular alias names (`priv', `obj', `role').
      * To revoke only `GRANT OPTION' for a specific object, set `state' to `present' and `grant_option' to `no' (see examples).
      * Note that when revoking privileges from a role R, this role  may still have access via privileges granted to any role R is
        a member of including `PUBLIC'.
      * Note that when revoking privileges from a role R, you do so as the user specified via `login'. If R has been granted the
        same privileges by another user also, R can still access database objects via these privileges.
      * When revoking privileges, `RESTRICT' is assumed (see PostgreSQL docs).
      * The ca_cert parameter requires at least Postgres version 8.4 and `psycopg2' version 2.4.3.
      * The default authentication assumes that you are either logging in as or sudo'ing to the `postgres' account on the host.
      * This module uses `psycopg2', a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module. If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must
        also be installed on the remote host. For Ubuntu-based systems, install the `postgresql', `libpq-dev', and `python-
        psycopg2' packages on the remote host before using this module.
      * The ca_cert parameter requires at least Postgres version 8.4 and `psycopg2' version 2.4.3.


REQUIREMENTS:  psycopg2

AUTHOR: Bernhard Weitzhofer (@b6d)
        METADATA:
          status:
          - stableinterface
          supported_by: community
        

EXAMPLES:

# On database "library":
# GRANT SELECT, INSERT, UPDATE ON TABLE public.books, public.authors
# TO librarian, reader WITH GRANT OPTION
- name: Grant privs to librarian and reader on database library
  postgresql_privs:
    database: library
    state: present
    privs: SELECT,INSERT,UPDATE
    type: table
    objs: books,authors
    schema: public
    roles: librarian,reader
    grant_option: yes

- name: Same as above leveraging default values
  postgresql_privs:
    db: library
    privs: SELECT,INSERT,UPDATE
    objs: books,authors
    roles: librarian,reader
    grant_option: yes

# REVOKE GRANT OPTION FOR INSERT ON TABLE books FROM reader
# Note that role "reader" will be *granted* INSERT privilege itself if this
# isn't already the case (since state: present).
- name: Revoke privs from reader
  postgresql_privs:
    db: library
    state: present
    priv: INSERT
    obj: books
    role: reader
    grant_option: no

# "public" is the default schema. This also works for PostgreSQL 8.x.
- name: REVOKE INSERT, UPDATE ON ALL TABLES IN SCHEMA public FROM reader
  postgresql_privs:
    db: library
    state: absent
    privs: INSERT,UPDATE
    objs: ALL_IN_SCHEMA
    role: reader

- name: GRANT ALL PRIVILEGES ON SCHEMA public, math TO librarian
  postgresql_privs:
    db: library
    privs: ALL
    type: schema
    objs: public,math
    role: librarian

# Note the separation of arguments with colons.
- name: GRANT ALL PRIVILEGES ON FUNCTION math.add(int, int) TO librarian, reader
  postgresql_privs:
    db: library
    privs: ALL
    type: function
    obj: add(int:int)
    schema: math
    roles: librarian,reader

# Note that group role memberships apply cluster-wide and therefore are not
# restricted to database "library" here.
- name: GRANT librarian, reader TO alice, bob WITH ADMIN OPTION
  postgresql_privs:
    db: library
    type: group
    objs: librarian,reader
    roles: alice,bob
    admin_option: yes

# Note that here "db: postgres" specifies the database to connect to, not the
# database to grant privileges on (which is specified via the "objs" param)
- name: GRANT ALL PRIVILEGES ON DATABASE library TO librarian
  postgresql_privs:
    db: postgres
    privs: ALL
    type: database
    obj: library
    role: librarian

# If objs is omitted for type "database", it defaults to the database
# to which the connection is established
- name: GRANT ALL PRIVILEGES ON DATABASE library TO librarian
  postgresql_privs:
    db: library
    privs: ALL
    type: database
    role: librarian

# Available since version 2.7
# Objs must be set, ALL_DEFAULT to TABLES/SEQUENCES/TYPES/FUNCTIONS
# ALL_DEFAULT works only with privs=ALL
# For specific
- name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO librarian
  postgresql_privs:
    db: library
    objs: ALL_DEFAULT
    privs: ALL
    type: default_privs
    role: librarian
    grant_option: yes

# Available since version 2.7
# Objs must be set, ALL_DEFAULT to TABLES/SEQUENCES/TYPES/FUNCTIONS
# ALL_DEFAULT works only with privs=ALL
# For specific
- name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO reader, step 1
  postgresql_privs:
    db: library
    objs: TABLES,SEQUENCES
    privs: SELECT
    type: default_privs
    role: reader

- name: ALTER DEFAULT PRIVILEGES ON DATABASE library TO reader, step 2
  postgresql_privs:
    db: library
    objs: TYPES
    privs: USAGE
    type: default_privs
    role: reader

# Available since version 2.8
- name: GRANT ALL PRIVILEGES ON FOREIGN DATA WRAPPER fdw TO reader
  postgresql_privs:
    db: test
    objs: fdw
    privs: ALL
    type: foreign_data_wrapper
    role: reader

# Available since version 2.8
- name: GRANT ALL PRIVILEGES ON FOREIGN SERVER fdw_server TO reader
  postgresql_privs:
    db: test
    objs: fdw_server
    privs: ALL
    type: foreign_server
    role: reader

# Available since version 2.8
# Grant 'execute' permissions on all functions in schema 'common' to role 'caller'
- name: GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA common TO caller
  postgresql_privs:
    type: function
    state: present
    privs: EXECUTE
    roles: caller
    objs: ALL_IN_SCHEMA
    schema: common

# Available since version 2.8
# ALTER DEFAULT PRIVILEGES FOR ROLE librarian IN SCHEMA library GRANT SELECT ON TABLES TO reader
# GRANT SELECT privileges for new TABLES objects created by librarian as
# default to the role reader.
# For specific
- name: ALTER privs
  postgresql_privs:
    db: library
    schema: library
    objs: TABLES
    privs: SELECT
    type: default_privs
    role: reader
    target_roles: librarian

# Available since version 2.8
# ALTER DEFAULT PRIVILEGES FOR ROLE librarian IN SCHEMA library REVOKE SELECT ON TABLES FROM reader
# REVOKE SELECT privileges for new TABLES objects created by librarian as
# default from the role reader.
# For specific
- name: ALTER privs
  postgresql_privs:
    db: library
    state: absent
    schema: library
    objs: TABLES
    privs: SELECT
    type: default_privs
    role: reader
    target_roles: librarian


RETURN VALUES:

queries:
  description: List of executed queries.
  returned: always
  type: list
  sample: ['REVOKE GRANT OPTION FOR INSERT ON TABLE "books" FROM "reader";']
  version_added: '2.8'

