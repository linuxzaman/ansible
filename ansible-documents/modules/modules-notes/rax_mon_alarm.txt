> RAX_MON_ALARM    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/rackspace/rax_mon_alarm.py)

        Create or delete a Rackspace Cloud Monitoring alarm that associates an existing rax_mon_entity, rax_mon_check, and
        rax_mon_notification_plan with criteria that specify what conditions will trigger which levels of notifications. Rackspace
        monitoring module flow | rax_mon_entity -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> *rax_mon_alarm*

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_key
        Rackspace API key, overrides `credentials'.
        (Aliases: password)[Default: (null)]

- auth_endpoint
        The URI of the authentication service.
        [Default: https://identity.api.rackspacecloud.com/v2.0/]
        version_added: 1.5

= check_id
        ID of the check that should be alerted on. May be acquired by registering the value of a rax_mon_check task.


- credentials
        File to find the Rackspace credentials in. Ignored if `api_key' and `username' are provided.
        (Aliases: creds_file)[Default: (null)]

- criteria
        Alarm DSL that describes alerting conditions and their output states. Must be between 1 and 16384 characters long. See
        http://docs.rackspace.com/cm/api/v1.0/cm-devguide/content/alerts-language.html for a reference on the alerting language.
        [Default: (null)]

- disabled
        If yes, create this alarm, but leave it in an inactive state. Defaults to no.
        [Default: (null)]
        type: bool

= entity_id
        ID of the entity this alarm is attached to. May be acquired by registering the value of a rax_mon_entity task.


- env
        Environment as configured in `~/.pyrax.cfg', see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-
        configuration.
        [Default: (null)]
        version_added: 1.5

- identity_type
        Authentication mechanism to use, such as rackspace or keystone.
        [Default: rackspace]
        version_added: 1.5

= label
        Friendly name for this alarm, used to achieve idempotence. Must be a String between 1 and 255 characters long.


- metadata
        Arbitrary key/value pairs to accompany the alarm. Must be a hash of String keys and values between 1 and 255 characters long.
        [Default: (null)]

= notification_plan_id
        ID of the notification plan to trigger if this alarm fires. May be acquired by registering the value of a
        rax_mon_notification_plan task.


- region
        Region to create an instance in.
        [Default: DFW]

- state
        Ensure that the alarm with this `label' exists or does not exist.
        (Choices: present, absent)[Default: present]

- tenant_id
        The tenant ID used for authentication.
        [Default: (null)]
        version_added: 1.5

- tenant_name
        The tenant name used for authentication.
        [Default: (null)]
        version_added: 1.5

- username
        Rackspace username, overrides `credentials'.
        [Default: (null)]

- validate_certs
        Whether or not to require SSL validation of API endpoints.
        (Aliases: verify_ssl)[Default: (null)]
        type: bool
        version_added: 1.5


NOTES:
      * The following environment variables can be used, `RAX_USERNAME', `RAX_API_KEY', `RAX_CREDS_FILE', `RAX_CREDENTIALS',
        `RAX_REGION'.
      * `RAX_CREDENTIALS' and `RAX_CREDS_FILE' points to a credentials file appropriate for pyrax. See
        https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating
      * `RAX_USERNAME' and `RAX_API_KEY' obviate the use of a credentials file
      * `RAX_REGION' defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)


REQUIREMENTS:  python >= 2.6, pyrax

AUTHOR: Ash Wilson (@smashwilson)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Alarm example
  gather_facts: False
  hosts: local
  connection: local
  tasks:
  - name: Ensure that a specific alarm exists.
    rax_mon_alarm:
      credentials: ~/.rax_pub
      state: present
      label: uhoh
      entity_id: "{{ the_entity['entity']['id'] }}"
      check_id: "{{ the_check['check']['id'] }}"
      notification_plan_id: "{{ defcon1['notification_plan']['id'] }}"
      criteria: >
        if (rate(metric['average']) > 10) {
          return new AlarmStatus(WARNING);
        }
        return new AlarmStatus(OK);
    register: the_alarm


