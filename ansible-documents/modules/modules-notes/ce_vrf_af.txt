> CE_VRF_AF    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cloudengine/ce_vrf_af.py)

        Manages VPN instance address family of HUAWEI CloudEngine switches.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- evpn
        Is extend vpn or normal vpn.
        [Default: no]
        type: bool

- route_distinguisher
        VPN instance route distinguisher,the RD used to distinguish same route prefix from different vpn. The RD must be setted before
        setting vpn_target_value.
        [Default: (null)]

- state
        Manage the state of the af.
        (Choices: present, absent)[Default: present]

- vpn_target_state
        Manage the state of the vpn target.
        (Choices: present, absent)[Default: (null)]

- vpn_target_type
        VPN instance vpn target type.
        (Choices: export_extcommunity, import_extcommunity)[Default: (null)]

- vpn_target_value
        VPN instance target value. Such as X.X.X.X:number<0-65535> or number<0-65535>:number<0-4294967295> or
        number<0-65535>.number<0-65535>:number<0-65535> or number<65536-4294967295>:number<0-65535> but not support 0:0 and 0.0:0.
        [Default: (null)]

= vrf
        VPN instance.


- vrf_aftype
        VPN instance address family.
        (Choices: v4, v6)[Default: v4]


NOTES:
      * If `state=absent', the vrf will be removed, regardless of the non-required parameters.


AUTHOR: Yang yang (@QijunPan)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: vrf af module test
  hosts: cloudengine
  connection: local
  gather_facts: no
  vars:
    cli:
      host: "{{ inventory_hostname }}"
      port: "{{ ansible_ssh_port }}"
      username: "{{ username }}"
      password: "{{ password }}"
      transport: cli

  tasks:

  - name: Config vpna, set address family is ipv4
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      state: present
      provider: "{{ cli }}"
  - name: Config vpna, delete address family is ipv4
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      state: absent
      provider: "{{ cli }}"
  - name: Config vpna, set address family is ipv4,rd=1:1,set vpn_target_type=export_extcommunity,vpn_target_value=2:2
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      route_distinguisher: 1:1
      vpn_target_type: export_extcommunity
      vpn_target_value: 2:2
      vpn_target_state: present
      state: present
      provider: "{{ cli }}"
  - name: Config vpna, set address family is ipv4,rd=1:1,delete vpn_target_type=export_extcommunity,vpn_target_value=2:2
    ce_vrf_af:
      vrf: vpna
      vrf_aftype: v4
      route_distinguisher: 1:1
      vpn_target_type: export_extcommunity
      vpn_target_value: 2:2
      vpn_target_state: absent
      state: present
      provider: "{{ cli }}"


RETURN VALUES:

proposed:
    description: k/v pairs of parameters passed into module
    returned: always
    type: dict
    sample: {"vrf": "vpna",
             "vrf_aftype": "v4",
             "state": "present",
             "vpn_targe_state":"absent",
             "evpn": "none",
             "vpn_target_type": "none",
             "vpn_target_value": "none"}
existing:
    description: k/v pairs of existing switchport
    returned: always
    type: dict
    sample:  {
        "route_distinguisher": [
            "1:1",
            "2:2"
        ],
        "vpn_target_type": [],
        "vpn_target_value": [],
        "vrf": "vpna",
        "vrf_aftype": [
            "ipv4uni",
            "ipv6uni"
        ]
    }
end_state:
    description: k/v pairs of switchport after module execution
    returned: always
    type: dict
    sample:  {
        "route_distinguisher": [
            "1:1",
            "2:2"
        ],
        "vpn_target_type": [
            "import_extcommunity",
            "3:3"
        ],
        "vpn_target_value": [],
        "vrf": "vpna",
        "vrf_aftype": [
            "ipv4uni",
            "ipv6uni"
        ]
    }
updates:
    description: command list sent to the device
    returned: always
    type: list
    sample: [
        "ip vpn-instance vpna",
        "vpn-target 3:3 import_extcommunity"
    ]
changed:
    description: check to see if a change was made on the device
    returned: always
    type: bool
    sample: true

