> NOS_COMMAND    (/usr/lib/python2.7/dist-packages/ansible/modules/network/nos/nos_command.py)

        Sends arbitrary commands to a NOS device and returns the results read from the device. This module includes an argument that will
        cause the module to wait for a specific condition before returning or timing out if the condition is not met. This module does
        not support running commands in configuration mode. Please use [nos_config] to configure NOS devices.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= commands
        List of commands to send to the remote NOS device over the configured provider. The resulting output from the command is
        returned. If the `wait_for' argument is provided, the module is not returned until the condition is satisfied or the number of
        retries has expired.


- interval
        Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions,
        the interval indicates how long to wait before trying the command again.
        [Default: 1]

- match
        The `match' argument is used in conjunction with the `wait_for' argument to specify the match policy. Valid values are `all' or
        `any'. If the value is set to `all' then all conditionals in the wait_for must be satisfied. If the value is set to `any' then
        only one of the values must be satisfied.
        (Choices: any, all)[Default: all]

- retries
        Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device
        every retry and evaluated against the `wait_for' conditions.
        [Default: 10]

- wait_for
        List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving
        forward. If the conditional is not true within the configured number of retries, the task fails. See examples.
        [Default: (null)]


NOTES:
      * Tested against NOS 7.2.0
      * If a command sent to the device requires answering a prompt, it is possible to pass a dict containing `command', `answer'
        and `prompt'. See examples.


AUTHOR: Lindsay Hill (@LindsayHill)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

tasks:
  - name: run show version on remote devices
    nos_command:
      commands: show version

  - name: run show version and check to see if output contains NOS
    nos_command:
      commands: show version
      wait_for: result[0] contains NOS

  - name: run multiple commands on remote nodes
    nos_command:
      commands:
        - show version
        - show interfaces

  - name: run multiple commands and evaluate the output
    nos_command:
      commands:
        - show version
        - show interface status
      wait_for:
        - result[0] contains NOS
        - result[1] contains Te
  - name: run command that requires answering a prompt
    nos_command:
      commands:
        - command: 'clear sessions'
          prompt: 'This operation will logout all the user sessions. Do you want to continue (yes/no)?:'
          answer: y


RETURN VALUES:

stdout:
  description: The set of responses from the commands
  returned: always apart from low level errors (such as action plugin)
  type: list
  sample: ['...', '...']
stdout_lines:
  description: The value of stdout split into a list
  returned: always apart from low level errors (such as action plugin)
  type: list
  sample: [['...', '...'], ['...'], ['...']]
failed_conditions:
  description: The list of conditionals that have failed
  returned: failed
  type: list
  sample: ['...', '...']

