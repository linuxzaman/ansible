> ACI_DOMAIN    (/usr/lib/python2.7/dist-packages/ansible/modules/network/aci/aci_domain.py)

        Manage physical, virtual, bridged, routed or FC domain profiles on Cisco ACI fabrics.

  * This module is maintained by an Ansible Partner
OPTIONS (= is mandatory):

- certificate_name
        The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.
        If a `private_key' filename was provided, this defaults to the `private_key' basename, without extension.
        If PEM-formatted content was provided for `private_key', this defaults to the `username' value.
        (Aliases: cert_name)[Default: (null)]
        type: str

- domain
        Name of the physical, virtual, bridged routed or FC domain profile.
        (Aliases: domain_name, domain_profile, name)[Default: (null)]
        type: str

- domain_type
        The type of domain profile.
        `fc': The FC domain profile is a policy pertaining to single FC Management domain
        `l2dom': The external bridged domain profile is a policy for managing L2 bridged infrastructure bridged outside the fabric.
        `l3dom': The external routed domain profile is a policy for managing L3 routed infrastructure outside the fabric.
        `phys': The physical domain profile stores the physical resources and encap resources that should be used for EPGs associated
        with this domain.
        `vmm': The VMM domain profile is a policy for grouping VM controllers with similar networking policy requirements.
        (Aliases: type)(Choices: fc, l2dom, l3dom, phys, vmm)[Default: (null)]
        type: str

- dscp
        The target Differentiated Service (DSCP) value.
        The APIC defaults to `unspecified' when unset during creation.
        (Aliases: target)(Choices: AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, CS0, CS1, CS2, CS3, CS4, CS5,
        CS6, CS7, EF, VA, unspecified)[Default: (null)]
        type: str

- encap_mode
        The layer 2 encapsulation protocol to use with the virtual switch.
        (Choices: unknown, vlan, vxlan)[Default: (null)]
        type: str

= host
        IP Address or hostname of APIC resolvable by Ansible control host.
        (Aliases: hostname)
        type: str

- multicast_address
        The muticast IP address to use for the virtual switch.
        [Default: (null)]
        type: str

- output_level
        Influence the output of this ACI module.
        `normal' means the standard output, incl. `current' dict
        `info' adds informational output, incl. `previous', `proposed' and `sent' dicts
        `debug' adds debugging output, incl. `filter_string', `method', `response', `status' and `url' information
        (Choices: debug, info, normal)[Default: normal]
        type: str

= password
        The password to use for authentication.
        This option is mutual exclusive with `private_key'. If `private_key' is provided too, it will be used instead.

        type: str

- port
        Port number to be used for REST connection.
        The default value depends on parameter `use_ssl'.
        [Default: (null)]
        type: int

= private_key
        Either a PEM-formatted private key file or the private key content used for signature-based authentication.
        This value also influences the default `certificate_name' that is used.
        This option is mutual exclusive with `password'. If `password' is provided too, it will be ignored.
        (Aliases: cert_key)
        type: str

- state
        Use `present' or `absent' for adding or removing.
        Use `query' for listing an object or multiple objects.
        (Choices: absent, present, query)[Default: present]
        type: str

- timeout
        The socket level timeout in seconds.
        [Default: 30]
        type: int

- use_proxy
        If `no', it will not use a proxy, even if one is defined in an environment variable on the target hosts.
        [Default: True]
        type: bool

- use_ssl
        If `no', an HTTP connection will be used instead of the default HTTPS connection.
        [Default: True]
        type: bool

- username
        The username to use for authentication.
        (Aliases: user)[Default: admin]
        type: str

- validate_certs
        If `no', SSL certificates will not be validated.
        This should only set to `no' when used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool

- vm_provider
        The VM platform for VMM Domains.
        Support for Kubernetes was added in ACI v3.0.
        Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.
        (Choices: cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware)[Default: (null)]
        type: str

- vswitch
        The virtual switch to use for vmm domains.
        The APIC defaults to `default' when unset during creation.
        (Choices: avs, default, dvs, unknown)[Default: (null)]
        type: str


SEE ALSO:
      * Module aci_aep_to_domain
           The official documentation on the aci_aep_to_domain module.
           https://docs.ansible.com/ansible/latest/modules/aci_aep_to_domain_module.html
      * Module aci_domain_to_encap_pool
           The official documentation on the aci_domain_to_encap_pool module.
           https://docs.ansible.com/ansible/latest/modules/aci_domain_to_encap_pool_module.html
      * Module aci_domain_to_vlan_pool
           The official documentation on the aci_domain_to_vlan_pool module.
           https://docs.ansible.com/ansible/latest/modules/aci_domain_to_vlan_pool_module.html
      * APIC Management Information Model reference
           More information about the internal APIC classes *phys:DomP*, *vmm:DomP*, *l2ext:DomP*, *l3ext:DomP* and *fc:DomP*
           https://developer.cisco.com/docs/apic-mim-ref/
      * Ansible documentation [aci_guide]
           Detailed information on how to manage your ACI infrastructure using Ansible.
           https://docs.ansible.com/ansible/latest/#stq=aci_guide&stp=1
      * Ansible documentation [aci_dev_guide]
           Detailed guide on how to write your own Cisco ACI modules to contribute.
           https://docs.ansible.com/ansible/latest/#stq=aci_dev_guide&stp=1


AUTHOR: Dag Wieers (@dagwieers)
        METADATA:
          status:
          - preview
          supported_by: certified
        

EXAMPLES:

- name: Add a new physical domain
  aci_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    domain: phys_dom
    domain_type: phys
    state: present

- name: Remove a physical domain
  aci_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    domain: phys_dom
    domain_type: phys
    state: absent

- name: Add a new VMM domain
  aci_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    domain: hyperv_dom
    domain_type: vmm
    vm_provider: microsoft
    state: present
  delegate_to: localhost

- name: Remove a VMM domain
  aci_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    domain: hyperv_dom
    domain_type: vmm
    vm_provider: microsoft
    state: absent
  delegate_to: localhost

- name: Query a specific physical domain
  aci_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    domain: phys_dom
    domain_type: phys
    state: query
  delegate_to: localhost
  register: query_result

- name: Query all domains
  aci_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    domain_type: phys
    state: query
  delegate_to: localhost
  register: query_result


RETURN VALUES:

current:
  description: The existing configuration from the APIC after the module has finished
  returned: success
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production environment",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
error:
  description: The error information as returned from the APIC
  returned: failure
  type: dict
  sample:
    {
        "code": "122",
        "text": "unknown managed object class foo"
    }
raw:
  description: The raw output returned by the APIC REST API (xml or json)
  returned: parse error
  type: str
  sample: '<?xml version="1.0" encoding="UTF-8"?><imdata totalCount="1"><error code="122" text="unknown managed object class foo"/></imdata>'
sent:
  description: The actual/minimal configuration pushed to the APIC
  returned: info
  type: list
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment"
            }
        }
    }
previous:
  description: The original configuration from the APIC before the module has started
  returned: info
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
proposed:
  description: The assembled configuration from the user-provided parameters
  returned: info
  type: dict
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment",
                "name": "production"
            }
        }
    }
filter_string:
  description: The filter string used for the request
  returned: failure or debug
  type: str
  sample: ?rsp-prop-include=config-only
method:
  description: The HTTP method used for the request to the APIC
  returned: failure or debug
  type: str
  sample: POST
response:
  description: The HTTP response from the APIC
  returned: failure or debug
  type: str
  sample: OK (30 bytes)
status:
  description: The HTTP status from the APIC
  returned: failure or debug
  type: int
  sample: 200
url:
  description: The HTTP url used for the request to the APIC
  returned: failure or debug
  type: str
  sample: https://10.11.12.13/api/mo/uni/tn-production.json

