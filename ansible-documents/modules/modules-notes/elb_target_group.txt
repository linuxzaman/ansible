> ELB_TARGET_GROUP    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/elb_target_group.py)

        Manage an AWS Elastic Load Balancer target group. See https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-
        balancer-target-groups.html or https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html
        for details.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- aws_access_key
        AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is
        used.
        (Aliases: ec2_access_key, access_key)[Default: (null)]
        type: str

- aws_secret_key
        AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is
        used.
        (Aliases: ec2_secret_key, secret_key)[Default: (null)]
        type: str

- debug_botocore_endpoint_logs
        Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing
        the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during
        a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
        [Default: no]
        type: bool
        version_added: 2.8

- deregistration_delay_timeout
        The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused.
        The range is 0-3600 seconds.
        [Default: (null)]

- ec2_url
        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where
        region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL
        environment variable, if any, is used.
        [Default: (null)]
        type: str

- health_check_interval
        The approximate amount of time, in seconds, between health checks of an individual target.
        [Default: (null)]

- health_check_path
        The ping path that is the destination on the targets for health checks. The path must be defined in order to set a health check.
        [Default: (null)]

- health_check_port
        The port the load balancer uses when performing health checks on targets. Can be set to 'traffic-port' to match target port.
        [Default: The port on which each target receives traffic from the load balancer.]

- health_check_protocol
        The protocol the load balancer uses when performing health checks on targets.
        (Choices: http, https, tcp)[Default: (null)]

- health_check_timeout
        The amount of time, in seconds, during which no response from a target means a failed health check.
        [Default: (null)]

- healthy_threshold_count
        The number of consecutive health checks successes required before considering an unhealthy target healthy.
        [Default: (null)]

- modify_targets
        Whether or not to alter existing targets in the group to match what is passed with the module
        [Default: True]
        type: bool

= name
        The name of the target group.


- port
        The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target.
        Required if `state' is `present'.
        [Default: (null)]

- profile
        Uses a boto profile. Only works with boto >= 2.24.0.
        [Default: (null)]
        type: str
        version_added: 1.6

- protocol
        The protocol to use for routing traffic to the targets. Required when `state' is `present'.
        (Choices: http, https, tcp)[Default: (null)]

- purge_tags
        If yes, existing tags will be purged from the resource to match exactly what is defined by `tags' parameter. If the tag parameter
        is not set then tags will not be modified.
        [Default: True]
        type: bool

- region
        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
        (Aliases: aws_region, ec2_region)[Default: (null)]
        type: str

- security_token
        AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
        (Aliases: access_token)[Default: (null)]
        type: str
        version_added: 1.6

= state
        Create or destroy the target group.
        (Choices: present, absent)

- stickiness_enabled
        Indicates whether sticky sessions are enabled.
        [Default: (null)]
        type: bool

- stickiness_lb_cookie_duration
        The time period, in seconds, during which requests from a client should be routed to the same target. After this time period
        expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds).
        [Default: (null)]

- stickiness_type
        The type of sticky sessions. The possible value is lb_cookie.
        [Default: lb_cookie]

- successful_response_codes
        The HTTP codes to use when checking for a successful response from a target.
        Accepts multiple values (for example, "200,202") or a range of         values (for example, "200-299").
        Requires the `health_check_protocol' parameter to be set.
        [Default: (null)]

- tags
        A dictionary of one or more tags to assign to the target group.
        [Default: (null)]

- target_type
        The type of target that you must specify when registering targets with this target group. The possible values are `instance'
        (targets are specified by instance ID) or `ip' (targets are specified by IP address). Note that you can't specify targets for a
        target group using both instance IDs and IP addresses. If the target type is ip, specify IP addresses from the subnets of the
        virtual private cloud (VPC) for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC
        6598 range (100.64.0.0/10). You can't specify publicly routable IP addresses.
        (Choices: instance, ip)[Default: instance]
        version_added: 2.5
        

- targets
        A list of targets to assign to the target group. This parameter defaults to an empty list. Unless you set the 'modify_targets'
        parameter then all existing targets will be removed from the group. The list should be an Id and a Port parameter. See the
        Examples for detail.
        [Default: (null)]

- unhealthy_threshold_count
        The number of consecutive health check failures required before considering a target unhealthy.
        [Default: (null)]

- validate_certs
        When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        [Default: True]
        type: bool
        version_added: 1.5

- vpc_id
        The identifier of the virtual private cloud (VPC). Required when `state' is `present'.
        [Default: (null)]

- wait
        Whether or not to wait for the target group.
        [Default: False]
        type: bool
        version_added: 2.4

- wait_timeout
        The time to wait for the target group.
        [Default: 200]
        version_added: 2.4


NOTES:
      * Once a target group has been created, only its health check can then be modified using subsequent calls
      * If parameters are not set within the module, the following environment variables can be used in decreasing order of
        precedence `AWS_URL' or `EC2_URL', `AWS_ACCESS_KEY_ID' or `AWS_ACCESS_KEY' or `EC2_ACCESS_KEY', `AWS_SECRET_ACCESS_KEY' or
        `AWS_SECRET_KEY' or `EC2_SECRET_KEY', `AWS_SECURITY_TOKEN' or `EC2_SECURITY_TOKEN', `AWS_REGION' or `EC2_REGION'
      * Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See
        https://boto.readthedocs.io/en/latest/boto_config_tut.html
      * `AWS_REGION' or `EC2_REGION' can be typically be used to specify the AWS region, when required, but this can also be
        configured in the boto config file


REQUIREMENTS:  boto, boto3, python >= 2.6

AUTHOR: Rob White (@wimnat)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Note: These examples do not set authentication details, see the AWS Guide for details.

# Create a target group with a default health check
- elb_target_group:
    name: mytargetgroup
    protocol: http
    port: 80
    vpc_id: vpc-01234567
    state: present

# Modify the target group with a custom health check
- elb_target_group:
    name: mytargetgroup
    protocol: http
    port: 80
    vpc_id: vpc-01234567
    health_check_path: /
    successful_response_codes: "200,250-260"
    state: present

# Delete a target group
- elb_target_group:
    name: mytargetgroup
    state: absent

# Create a target group with instance targets
- elb_target_group:
    name: mytargetgroup
    protocol: http
    port: 81
    vpc_id: vpc-01234567
    health_check_path: /
    successful_response_codes: "200,250-260"
    targets:
      - Id: i-01234567
        Port: 80
      - Id: i-98765432
        Port: 80
    state: present
    wait_timeout: 200
    wait: True

# Create a target group with IP address targets
- elb_target_group:
    name: mytargetgroup
    protocol: http
    port: 81
    vpc_id: vpc-01234567
    health_check_path: /
    successful_response_codes: "200,250-260"
    target_type: ip
    targets:
      - Id: 10.0.0.10
        Port: 80
        AvailabilityZone: all
      - Id: 10.0.0.20
        Port: 80
    state: present
    wait_timeout: 200
    wait: True


RETURN VALUES:

deregistration_delay_timeout_seconds:
    description: The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused.
    returned: when state present
    type: int
    sample: 300
health_check_interval_seconds:
    description: The approximate amount of time, in seconds, between health checks of an individual target.
    returned: when state present
    type: int
    sample: 30
health_check_path:
    description: The destination for the health check request.
    returned: when state present
    type: str
    sample: /index.html
health_check_port:
    description: The port to use to connect with the target.
    returned: when state present
    type: str
    sample: traffic-port
health_check_protocol:
    description: The protocol to use to connect with the target.
    returned: when state present
    type: str
    sample: HTTP
health_check_timeout_seconds:
    description: The amount of time, in seconds, during which no response means a failed health check.
    returned: when state present
    type: int
    sample: 5
healthy_threshold_count:
    description: The number of consecutive health checks successes required before considering an unhealthy target healthy.
    returned: when state present
    type: int
    sample: 5
load_balancer_arns:
    description: The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.
    returned: when state present
    type: list
    sample: []
matcher:
    description: The HTTP codes to use when checking for a successful response from a target.
    returned: when state present
    type: dict
    sample: {
        "http_code": "200"
    }
port:
    description: The port on which the targets are listening.
    returned: when state present
    type: int
    sample: 80
protocol:
    description: The protocol to use for routing traffic to the targets.
    returned: when state present
    type: str
    sample: HTTP
stickiness_enabled:
    description: Indicates whether sticky sessions are enabled.
    returned: when state present
    type: bool
    sample: true
stickiness_lb_cookie_duration_seconds:
    description: The time period, in seconds, during which requests from a client should be routed to the same target.
    returned: when state present
    type: int
    sample: 86400
stickiness_type:
    description: The type of sticky sessions.
    returned: when state present
    type: str
    sample: lb_cookie
tags:
    description: The tags attached to the target group.
    returned: when state present
    type: dict
    sample: "{
        'Tag': 'Example'
    }"
target_group_arn:
    description: The Amazon Resource Name (ARN) of the target group.
    returned: when state present
    type: str
    sample: "arn:aws:elasticloadbalancing:ap-southeast-2:01234567890:targetgroup/mytargetgroup/aabbccddee0044332211"
target_group_name:
    description: The name of the target group.
    returned: when state present
    type: str
    sample: mytargetgroup
unhealthy_threshold_count:
    description: The number of consecutive health check failures required before considering the target unhealthy.
    returned: when state present
    type: int
    sample: 2
vpc_id:
    description: The ID of the VPC for the targets.
    returned: when state present
    type: str
    sample: vpc-0123456

