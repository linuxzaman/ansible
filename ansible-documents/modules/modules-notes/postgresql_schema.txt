> POSTGRESQL_SCHEMA    (/usr/lib/python2.7/dist-packages/ansible/modules/database/postgresql/postgresql_schema.py)

        Add or remove PostgreSQL schema.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- ca_cert
        Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
        If the file exists, the server's certificate will be verified to be signed by one of these authorities.
        (Aliases: ssl_rootcert)[Default: (null)]
        type: str
        version_added: 2.8

- cascade_drop
        Drop schema with CASCADE to remove child objects.
        [Default: False]
        type: bool
        version_added: 2.8

- database
        Name of the database to connect to and add or remove the schema.
        (Aliases: db, login_db)[Default: postgres]
        type: str

- login_host
        Host running the database.
        [Default: (null)]
        type: str

- login_password
        The password used to authenticate with.
        [Default: (null)]
        type: str

- login_unix_socket
        Path to a Unix domain socket for local connections.
        [Default: (null)]
        type: str

- login_user
        The username used to authenticate with.
        [Default: postgres]
        type: str

= name
        Name of the schema to add or remove.
        (Aliases: schema)
        type: str

- owner
        Name of the role to set as owner of the schema.
        [Default: (null)]
        type: str

- port
        Database port to connect to.
        (Aliases: login_port)[Default: 5432]
        type: int

- session_role
        Switch to session_role after connecting.
        The specified session_role must be a role that the current login_user is a member of.
        Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.
        [Default: (null)]
        type: str
        version_added: 2.8

- ssl_mode
        Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
        See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
        Default of `prefer' matches libpq default.
        (Choices: allow, disable, prefer, require, verify-ca, verify-full)[Default: prefer]
        type: str
        version_added: 2.8

- state
        The schema state.
        (Choices: absent, present)[Default: present]
        type: str


NOTES:
      * This module uses `psycopg2', a Python PostgreSQL database adapter.
      * You must ensure that psycopg2 is installed on the host before using this module.
      * If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the
        remote host.
      * For Ubuntu-based systems, install the `postgresql', `libpq-dev', and `python-psycopg2' packages on the remote host before
        using this module.
      * The default authentication assumes that you are either logging in as or sudo'ing to the `postgres' account on the host.
      * This module uses `psycopg2', a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module. If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must
        also be installed on the remote host. For Ubuntu-based systems, install the `postgresql', `libpq-dev', and `python-
        psycopg2' packages on the remote host before using this module.
      * The ca_cert parameter requires at least Postgres version 8.4 and `psycopg2' version 2.4.3.


REQUIREMENTS:  psycopg2

AUTHOR: Flavien Chantelot (@Dorn-) <contact@flavien.io>, Thomas O'Donnell (@andytom)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a new schema with name acme in test database
  postgresql_schema:
    db: test
    name: acme

- name: Create a new schema acme with a user bob who will own it
  postgresql_schema:
    name: acme
    owner: bob

- name: Drop schema "acme" with cascade
  postgresql_schema:
    name: acme
    state: absent
    cascade_drop: yes


RETURN VALUES:

schema:
  description: Name of the schema.
  returned: success, changed
  type: str
  sample: "acme"
queries:
  description: List of executed queries.
  returned: always
  type: list
  sample: ["CREATE SCHEMA \"acme\""]

