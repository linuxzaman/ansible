> DOCKER_PRUNE    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/docker/docker_prune.py)

        Allows to run `docker container prune', `docker image prune', `docker network prune' and `docker volume prune' via the Docker
        API.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_version
        The version of the Docker API running on the Docker Host.
        Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.
        If the value is not specified in the task, the value of environment variable `DOCKER_API_VERSION' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_api_version)[Default: auto]
        type: str

- builder_cache
        Whether to prune the builder cache.
        Requires version 3.3.0 of the Docker SDK for Python or newer.
        [Default: False]
        type: bool

- ca_cert
        Use a CA certificate when performing server verification by providing the path to a CA certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `ca.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_ca_cert, cacert_path)[Default: (null)]
        type: path

- client_cert
        Path to the client's TLS certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `cert.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_cert, cert_path)[Default: (null)]
        type: path

- client_key
        Path to the client's TLS key file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `key.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_key, key_path)[Default: (null)]
        type: path

- containers
        Whether to prune containers.
        [Default: False]
        type: bool

- containers_filters
        A dictionary of filter values used for selecting containers to delete.
        For example, `until: 24h'.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/container_prune/#filtering) for more
        information on possible filters.
        [Default: (null)]
        type: dict

- debug
        Debug mode
        [Default: False]
        type: bool

- docker_host
        The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string.
        For example, `tcp://192.0.2.23:2376'. If TLS is used to encrypt the connection, the module will automatically replace `tcp' in
        the connection URL with `https'.
        If the value is not specified in the task, the value of environment variable `DOCKER_HOST' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_url)[Default: unix://var/run/docker.sock]
        type: str

- images
        Whether to prune images.
        [Default: False]
        type: bool

- images_filters
        A dictionary of filter values used for selecting images to delete.
        For example, `dangling: true'.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/image_prune/#filtering) for more information
        on possible filters.
        [Default: (null)]
        type: dict

- networks
        Whether to prune networks.
        [Default: False]
        type: bool

- networks_filters
        A dictionary of filter values used for selecting networks to delete.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/network_prune/#filtering) for more
        information on possible filters.
        [Default: (null)]
        type: dict

- ssl_version
        Provide a valid SSL version number. Default value determined by ssl.py module.
        If the value is not specified in the task, the value of environment variable `DOCKER_SSL_VERSION' will be used instead.
        [Default: (null)]
        type: str

- timeout
        The maximum amount of time in seconds to wait on a response from the API.
        If the value is not specified in the task, the value of environment variable `DOCKER_TIMEOUT' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: 60]
        type: int

- tls
        Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if
        `tls_verify' is set to `yes' as well, it will take precedence.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: False]
        type: bool

- tls_hostname
        When verifying the authenticity of the Docker Host server, provide the expected name of the server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_HOSTNAME' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: localhost]
        type: str

- validate_certs
        Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_VERIFY' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: tls_verify)[Default: False]
        type: bool

- volumes
        Whether to prune volumes.
        [Default: False]
        type: bool

- volumes_filters
        A dictionary of filter values used for selecting volumes to delete.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/volume_prune/#filtering) for more information
        on possible filters.
        [Default: (null)]
        type: dict


NOTES:
      * Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define
        `DOCKER_HOST', `DOCKER_TLS_HOSTNAME', `DOCKER_API_VERSION', `DOCKER_CERT_PATH', `DOCKER_SSL_VERSION', `DOCKER_TLS',
        `DOCKER_TLS_VERIFY' and `DOCKER_TIMEOUT'. If you are using docker machine, run the script shipped with the product that
        sets up the environment. It will set these variables for you. See https://docker-py.readthedocs.io/en/stable/machine/ for
        more details.
      * When connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for
        Python, version 2.4 or newer, this can be done by installing `docker[tls]' with [pip].
      * Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In
        general, it will use `$HOME/.docker/config.json' if the `DOCKER_CONFIG' environment variable is not specified, and use
        `$DOCKER_CONFIG/config.json' otherwise.


REQUIREMENTS:  Docker API >= 1.25, Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python
        module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker
        /docker-py/issues/1310) for details). This module does `not' work with docker-py., L(Docker SDK for Python,https
        ://docker-py.readthedocs.io/en/stable/) >= 2.1.0, Python >= 2.7

AUTHOR: Felix Fontein (@felixfontein)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Prune containers older than 24h
  docker_prune:
    containers: yes
    containers_filters:
      # only consider containers created more than 24 hours ago
      until: 24h

- name: Prune everything
  docker_prune:
    containers: yes
    images: yes
    networks: yes
    volumes: yes
    builder_cache: yes

- name: Prune everything (including non-dangling images)
  docker_prune:
    containers: yes
    images: yes
    images_filters:
      dangling: false
    networks: yes
    volumes: yes
    builder_cache: yes


RETURN VALUES:

# containers
containers:
    description:
      - List of IDs of deleted containers.
    returned: C(containers) is C(true)
    type: list
    sample: '[]'
containers_space_reclaimed:
    description:
      - Amount of reclaimed disk space from container pruning in bytes.
    returned: C(containers) is C(true)
    type: int
    sample: '0'

# images
images:
    description:
      - List of IDs of deleted images.
    returned: C(images) is C(true)
    type: list
    sample: '[]'
images_space_reclaimed:
    description:
      - Amount of reclaimed disk space from image pruning in bytes.
    returned: C(images) is C(true)
    type: int
    sample: '0'

# networks
networks:
    description:
      - List of IDs of deleted networks.
    returned: C(networks) is C(true)
    type: list
    sample: '[]'

# volumes
volumes:
    description:
      - List of IDs of deleted volumes.
    returned: C(volumes) is C(true)
    type: list
    sample: '[]'
volumes_space_reclaimed:
    description:
      - Amount of reclaimed disk space from volumes pruning in bytes.
    returned: C(volumes) is C(true)
    type: int
    sample: '0'

# builder_cache
builder_cache_space_reclaimed:
    description:
      - Amount of reclaimed disk space from builder cache pruning in bytes.
    returned: C(builder_cache) is C(true)
    type: int
    sample: '0'

