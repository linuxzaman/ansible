> OS_ROUTER    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/openstack/os_router.py)

        Create or Delete routers from OpenStack. Although Neutron allows routers to share the same name, this module enforces name
        uniqueness to be more user friendly.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- admin_state_up
        Desired admin state of the created or existing router.
        [Default: yes]
        type: bool

- api_timeout
        How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be passed to the requests
        library.
        [Default: (null)]
        type: int

- auth
        Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default `password' plugin, this
        would contain `auth_url', `username', `password', `project_name' and any information about domains (for example,
        `os_user_domain_name' or `os_project_domain_name') if the cloud supports them. For other plugins, this param will need to contain
        whatever parameters that auth plugin requires. This parameter is not needed if a named cloud is provided or OpenStack OS_*
        environment variables are present.
        [Default: (null)]
        type: dict

- auth_type
        Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the plugin should be
        indicated here and the contents of the `auth' parameter should be updated accordingly.
        [Default: (null)]
        type: str

- availability_zone
        Ignored. Present for backwards compatibility
        [Default: (null)]

- ca_cert
        A path to a CA Cert bundle that can be used as part of verifying SSL API requests.
        (Aliases: cacert)[Default: (null)]
        type: str

- client_cert
        A path to a client certificate to use as part of the SSL transaction.
        (Aliases: cert)[Default: (null)]
        type: str

- client_key
        A path to a client key to use as part of the SSL transaction.
        (Aliases: key)[Default: (null)]
        type: str

- cloud
        Named cloud or cloud config to operate against. If `cloud' is a string, it references a named cloud config as defined in an
        OpenStack clouds.yaml file. Provides default values for `auth' and `auth_type'. This parameter is not needed if `auth' is
        provided or if OpenStack OS_* environment variables are present. If `cloud' is a dict, it contains a complete cloud configuration
        like would be in a section of clouds.yaml.
        [Default: (null)]
        type: raw

- enable_snat
        Enable Source NAT (SNAT) attribute.
        [Default: (null)]
        type: bool

- external_fixed_ips
        The IP address parameters for the external gateway network. Each is a dictionary with the subnet name or ID (subnet) and the IP
        address to assign on the subnet (ip). If no IP is specified, one is automatically assigned from that subnet.
        [Default: (null)]

- interface
        Endpoint URL type to fetch from the service catalog.
        (Aliases: endpoint_type)(Choices: admin, internal, public)[Default: public]
        type: str
        version_added: 2.3

- interfaces
        List of subnets to attach to the router internal interface. Default gateway associated with the subnet will be automatically
        attached with the router's internal interface. In order to provide an ip address different from the default gateway,parameters
        are passed as dictionary with keys as network name or ID(net), subnet name or ID (subnet) and the IP of port (portip) from the
        network. User defined portip is often required when a multiple router need to be connected to a single subnet for which the
        default gateway has been already used.
        [Default: (null)]

= name
        Name to be give to the router


- network
        Unique name or ID of the external gateway network.
        required `interfaces' or `enable_snat' are provided.
        [Default: (null)]

- project
        Unique name or ID of the project.
        [Default: (null)]
        version_added: 2.2

- region_name
        Name of the region.
        [Default: (null)]
        type: str

- state
        Indicate desired state of the resource
        (Choices: present, absent)[Default: present]

- timeout
        How long should ansible wait for the requested resource.
        [Default: 180]
        type: int

- validate_certs
        Whether or not SSL API requests should be verified.
        Before Ansible 2.3 this defaulted to `yes'.
        (Aliases: verify)[Default: False]
        type: bool

- wait
        Should ansible wait until the requested resource is complete.
        [Default: True]
        type: bool


NOTES:
      * The standard OpenStack environment variables, such as `OS_USERNAME' may be used instead of providing explicit values.
      * Auth information is driven by openstacksdk, which means that values can come from a yaml config file in
        /etc/ansible/openstack.yaml, /etc/openstack/clouds.yaml or ~/.config/openstack/clouds.yaml, then from standard environment
        variables, then finally by explicit parameters in plays. More information can be found at
        https://docs.openstack.org/openstacksdk/


REQUIREMENTS:  openstacksdk, python >= 2.7

AUTHOR: David Shrewsbury (@Shrews)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Create a simple router, not attached to a gateway or subnets.
- os_router:
    cloud: mycloud
    state: present
    name: simple_router

# Create a simple router, not attached to a gateway or subnets for a given project.
- os_router:
    cloud: mycloud
    state: present
    name: simple_router
    project: myproj

# Creates a router attached to ext_network1 on an IPv4 subnet and one
# internal subnet interface.
- os_router:
    cloud: mycloud
    state: present
    name: router1
    network: ext_network1
    external_fixed_ips:
      - subnet: public-subnet
        ip: 172.24.4.2
    interfaces:
      - private-subnet

# Create another router with two internal subnet interfaces.One with user defined port
# ip and another with default gateway.
- os_router:
    cloud: mycloud
    state: present
    name: router2
    network: ext_network1
    interfaces:
      - net: private-net
        subnet: private-subnet
        portip: 10.1.1.10
      - project-subnet

# Create another router with two internal subnet interface.One with user defined port
# ip and and another with default gateway.
- os_router:
    cloud: mycloud
    state: present
    name: router2
    network: ext_network1
    interfaces:
      - net: private-net
        subnet: private-subnet
        portip: 10.1.1.10
      - project-subnet

# Create another router with two internal subnet interface. one with  user defined port
# ip and and another  with default gateway.
- os_router:
    cloud: mycloud
    state: present
    name: router2
    network: ext_network1
    interfaces:
      - net: private-net
        subnet: private-subnet
        portip: 10.1.1.10
      - project-subnet

# Update existing router1 external gateway to include the IPv6 subnet.
# Note that since 'interfaces' is not provided, any existing internal
# interfaces on an existing router will be left intact.
- os_router:
    cloud: mycloud
    state: present
    name: router1
    network: ext_network1
    external_fixed_ips:
      - subnet: public-subnet
        ip: 172.24.4.2
      - subnet: ipv6-public-subnet
        ip: 2001:db8::3

# Delete router1
- os_router:
    cloud: mycloud
    state: absent
    name: router1


RETURN VALUES:

router:
    description: Dictionary describing the router.
    returned: On success when I(state) is 'present'
    type: complex
    contains:
        id:
            description: Router ID.
            type: str
            sample: "474acfe5-be34-494c-b339-50f06aa143e4"
        name:
            description: Router name.
            type: str
            sample: "router1"
        admin_state_up:
            description: Administrative state of the router.
            type: bool
            sample: true
        status:
            description: The router status.
            type: str
            sample: "ACTIVE"
        tenant_id:
            description: The tenant ID.
            type: str
            sample: "861174b82b43463c9edc5202aadc60ef"
        external_gateway_info:
            description: The external gateway parameters.
            type: dict
            sample: {
                      "enable_snat": true,
                      "external_fixed_ips": [
                         {
                           "ip_address": "10.6.6.99",
                           "subnet_id": "4272cb52-a456-4c20-8f3c-c26024ecfa81"
                         }
                       ]
                    }
        routes:
            description: The extra routes configuration for L3 router.
            type: list

