> UNARCHIVE    (/usr/lib/python2.7/dist-packages/ansible/modules/files/unarchive.py)

        The `unarchive' module unpacks an archive. By default, it will copy the source file from the local system to the target before
        unpacking. Set `remote_src=yes' to unpack an archive which already exists on the target. If checksum validation is desired, use
        [get_url] or [uri] instead to fetch the file and set `remote_src=yes'. For Windows targets, use the [win_unzip] module instead.

  * This module is maintained by The Ansible Core Team
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- attributes
        The attributes the resulting file or directory should have.
        To get supported flags look at the man page for `chattr' on the target system.
        This string should contain the attributes in the same order as the one displayed by `lsattr'.
        The `=' operator is assumed as default, otherwise `+' or `-' operators need to be included in the string.
        (Aliases: attr)[Default: (null)]
        type: str
        version_added: 2.3

- copy
        If true, the file is copied from local 'master' to the target machine, otherwise, the plugin will look for src archive at the
        target machine.
        This option has been deprecated in favor of `remote_src'.
        This option is mutually exclusive with `remote_src'.
        [Default: True]
        type: bool

- creates
        If the specified absolute path (file or directory) already exists, this step will *not* be run.
        [Default: (null)]
        type: path
        version_added: 1.6

- decrypt
        This option controls the autodecryption of source files using vault.
        [Default: True]
        type: bool
        version_added: 2.4

= dest
        Remote absolute path where the archive should be unpacked.

        type: path

- exclude
        List the directory and file entries that you would like to exclude from the unarchive action.
        [Default: (null)]
        type: list
        version_added: 2.1

- extra_opts
        Specify additional options by passing in an array.
        [Default: ]
        type: list
        version_added: 2.1

- group
        Name of the group that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

- keep_newer
        Do not replace existing files that are newer than files from the archive.
        [Default: False]
        type: bool
        version_added: 2.1

- list_files
        If set to True, return the list of files that are contained in the tarball.
        [Default: False]
        type: bool
        version_added: 2.0

- mode
        The permissions the resulting file or directory should have.
        For those used to `/usr/bin/chmod' remember that modes are actually octal numbers. You must either add a leading zero so that
        Ansible's YAML parser knows it is an octal number (like `0644' or `01777') or quote it (like `'644'' or `'1777'') so Ansible
        receives a string and can do its own conversion from string into number.
        Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected
        results.
        As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
        As of Ansible 2.6, the mode may also be the special string `preserve'.
        When set to `preserve' the file will be given the same permissions as the source file.
        [Default: (null)]
        type: str

- owner
        Name of the user that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

- remote_src
        Set to `yes' to indicate the archived file is already on the remote system and not local to the Ansible controller.
        This option is mutually exclusive with `copy'.
        [Default: False]
        type: bool
        version_added: 2.2

- selevel
        The level part of the SELinux file context.
        This is the MLS/MCS attribute, sometimes known as the `range'.
        When set to `_default', it will use the `level' portion of the policy if available.
        [Default: s0]
        type: str

- serole
        The role part of the SELinux file context.
        When set to `_default', it will use the `role' portion of the policy if available.
        [Default: (null)]
        type: str

- setype
        The type part of the SELinux file context.
        When set to `_default', it will use the `type' portion of the policy if available.
        [Default: (null)]
        type: str

- seuser
        The user part of the SELinux file context.
        By default it uses the `system' policy, where applicable.
        When set to `_default', it will use the `user' portion of the policy if available.
        [Default: (null)]
        type: str

= src
        If `remote_src=no' (default), local path to archive file to copy to the target server; can be absolute or relative. If
        `remote_src=yes', path on the target server to existing archive file to unpack.
        If `remote_src=yes' and `src' contains `://', the remote machine will download the file from the URL first. (version_added 2.0).
        This is only for simple cases, for full download support use the [get_url] module.

        type: path

- unsafe_writes
        Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.
        By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but
        sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be
        updated atomically from inside the container and can only be written in an unsafe manner.
        This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't
        force Ansible to perform unsafe writes).
        IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
        [Default: False]
        type: bool
        version_added: 2.2

- validate_certs
        This only applies if using a https URL as the source of the file.
        This should only set to `no' used on personally controlled sites using self-signed certificate.
        Prior to 2.2 the code worked as if this was set to `yes'.
        [Default: True]
        type: bool
        version_added: 2.2


NOTES:
      * Requires `gtar'/`unzip' command on target host.
      * Can handle `.zip' files using `unzip' as well as `.tar', `.tar.gz', `.tar.bz2' and `.tar.xz' files using `gtar'.
      * Uses gtar's `--diff' arg to calculate if changed or not. If this `arg' is not supported, it will always unpack the archive.
      * Existing files/directories in the destination which are not in the archive are not touched. This is the same behavior as a
        normal archive extraction.
      * Existing files/directories in the destination which are not in the archive are ignored for purposes of deciding if the
        archive should be unpacked or not.


SEE ALSO:
      * Module archive
           The official documentation on the archive module.
           https://docs.ansible.com/ansible/latest/modules/archive_module.html
      * Module iso_extract
           The official documentation on the iso_extract module.
           https://docs.ansible.com/ansible/latest/modules/iso_extract_module.html
      * Module win_unzip
           The official documentation on the win_unzip module.
           https://docs.ansible.com/ansible/latest/modules/win_unzip_module.html


AUTHOR: Michael DeHaan
        METADATA:
          status:
          - preview
          supported_by: core
        
TODO: Re-implement tar support using native tarfile module., Re-implement zip support using native zipfile module.

EXAMPLES:

- name: Extract foo.tgz into /var/lib/foo
  unarchive:
    src: foo.tgz
    dest: /var/lib/foo

- name: Unarchive a file that is already on the remote machine
  unarchive:
    src: /tmp/foo.zip
    dest: /usr/local/bin
    remote_src: yes

- name: Unarchive a file that needs to be downloaded (added in 2.0)
  unarchive:
    src: https://example.com/example.zip
    dest: /usr/local/bin
    remote_src: yes

- name: Unarchive a file with extra options
  unarchive:
    src: /tmp/foo.zip
    dest: /usr/local/bin
    extra_opts:
    - --transform
    - s/^xxx/yyy/


