> WIN_REBOOT    (/usr/lib/python2.7/dist-packages/ansible/modules/windows/win_reboot.py)

        Reboot a Windows machine, wait for it to go down, come back up, and respond to commands. For non-Windows targets, use the
        [reboot] module instead.

  * This module is maintained by The Ansible Core Team
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- connect_timeout
        Maximum seconds to wait for a single successful TCP connection to the WinRM endpoint before trying again.
        (Aliases: connect_timeout_sec)[Default: 5]
        type: int

- msg
        Message to display to users.
        [Default: Reboot initiated by Ansible]
        type: str

- post_reboot_delay
        Seconds to wait after the reboot command was successful before attempting to validate the system rebooted successfully.
        This is useful if you want wait for something to settle despite your connection already working.
        (Aliases: post_reboot_delay_sec)[Default: 0]
        type: int
        version_added: 2.4

- pre_reboot_delay
        Seconds to wait before reboot. Passed as a parameter to the reboot command.
        (Aliases: pre_reboot_delay_sec)[Default: 2]
        type: int

- reboot_timeout
        Maximum seconds to wait for machine to re-appear on the network and respond to a test command.
        This timeout is evaluated separately for both reboot verification and test command success so maximum clock time is actually
        twice this value.
        (Aliases: reboot_timeout_sec)[Default: 600]
        type: int

- shutdown_timeout
        Maximum seconds to wait for shutdown to occur.
        Increase this timeout for very slow hardware, large update applications, etc.
        This option has been removed since Ansible 2.5 as the win_reboot behavior has changed.
        (Aliases: shutdown_timeout_sec)[Default: 600]
        type: int

- test_command
        Command to expect success for to determine the machine is ready for management.
        [Default: whoami]
        type: str


NOTES:
      * If a shutdown was already scheduled on the system, `win_reboot' will abort the scheduled shutdown and enforce its own
        shutdown.
      * Beware that when `win_reboot' returns, the Windows system may not have settled yet and some base services could be in
        limbo. This can result in unexpected behavior. Check the examples for ways to mitigate this.
      * The connection user must have the `SeRemoteShutdownPrivilege' privilege enabled, see https://docs.microsoft.com/en-
        us/windows/security/threat-protection/security-policy-settings/force-shutdown-from-a-remote-system for more information.


SEE ALSO:
      * Module reboot
           The official documentation on the reboot module.
           https://docs.ansible.com/ansible/latest/modules/reboot_module.html


AUTHOR: Matt Davis (@nitzmahone)
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:

- name: Reboot the machine with all defaults
  win_reboot:

- name: Reboot a slow machine that might have lots of updates to apply
  win_reboot:
    reboot_timeout: 3600

# Install a Windows feature and reboot if necessary
- name: Install IIS Web-Server
  win_feature:
    name: Web-Server
  register: iis_install

- name: Reboot when Web-Server feature requires it
  win_reboot:
  when: iis_install.reboot_required

# One way to ensure the system is reliable, is to set WinRM to a delayed startup
- name: Ensure WinRM starts when the system has settled and is ready to work reliably
  win_service:
    name: WinRM
    start_mode: delayed


# Additionally, you can add a delay before running the next task
- name: Reboot a machine that takes time to settle after being booted
  win_reboot:
    post_reboot_delay: 120

# Or you can make win_reboot validate exactly what you need to work before running the next task
- name: Validate that the netlogon service has started, before running the next task
  win_reboot:
    test_command: 'exit (Get-Service -Name Netlogon).Status -ne "Running"'


RETURN VALUES:

rebooted:
  description: True if the machine was rebooted.
  returned: always
  type: bool
  sample: true
elapsed:
  description: The number of seconds that elapsed waiting for the system to be rebooted.
  returned: always
  type: float
  sample: 23.2

