> DIGITAL_OCEAN_DOMAIN    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/digital_ocean/digital_ocean_domain.py)

        Create/delete a DNS domain in DigitalOcean.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- id
        Numeric, the droplet id you want to operate on.
        (Aliases: droplet_id)[Default: (null)]

- ip
        An 'A' record for '@' ($ORIGIN) will be created with the value 'ip'.  'ip' is an IP version 4 address.
        [Default: (null)]

- name
        String, this is the name of the droplet - must be formatted by hostname rules, or the name of a SSH key, or the name of a domain.
        [Default: (null)]

- oauth_token
        DigitalOcean OAuth token.
        There are several other environment variables which can be used to provide this value.
        i.e., - 'DO_API_TOKEN', 'DO_API_KEY', 'DO_OAUTH_TOKEN' and 'OAUTH_TOKEN'
        (Aliases: api_token)[Default: (null)]
        type: str

- state
        Indicate desired state of the target.
        (Choices: present, absent)[Default: present]

- timeout
        The timeout in seconds used for polling DigitalOcean's API.
        [Default: 30]
        type: int

- validate_certs
        If set to `no', the SSL certificates will not be validated.
        This should only set to `no' used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool


NOTES:
      * Environment variables DO_OAUTH_TOKEN can be used for the oauth_token.
      * As of Ansible 1.9.5 and 2.0, Version 2 of the DigitalOcean API is used, this removes `client_id' and `api_key' options in
        favor of `oauth_token'.
      * If you are running Ansible 1.9.4 or earlier you might not be able to use the included version of this module as the API
        version used has been retired.


REQUIREMENTS:  python >= 2.6

AUTHOR: Michael Gregson (@mgregson)
        METADATA:
          status:
          - stableinterface
          supported_by: community
        

EXAMPLES:

# Create a domain

- digital_ocean_domain:
    state: present
    name: my.digitalocean.domain
    ip: 127.0.0.1

# Create a droplet and a corresponding domain

- digital_ocean:
    state: present
    name: test_droplet
    size_id: 1gb
    region_id: sgp1
    image_id: ubuntu-14-04-x64


  register: test_droplet

- digital_ocean_domain:
    state: present
    name: "{{ test_droplet.droplet.name }}.my.domain"
    ip: "{{ test_droplet.droplet.ip_address }}"


