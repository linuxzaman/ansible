> DOCKER_HOST_INFO    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/docker/docker_host_info.py)

        Retrieves facts about a docker host. Essentially returns the output of `docker system info'. The module also allows to list
        object names for containers, images, networks and volumes. It also allows to query information on disk usage. The output differs
        depending on API version of the docker daemon. If the docker daemon cannot be contacted or does not meet the API version
        requirements, the module will fail.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_version
        The version of the Docker API running on the Docker Host.
        Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.
        If the value is not specified in the task, the value of environment variable `DOCKER_API_VERSION' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_api_version)[Default: auto]
        type: str

- ca_cert
        Use a CA certificate when performing server verification by providing the path to a CA certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `ca.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_ca_cert, cacert_path)[Default: (null)]
        type: path

- client_cert
        Path to the client's TLS certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `cert.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_cert, cert_path)[Default: (null)]
        type: path

- client_key
        Path to the client's TLS key file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `key.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_key, key_path)[Default: (null)]
        type: path

- containers
        Whether to list containers.
        [Default: False]
        type: bool

- containers_filters
        A dictionary of filter values used for selecting containers to delete.
        For example, `until: 24h'.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/container_prune/#filtering) for more
        information on possible filters.
        [Default: (null)]
        type: dict

- debug
        Debug mode
        [Default: False]
        type: bool

- disk_usage
        Summary information on used disk space by all Docker layers.
        The output is a sum of images, volumes, containers and build cache.
        [Default: False]
        type: bool

- docker_host
        The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string.
        For example, `tcp://192.0.2.23:2376'. If TLS is used to encrypt the connection, the module will automatically replace `tcp' in
        the connection URL with `https'.
        If the value is not specified in the task, the value of environment variable `DOCKER_HOST' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_url)[Default: unix://var/run/docker.sock]
        type: str

- images
        Whether to list images.
        [Default: False]
        type: bool

- images_filters
        A dictionary of filter values used for selecting images to delete.
        For example, `dangling: true'.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/image_prune/#filtering) for more information
        on possible filters.
        [Default: (null)]
        type: dict

- networks
        Whether to list networks.
        [Default: False]
        type: bool

- networks_filters
        A dictionary of filter values used for selecting networks to delete.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/network_prune/#filtering) for more
        information on possible filters.
        [Default: (null)]
        type: dict

- ssl_version
        Provide a valid SSL version number. Default value determined by ssl.py module.
        If the value is not specified in the task, the value of environment variable `DOCKER_SSL_VERSION' will be used instead.
        [Default: (null)]
        type: str

- timeout
        The maximum amount of time in seconds to wait on a response from the API.
        If the value is not specified in the task, the value of environment variable `DOCKER_TIMEOUT' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: 60]
        type: int

- tls
        Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if
        `tls_verify' is set to `yes' as well, it will take precedence.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: False]
        type: bool

- tls_hostname
        When verifying the authenticity of the Docker Host server, provide the expected name of the server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_HOSTNAME' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: localhost]
        type: str

- validate_certs
        Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_VERIFY' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: tls_verify)[Default: False]
        type: bool

- verbose_output
        When set to `yes' and `networks', `volumes', `images', `containers' or `disk_usage' is set to `yes' then output will contain
        verbose information about objects matching the full output of API method. For details see the documentation of your version of
        Docker API at L(https://docs.docker.com/engine/api/).
        The verbose output in this module contains only subset of information returned by `_info' module for each type of the objects.
        [Default: False]
        type: bool

- volumes
        Whether to list volumes.
        [Default: False]
        type: bool

- volumes_filters
        A dictionary of filter values used for selecting volumes to delete.
        See L(the docker documentation,https://docs.docker.com/engine/reference/commandline/volume_prune/#filtering) for more information
        on possible filters.
        [Default: (null)]
        type: dict


NOTES:
      * Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define
        `DOCKER_HOST', `DOCKER_TLS_HOSTNAME', `DOCKER_API_VERSION', `DOCKER_CERT_PATH', `DOCKER_SSL_VERSION', `DOCKER_TLS',
        `DOCKER_TLS_VERIFY' and `DOCKER_TIMEOUT'. If you are using docker machine, run the script shipped with the product that
        sets up the environment. It will set these variables for you. See https://docker-py.readthedocs.io/en/stable/machine/ for
        more details.
      * When connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for
        Python, version 2.4 or newer, this can be done by installing `docker[tls]' with [pip].
      * Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In
        general, it will use `$HOME/.docker/config.json' if the `DOCKER_CONFIG' environment variable is not specified, and use
        `$DOCKER_CONFIG/config.json' otherwise.


REQUIREMENTS:  Docker API >= 1.21, Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python
        module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker
        /docker-py/issues/1310) for details). For Python 2.6, `docker-py' must be used. Otherwise, it is recommended to
        install the `docker' Python module. Note that both modules should `not' be installed at the same time. Also note
        that when both modules are installed and one of them is uninstalled, the other might no longer function and a
        reinstall of it is required., L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use
        L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6)

AUTHOR: Piotr Wojciechowski (@WojciechowskiPiotr)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Get info on docker host
  docker_host_info:
  register: result

- name: Get info on docker host and list images
  docker_host_info:
    images: yes
  register: result

- name: Get info on docker host and list images matching the filter
  docker_host_info:
    images: yes
    images_filters:
      label: "mylabel"
  register: result

- name: Get info on docker host and verbose list images
  docker_host_info:
    images: yes
    verbose_output: yes
  register: result

- name: Get info on docker host and used disk space
  docker_host_info:
    disk_usage: yes
  register: result

- debug:
    var: result.host_info


RETURN VALUES:

can_talk_to_docker:
    description:
      - Will be C(true) if the module can talk to the docker daemon.
    returned: both on success and on error
    type: bool

host_info:
    description:
      - Facts representing the basic state of the docker host. Matches the C(docker system info) output.
    returned: always
    type: dict
volumes:
    description:
      - List of dict objects containing the basic information about each volume.
        Keys matches the C(docker volume ls) output unless I(verbose_output=yes).
        See description for I(verbose_output).
    returned: When I(volumes) is C(yes)
    type: list
networks:
    description:
      - List of dict objects containing the basic information about each network.
        Keys matches the C(docker network ls) output unless I(verbose_output=yes).
        See description for I(verbose_output).
    returned: When I(networks) is C(yes)
    type: list
containers:
    description:
      - List of dict objects containing the basic information about each container.
        Keys matches the C(docker container ls) output unless I(verbose_output=yes).
        See description for I(verbose_output).
    returned: When I(containers) is C(yes)
    type: list
images:
    description:
      - List of dict objects containing the basic information about each image.
        Keys matches the C(docker image ls) output unless I(verbose_output=yes).
        See description for I(verbose_output).
    returned: When I(images) is C(yes)
    type: list
disk_usage:
    description:
      - Information on summary disk usage by images, containers and volumes on docker host
        unless I(verbose_output=yes). See description for I(verbose_output).
    returned: When I(disk_usage) is C(yes)
    type: dict


