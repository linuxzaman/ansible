> CLOUDFLARE_DNS    (/usr/lib/python2.7/dist-packages/ansible/modules/net_tools/cloudflare_dns.py)

        Manages dns records via the Cloudflare API, see the docs: https://api.cloudflare.com/

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= account_api_token
        Account API token.
        You can obtain your API key from the bottom of the Cloudflare 'My Account' page, found here: https://dash.cloudflare.com/

        type: str

= account_email
        Account email.

        type: str

- algorithm
        Algorithm number.
        Required for `type=DS' and `type=SSHFP' when `state=present'.
        [Default: (null)]
        type: int
        version_added: 2.7

- cert_usage
        Certificate usage number.
        Required for `type=TLSA' when `state=present'.
        (Choices: 0, 1, 2, 3)[Default: (null)]
        type: int
        version_added: 2.7

- hash_type
        Hash type number.
        Required for `type=DS', `type=SSHFP' and `type=TLSA' when `state=present'.
        (Choices: 1, 2)[Default: (null)]
        type: int
        version_added: 2.7

- key_tag
        DNSSEC key tag.
        Needed for `type=DS' when `state=present'.
        [Default: (null)]
        type: int
        version_added: 2.7

- port
        Service port.
        Required for `type=SRV' and `type=TLSA'.
        [Default: (null)]
        type: int

- priority
        Record priority.
        Required for `type=MX' and `type=SRV'
        [Default: 1]

- proto
        Service protocol. Required for `type=SRV' and `type=TLSA'.
        Common values are TCP and UDP.
        Before Ansible 2.6 only TCP and UDP were available.
        [Default: (null)]
        type: str

- proxied
        Proxy through Cloudflare network or just use DNS.
        [Default: False]
        type: bool
        version_added: 2.3

- record
        Record to add.
        Required if `state=present'.
        Default is `@' (e.g. the zone name).
        (Aliases: name)[Default: @]
        type: str

- selector
        Selector number.
        Required for `type=TLSA' when `state=present'.
        (Choices: 0, 1)[Default: (null)]
        type: int
        version_added: 2.7

- service
        Record service.
        Required for `type=SRV'
        [Default: (null)]

- solo
        Whether the record should be the only one for that record type and record name.
        Only use with `state=present'.
        This will delete all other records with the same record name and type.
        [Default: (null)]
        type: bool

- state
        Whether the record(s) should exist or not.
        (Choices: absent, present)[Default: present]
        type: str

- timeout
        Timeout for Cloudflare API calls.
        [Default: 30]
        type: int

- ttl
        The TTL to give the new record.
        Must be between 120 and 2,147,483,647 seconds, or 1 for automatic.
        [Default: 1]
        type: int

- type
        The type of DNS record to create. Required if `state=present'.
        `type=DS', `type=SSHFP' and `type=TLSA' added in Ansible 2.7.
        (Choices: A, AAAA, CNAME, DS, MX, NS, SPF, SRV, SSHFP, TLSA, TXT)[Default: (null)]
        type: str

- value
        The record value.
        Required for `state=present'.
        (Aliases: content)[Default: (null)]
        type: str

- weight
        Service weight.
        Required for `type=SRV'.
        [Default: 1]
        type: int

= zone
        The name of the Zone to work with (e.g. "example.com").
        The Zone must already exist.
        (Aliases: domain)
        type: str


REQUIREMENTS:  python >= 2.6

AUTHOR: Michael Gruener (@mgruener)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a test.my.com A record to point to 127.0.0.1
  cloudflare_dns:
    zone: my.com
    record: test
    type: A
    value: 127.0.0.1
    account_email: test@example.com
    account_api_token: dummyapitoken
  register: record

- name: Create a my.com CNAME record to example.com
  cloudflare_dns:
    zone: my.com
    type: CNAME
    value: example.com
    account_email: test@example.com
    account_api_token: dummyapitoken
    state: present

- name: Change its TTL
  cloudflare_dns:
    zone: my.com
    type: CNAME
    value: example.com
    ttl: 600
    account_email: test@example.com
    account_api_token: dummyapitoken
    state: present

- name: Delete the record
  cloudflare_dns:
    zone: my.com
    type: CNAME
    value: example.com
    account_email: test@example.com
    account_api_token: dummyapitoken
    state: absent

- name: create a my.com CNAME record to example.com and proxy through Cloudflare's network
  cloudflare_dns:
    zone: my.com
    type: CNAME
    value: example.com
    proxied: yes
    account_email: test@example.com
    account_api_token: dummyapitoken
    state: present

# This deletes all other TXT records named "test.my.com"
- name: Create TXT record "test.my.com" with value "unique value"
  cloudflare_dns:
    domain: my.com
    record: test
    type: TXT
    value: unique value
    solo: true
    account_email: test@example.com
    account_api_token: dummyapitoken
    state: present

- name: Create an SRV record _foo._tcp.my.com
  cloudflare_dns:
    domain: my.com
    service: foo
    proto: tcp
    port: 3500
    priority: 10
    weight: 20
    type: SRV
    value: fooserver.my.com

- name: Create a SSHFP record login.example.com
  cloudflare_dns:
    zone: example.com
    record: login
    type: SSHFP
    algorithm: 4
    hash_type: 2
    value: 9dc1d6742696d2f51ca1f1a78b3d16a840f7d111eb9454239e70db31363f33e1

- name: Create a TLSA record _25._tcp.mail.example.com
  cloudflare_dns:
    zone: example.com
    record: mail
    port: 25
    proto: tcp
    type: TLSA
    cert_usage: 3
    selector: 1
    hash_type: 1
    value: 6b76d034492b493e15a7376fccd08e63befdad0edab8e442562f532338364bf3

- name: Create a DS record for subdomain.example.com
  cloudflare_dns:
    zone: example.com
    record: subdomain
    type: DS
    key_tag: 5464
    algorithm: 8
    hash_type: 2
    value: B4EB5AC4467D2DFB3BAF9FB9961DC1B6FED54A58CDFAA3E465081EC86F89BFAB


RETURN VALUES:

record:
    description: A dictionary containing the record data.
    returned: success, except on record deletion
    type: complex
    contains:
        content:
            description: The record content (details depend on record type).
            returned: success
            type: str
            sample: 192.0.2.91
        created_on:
            description: The record creation date.
            returned: success
            type: str
            sample: 2016-03-25T19:09:42.516553Z
        data:
            description: Additional record data.
            returned: success, if type is SRV, DS, SSHFP or TLSA
            type: dict
            sample: {
                name: "jabber",
                port: 8080,
                priority: 10,
                proto: "_tcp",
                service: "_xmpp",
                target: "jabberhost.sample.com",
                weight: 5,
            }
        id:
            description: The record ID.
            returned: success
            type: str
            sample: f9efb0549e96abcb750de63b38c9576e
        locked:
            description: No documentation available.
            returned: success
            type: bool
            sample: False
        meta:
            description: No documentation available.
            returned: success
            type: dict
            sample: { auto_added: false }
        modified_on:
            description: Record modification date.
            returned: success
            type: str
            sample: 2016-03-25T19:09:42.516553Z
        name:
            description: The record name as FQDN (including _service and _proto for SRV).
            returned: success
            type: str
            sample: www.sample.com
        priority:
            description: Priority of the MX record.
            returned: success, if type is MX
            type: int
            sample: 10
        proxiable:
            description: Whether this record can be proxied through Cloudflare.
            returned: success
            type: bool
            sample: False
        proxied:
            description: Whether the record is proxied through Cloudflare.
            returned: success
            type: bool
            sample: False
        ttl:
            description: The time-to-live for the record.
            returned: success
            type: int
            sample: 300
        type:
            description: The record type.
            returned: success
            type: str
            sample: A
        zone_id:
            description: The ID of the zone containing the record.
            returned: success
            type: str
            sample: abcede0bf9f0066f94029d2e6b73856a
        zone_name:
            description: The name of the zone containing the record.
            returned: success
            type: str
            sample: sample.com

