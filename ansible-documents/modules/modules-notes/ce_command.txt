> CE_COMMAND    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cloudengine/ce_command.py)

        Sends an arbitrary command to an HUAWEI CloudEngine node and returns the results read from the device.  The ce_command module
        includes an argument that will cause the module to wait for a specific condition before returning or timing out if the condition
        is not met.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= commands
        The commands to send to the remote HUAWEI CloudEngine device over the configured provider.  The resulting output from the command
        is returned. If the `wait_for' argument is provided, the module is not returned until the condition is satisfied or the number of
        `retries' has been exceeded.


- interval
        Configures the interval in seconds to wait between retries of the command.  If the command does not pass the specified
        conditional, the interval indicates how to long to wait before trying the command again.
        [Default: 1]

- match
        The `match' argument is used in conjunction with the `wait_for' argument to specify the match policy.  Valid values are `all' or
        `any'.  If the value is set to `all' then all conditionals in the `wait_for' must be satisfied.  If the value is set to `any'
        then only one of the values must be satisfied.
        [Default: all]

- retries
        Specifies the number of retries a command should by tried before it is considered failed.  The command is run on the target
        device every retry and evaluated against the `wait_for' conditionals.
        [Default: 10]

- wait_for
        Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to
        wait for a particular conditional to be true before moving forward.   If the conditional is not true by the configured retries,
        the task fails.  See examples.
        [Default: (null)]


AUTHOR: JackyGao2016 (@CloudEngine-Ansible)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Note: examples below use the following provider dict to handle
#       transport and authentication to the node.

- name: CloudEngine command test
  hosts: cloudengine
  connection: local
  gather_facts: no
  vars:
    cli:
      host: "{{ inventory_hostname }}"
      port: "{{ ansible_ssh_port }}"
      username: "{{ username }}"
      password: "{{ password }}"
      transport: cli

  tasks:
  - name: "Run display version on remote devices"
    ce_command:
      commands: display version
      provider: "{{ cli }}"

  - name: "Run display version and check to see if output contains HUAWEI"
    ce_command:
      commands: display version
      wait_for: result[0] contains HUAWEI
      provider: "{{ cli }}"

  - name: "Run multiple commands on remote nodes"
    ce_command:
      commands:
        - display version
        - display device
      provider: "{{ cli }}"

  - name: "Run multiple commands and evaluate the output"
    ce_command:
      commands:
        - display version
        - display device
      wait_for:
        - result[0] contains HUAWEI
        - result[1] contains Device
      provider: "{{ cli }}"


RETURN VALUES:

stdout:
  description: the set of responses from the commands
  returned: always
  type: list
  sample: ['...', '...']

stdout_lines:
  description: The value of stdout split into a list
  returned: always
  type: list
  sample: [['...', '...'], ['...'], ['...']]

failed_conditions:
  description: the conditionals that failed
  returned: failed
  type: list
  sample: ['...', '...']

