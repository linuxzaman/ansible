> ACI_BD    (/usr/lib/python2.7/dist-packages/ansible/modules/network/aci/aci_bd.py)

        Manages Bridge Domains (BD) on Cisco ACI fabrics.

  * This module is maintained by an Ansible Partner
OPTIONS (= is mandatory):

- arp_flooding
        Determines if the Bridge Domain should flood ARP traffic.
        The APIC defaults to `no' when unset during creation.
        [Default: (null)]
        type: bool

- bd
        The name of the Bridge Domain.
        (Aliases: bd_name, name)[Default: (null)]
        type: str

- bd_type
        The type of traffic on the Bridge Domain.
        The APIC defaults to `ethernet' when unset during creation.
        (Choices: ethernet, fc)[Default: (null)]
        type: str

- certificate_name
        The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.
        If a `private_key' filename was provided, this defaults to the `private_key' basename, without extension.
        If PEM-formatted content was provided for `private_key', this defaults to the `username' value.
        (Aliases: cert_name)[Default: (null)]
        type: str

- description
        Description for the Bridge Domain.
        [Default: (null)]
        type: str

- enable_multicast
        Determines if PIM is enabled.
        The APIC defaults to `no' when unset during creation.
        [Default: (null)]
        type: bool

- enable_routing
        Determines if IP forwarding should be allowed.
        The APIC defaults to `yes' when unset during creation.
        [Default: (null)]
        type: bool

- endpoint_clear
        Clears all End Points in all Leaves when `yes'.
        The value is not reset to disabled once End Points have been cleared; that requires a second task.
        The APIC defaults to `no' when unset during creation.
        [Default: (null)]
        type: bool

- endpoint_move_detect
        Determines if GARP should be enabled to detect when End Points move.
        The APIC defaults to `garp' when unset during creation.
        (Choices: default, garp)[Default: (null)]
        type: str

- endpoint_retention_action
        Determines if the Bridge Domain should inherit or resolve the End Point Retention Policy.
        The APIC defaults to `resolve' when unset during creation.
        (Choices: inherit, resolve)[Default: (null)]
        type: str

- endpoint_retention_policy
        The name of the End Point Retention Policy the Bridge Domain should use when overriding the default End Point Retention Policy.
        [Default: (null)]
        type: str

= host
        IP Address or hostname of APIC resolvable by Ansible control host.
        (Aliases: hostname)
        type: str

- igmp_snoop_policy
        The name of the IGMP Snooping Policy the Bridge Domain should use when overriding the default IGMP Snooping Policy.
        [Default: (null)]
        type: str

- ip_learning
        Determines if the Bridge Domain should learn End Point IPs.
        The APIC defaults to `yes' when unset during creation.
        [Default: (null)]
        type: bool

- ipv6_nd_policy
        The name of the IPv6 Neighbor Discovery Policy the Bridge Domain should use when overridding the default IPV6 ND Policy.
        [Default: (null)]
        type: str

- l2_unknown_unicast
        Determines what forwarding method to use for unknown l2 destinations.
        The APIC defaults to `proxy' when unset during creation.
        (Choices: proxy, flood)[Default: (null)]
        type: str

- l3_unknown_multicast
        Determines the forwarding method to use for unknown multicast destinations.
        The APIC defaults to `flood' when unset during creation.
        (Choices: flood, opt-flood)[Default: (null)]
        type: str

- limit_ip_learn
        Determines if the BD should limit IP learning to only subnets owned by the Bridge Domain.
        The APIC defaults to `yes' when unset during creation.
        [Default: (null)]
        type: bool

- mac_address
        The MAC Address to assign to the `bd' instead of using the default.
        The APIC defaults to `00:22:BD:F8:19:FF' when unset during creation.
        (Aliases: mac)[Default: (null)]
        type: str
        version_added: 2.5

- multi_dest
        Determines the forwarding method for L2 multicast, broadcast, and link layer traffic.
        The APIC defaults to `bd-flood' when unset during creation.
        (Choices: bd-flood, drop, encap-flood)[Default: (null)]
        type: str

- output_level
        Influence the output of this ACI module.
        `normal' means the standard output, incl. `current' dict
        `info' adds informational output, incl. `previous', `proposed' and `sent' dicts
        `debug' adds debugging output, incl. `filter_string', `method', `response', `status' and `url' information
        (Choices: debug, info, normal)[Default: normal]
        type: str

= password
        The password to use for authentication.
        This option is mutual exclusive with `private_key'. If `private_key' is provided too, it will be used instead.

        type: str

- port
        Port number to be used for REST connection.
        The default value depends on parameter `use_ssl'.
        [Default: (null)]
        type: int

= private_key
        Either a PEM-formatted private key file or the private key content used for signature-based authentication.
        This value also influences the default `certificate_name' that is used.
        This option is mutual exclusive with `password'. If `password' is provided too, it will be ignored.
        (Aliases: cert_key)
        type: str

- state
        Use `present' or `absent' for adding or removing.
        Use `query' for listing an object or multiple objects.
        (Choices: absent, present, query)[Default: present]
        type: str

- tenant
        The name of the Tenant.
        (Aliases: tenant_name)[Default: (null)]
        type: str

- timeout
        The socket level timeout in seconds.
        [Default: 30]
        type: int

- use_proxy
        If `no', it will not use a proxy, even if one is defined in an environment variable on the target hosts.
        [Default: True]
        type: bool

- use_ssl
        If `no', an HTTP connection will be used instead of the default HTTPS connection.
        [Default: True]
        type: bool

- username
        The username to use for authentication.
        (Aliases: user)[Default: admin]
        type: str

- validate_certs
        If `no', SSL certificates will not be validated.
        This should only set to `no' when used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool

- vrf
        The name of the VRF.
        (Aliases: vrf_name)[Default: (null)]
        type: str


NOTES:
      * The `tenant' used must exist before using this module in your playbook. The [aci_tenant] module can be used for this.


SEE ALSO:
      * Module aci_tenant
           The official documentation on the aci_tenant module.
           https://docs.ansible.com/ansible/latest/modules/aci_tenant_module.html
      * APIC Management Information Model reference
           More information about the internal APIC class *fv:BD*.
           https://developer.cisco.com/docs/apic-mim-ref/
      * Ansible documentation [aci_guide]
           Detailed information on how to manage your ACI infrastructure using Ansible.
           https://docs.ansible.com/ansible/latest/#stq=aci_guide&stp=1
      * Ansible documentation [aci_dev_guide]
           Detailed guide on how to write your own Cisco ACI modules to contribute.
           https://docs.ansible.com/ansible/latest/#stq=aci_dev_guide&stp=1


AUTHOR: Jacob McGill (@jmcgill298)
        METADATA:
          status:
          - preview
          supported_by: certified
        

EXAMPLES:

- name: Add Bridge Domain
  aci_bd:
    host: "{{ inventory_hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: no
    tenant: prod
    bd: web_servers
    mac_address: 00:22:BD:F8:19:FE
    vrf: prod_vrf
    state: present
  delegate_to: localhost

- name: Add an FC Bridge Domain
  aci_bd:
    host: "{{ inventory_hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: no
    tenant: prod
    bd: storage
    bd_type: fc
    vrf: fc_vrf
    enable_routing: no
    state: present
  delegate_to: localhost

- name: Modify a Bridge Domain
  aci_bd:
    host: "{{ inventory_hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: yes
    tenant: prod
    bd: web_servers
    arp_flooding: yes
    l2_unknown_unicast: flood
    state: present
  delegate_to: localhost

- name: Query All Bridge Domains
  aci_bd:
    host: "{{ inventory_hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: yes
    state: query
  delegate_to: localhost
  register: query_result

- name: Query a Bridge Domain
  aci_bd:
    host: "{{ inventory_hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: yes
    tenant: prod
    bd: web_servers
    state: query
  delegate_to: localhost
  register: query_result

- name: Delete a Bridge Domain
  aci_bd:
    host: "{{ inventory_hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    validate_certs: yes
    tenant: prod
    bd: web_servers
    state: absent
  delegate_to: localhost


RETURN VALUES:

current:
  description: The existing configuration from the APIC after the module has finished
  returned: success
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production environment",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
error:
  description: The error information as returned from the APIC
  returned: failure
  type: dict
  sample:
    {
        "code": "122",
        "text": "unknown managed object class foo"
    }
raw:
  description: The raw output returned by the APIC REST API (xml or json)
  returned: parse error
  type: str
  sample: '<?xml version="1.0" encoding="UTF-8"?><imdata totalCount="1"><error code="122" text="unknown managed object class foo"/></imdata>'
sent:
  description: The actual/minimal configuration pushed to the APIC
  returned: info
  type: list
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment"
            }
        }
    }
previous:
  description: The original configuration from the APIC before the module has started
  returned: info
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
proposed:
  description: The assembled configuration from the user-provided parameters
  returned: info
  type: dict
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment",
                "name": "production"
            }
        }
    }
filter_string:
  description: The filter string used for the request
  returned: failure or debug
  type: str
  sample: ?rsp-prop-include=config-only
method:
  description: The HTTP method used for the request to the APIC
  returned: failure or debug
  type: str
  sample: POST
response:
  description: The HTTP response from the APIC
  returned: failure or debug
  type: str
  sample: OK (30 bytes)
status:
  description: The HTTP status from the APIC
  returned: failure or debug
  type: int
  sample: 200
url:
  description: The HTTP url used for the request to the APIC
  returned: failure or debug
  type: str
  sample: https://10.11.12.13/api/mo/uni/tn-production.json

