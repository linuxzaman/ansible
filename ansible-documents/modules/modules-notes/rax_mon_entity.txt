> RAX_MON_ENTITY    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/rackspace/rax_mon_entity.py)

        Create or delete a Rackspace Cloud Monitoring entity, which represents a device to monitor. Entities associate checks and alarms
        with a target system and provide a convenient, centralized place to store IP addresses. Rackspace monitoring module flow |
        *rax_mon_entity* -> rax_mon_check -> rax_mon_notification -> rax_mon_notification_plan -> rax_mon_alarm

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- agent_id
        Rackspace monitoring agent on the target device to which this entity is bound. Necessary to collect `agent.' rax_mon_checks
        against this entity.
        [Default: (null)]

- api_key
        Rackspace API key, overrides `credentials'.
        (Aliases: password)[Default: (null)]

- auth_endpoint
        The URI of the authentication service.
        [Default: https://identity.api.rackspacecloud.com/v2.0/]
        version_added: 1.5

- credentials
        File to find the Rackspace credentials in. Ignored if `api_key' and `username' are provided.
        (Aliases: creds_file)[Default: (null)]

- env
        Environment as configured in `~/.pyrax.cfg', see https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-
        configuration.
        [Default: (null)]
        version_added: 1.5

- identity_type
        Authentication mechanism to use, such as rackspace or keystone.
        [Default: rackspace]
        version_added: 1.5

= label
        Defines a name for this entity. Must be a non-empty string between 1 and 255 characters long.


- metadata
        Hash of arbitrary `name', `value' pairs that are passed to associated rax_mon_alarms. Names and values must all be between 1 and
        255 characters long.
        [Default: (null)]

- named_ip_addresses
        Hash of IP addresses that may be referenced by name by rax_mon_checks added to this entity. Must be a dictionary of with keys
        that are names between 1 and 64 characters long, and values that are valid IPv4 or IPv6 addresses.
        [Default: (null)]

- region
        Region to create an instance in.
        [Default: DFW]

- state
        Ensure that an entity with this `name' exists or does not exist.
        (Choices: present, absent)[Default: (null)]

- tenant_id
        The tenant ID used for authentication.
        [Default: (null)]
        version_added: 1.5

- tenant_name
        The tenant name used for authentication.
        [Default: (null)]
        version_added: 1.5

- username
        Rackspace username, overrides `credentials'.
        [Default: (null)]

- validate_certs
        Whether or not to require SSL validation of API endpoints.
        (Aliases: verify_ssl)[Default: (null)]
        type: bool
        version_added: 1.5


NOTES:
      * The following environment variables can be used, `RAX_USERNAME', `RAX_API_KEY', `RAX_CREDS_FILE', `RAX_CREDENTIALS',
        `RAX_REGION'.
      * `RAX_CREDENTIALS' and `RAX_CREDS_FILE' points to a credentials file appropriate for pyrax. See
        https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating
      * `RAX_USERNAME' and `RAX_API_KEY' obviate the use of a credentials file
      * `RAX_REGION' defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)


REQUIREMENTS:  python >= 2.6, pyrax

AUTHOR: Ash Wilson (@smashwilson)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Entity example
  gather_facts: False
  hosts: local
  connection: local
  tasks:
  - name: Ensure an entity exists
    rax_mon_entity:
      credentials: ~/.rax_pub
      state: present
      label: my_entity
      named_ip_addresses:
        web_box: 192.0.2.4
        db_box: 192.0.2.5
      meta:
        hurf: durf
    register: the_entity


