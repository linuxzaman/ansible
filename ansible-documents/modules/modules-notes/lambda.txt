> LAMBDA    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/lambda.py)

        Allows for the management of Lambda functions.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- aws_access_key
        AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is
        used.
        (Aliases: ec2_access_key, access_key)[Default: (null)]
        type: str

- aws_secret_key
        AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is
        used.
        (Aliases: ec2_secret_key, secret_key)[Default: (null)]
        type: str

- dead_letter_arn
        The parent object that contains the target Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
        [Default: (null)]
        version_added: 2.3

- debug_botocore_endpoint_logs
        Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing
        the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during
        a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
        [Default: no]
        type: bool
        version_added: 2.8

- description
        A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.
        [Default: (null)]

- ec2_url
        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where
        region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL
        environment variable, if any, is used.
        [Default: (null)]
        type: str

- environment_variables
        A dictionary of environment variables the Lambda function is given.
        (Aliases: environment)[Default: (null)]
        version_added: 2.3

- handler
        The function within your code that Lambda calls to begin execution.
        [Default: (null)]

- memory_size
        The amount of memory, in MB, your Lambda function is given.
        [Default: 128]

= name
        The name you want to assign to the function you are uploading. Cannot be changed.


- profile
        Uses a boto profile. Only works with boto >= 2.24.0.
        [Default: (null)]
        type: str
        version_added: 1.6

- region
        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
        (Aliases: aws_region, ec2_region)[Default: (null)]
        type: str

- role
        The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web
        Services (AWS) resources. You may use the bare ARN if the role belongs to the same AWS account.
        Required when `state=present'.
        [Default: (null)]

- runtime
        The runtime environment for the Lambda function you are uploading.
        Required when creating a function. Uses parameters as described in boto3 docs.
        Required when `state=present'.
        For supported list of runtimes, see https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html.
        [Default: (null)]

- s3_bucket
        Amazon S3 bucket name where the .zip file containing your deployment package is stored.
        If `state=present' then either zip_file or s3_bucket must be present.
        `s3_bucket' and `s3_key' are required together.
        [Default: (null)]

- s3_key
        The Amazon S3 object (the deployment package) key name you want to upload.
        `s3_bucket' and `s3_key' are required together.
        [Default: (null)]

- s3_object_version
        The Amazon S3 object (the deployment package) version you want to upload.
        [Default: (null)]

- security_token
        AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
        (Aliases: access_token)[Default: (null)]
        type: str
        version_added: 1.6

- state
        Create or delete Lambda function.
        (Choices: present, absent)[Default: present]

- tags
        tag dict to apply to the function (requires botocore 1.5.40 or above).
        [Default: (null)]
        version_added: 2.5

- timeout
        The function maximum execution time in seconds after which Lambda should terminate the function.
        [Default: 3]

- validate_certs
        When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        [Default: True]
        type: bool
        version_added: 1.5

- vpc_security_group_ids
        List of VPC security group IDs to associate with the Lambda function. Required when vpc_subnet_ids is used.
        [Default: (null)]

- vpc_subnet_ids
        List of subnet IDs to run Lambda function in. Use this option if you need to access resources in your VPC. Leave empty if you
        don't want to run the function in a VPC.
        [Default: (null)]

- zip_file
        A .zip file containing your deployment package
        If `state=present' then either zip_file or s3_bucket must be present.
        (Aliases: src)[Default: (null)]


NOTES:
      * If parameters are not set within the module, the following environment variables can be used in decreasing order of
        precedence `AWS_URL' or `EC2_URL', `AWS_ACCESS_KEY_ID' or `AWS_ACCESS_KEY' or `EC2_ACCESS_KEY', `AWS_SECRET_ACCESS_KEY' or
        `AWS_SECRET_KEY' or `EC2_SECRET_KEY', `AWS_SECURITY_TOKEN' or `EC2_SECURITY_TOKEN', `AWS_REGION' or `EC2_REGION'
      * Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See
        https://boto.readthedocs.io/en/latest/boto_config_tut.html
      * `AWS_REGION' or `EC2_REGION' can be typically be used to specify the AWS region, when required, but this can also be
        configured in the boto config file


REQUIREMENTS:  boto, boto3, python >= 2.6

AUTHOR: Steyn Huizinga (@steynovich)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Create Lambda functions
- name: looped creation
  lambda:
    name: '{{ item.name }}'
    state: present
    zip_file: '{{ item.zip_file }}'
    runtime: 'python2.7'
    role: 'arn:aws:iam::987654321012:role/lambda_basic_execution'
    handler: 'hello_python.my_handler'
    vpc_subnet_ids:
    - subnet-123abcde
    - subnet-edcba321
    vpc_security_group_ids:
    - sg-123abcde
    - sg-edcba321
    environment_variables: '{{ item.env_vars }}'
    tags:
      key1: 'value1'
  loop:
    - name: HelloWorld
      zip_file: hello-code.zip
      env_vars:
        key1: "first"
        key2: "second"
    - name: ByeBye
      zip_file: bye-code.zip
      env_vars:
        key1: "1"
        key2: "2"

# To remove previously added tags pass a empty dict
- name: remove tags
  lambda:
    name: 'Lambda function'
    state: present
    zip_file: 'code.zip'
    runtime: 'python2.7'
    role: 'arn:aws:iam::987654321012:role/lambda_basic_execution'
    handler: 'hello_python.my_handler'
    tags: {}

# Basic Lambda function deletion
- name: Delete Lambda functions HelloWorld and ByeBye
  lambda:
    name: '{{ item }}'
    state: absent
  loop:
    - HelloWorld
    - ByeBye


RETURN VALUES:

code:
    description: the lambda function location returned by get_function in boto3
    returned: success
    type: dict
    sample:
      {
        'location': 'a presigned S3 URL',
        'repository_type': 'S3',
      }
configuration:
    description: the lambda function metadata returned by get_function in boto3
    returned: success
    type: dict
    sample:
      {
        'code_sha256': 'SHA256 hash',
        'code_size': 123,
        'description': 'My function',
        'environment': {
          'variables': {
            'key': 'value'
          }
        },
        'function_arn': 'arn:aws:lambda:us-east-1:123456789012:function:myFunction:1',
        'function_name': 'myFunction',
        'handler': 'index.handler',
        'last_modified': '2017-08-01T00:00:00.000+0000',
        'memory_size': 128,
        'role': 'arn:aws:iam::123456789012:role/lambda_basic_execution',
        'runtime': 'nodejs6.10',
        'timeout': 3,
        'version': '1',
        'vpc_config': {
          'security_group_ids': [],
          'subnet_ids': []
        }
      }

