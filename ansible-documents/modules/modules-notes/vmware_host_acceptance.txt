> VMWARE_HOST_ACCEPTANCE    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/vmware/vmware_host_acceptance.py)

        This module can be used to manage the host acceptance level of an ESXi host. The host acceptance level controls the acceptance
        level of each VIB on a ESXi host.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- acceptance_level
        Name of acceptance level.
        If set to `partner', then accept only partner and VMware signed and certified VIBs.
        If set to `vmware_certified', then accept only VIBs that are signed and certified by VMware.
        If set to `vmware_accepted', then accept VIBs that have been accepted by VMware.
        If set to `community', then accept all VIBs, even those that are not signed.
        (Choices: community, partner, vmware_accepted, vmware_certified)[Default: (null)]

- cluster_name
        Name of the cluster.
        Acceptance level of all ESXi host system in the given cluster will be managed.
        If `esxi_hostname' is not given, this parameter is required.
        [Default: (null)]

- esxi_hostname
        ESXi hostname.
        Acceptance level of this ESXi host system will be managed.
        If `cluster_name' is not given, this parameter is required.
        [Default: (null)]

- hostname
        The hostname or IP address of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_HOST' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: (null)]
        type: str

- password
        The password of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PASSWORD' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: pass, pwd)[Default: (null)]
        type: str

- port
        The port number of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PORT' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: 443]
        type: int
        version_added: 2.5

- state
        Set or list acceptance level of the given ESXi host.
        If set to `list', then will return current acceptance level of given host system/s.
        If set to `present', then will set given acceptance level.
        (Choices: list, present)[Default: list]

- username
        The username of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_USER' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: admin, user)[Default: (null)]
        type: str

- validate_certs
        Allows connection when SSL certificates are not valid. Set to `false' when certificates are not trusted.
        If the value is not specified in the task, the value of environment variable `VMWARE_VALIDATE_CERTS' will be used instead.
        Environment variable support added in Ansible 2.6.
        If set to `yes', please make sure Python >= 2.7.9 is installed on the given machine.
        [Default: True]
        type: bool


NOTES:
      * Tested on vSphere 6.5


REQUIREMENTS:  python >= 2.6, PyVmomi

AUTHOR: Abhijeet Kasurde (@Akasurde)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Set acceptance level to community for all ESXi Host in given Cluster
  vmware_host_acceptance:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    cluster_name: cluster_name
    acceptance_level: 'community'
    state: present
  delegate_to: localhost
  register: cluster_acceptance_level

- name: Set acceptance level to vmware_accepted for the given ESXi Host
  vmware_host_acceptance:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    esxi_hostname: '{{ esxi_hostname }}'
    acceptance_level: 'vmware_accepted'
    state: present
  delegate_to: localhost
  register: host_acceptance_level

- name: Get acceptance level from the given ESXi Host
  vmware_host_acceptance:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    esxi_hostname: '{{ esxi_hostname }}'
    state: list
  delegate_to: localhost
  register: host_acceptance_level


RETURN VALUES:

facts:
    description:
    - dict with hostname as key and dict with acceptance level facts, error as value
    returned: facts
    type: dict
    sample: { "facts": { "localhost.localdomain": { "error": "NA", "level": "vmware_certified" }}}

