> WIN_SHELL    (/usr/lib/python2.7/dist-packages/ansible/modules/windows/win_shell.py)

        The `win_shell' module takes the command name followed by a list of space-delimited arguments. It is similar to the [win_command]
        module, but runs the command via a shell (defaults to PowerShell) on the target host. For non-Windows targets, use the [shell]
        module instead.

  * This module is maintained by The Ansible Core Team
OPTIONS (= is mandatory):

- chdir
        Set the specified path as the current working directory before executing a command
        [Default: (null)]
        type: path

- creates
        A path or path filter pattern; when the referenced path exists on the target host, the task will be skipped.
        [Default: (null)]
        type: path

- executable
        Change the shell used to execute the command (eg, `cmd').
        The target shell must accept a `/c' parameter followed by the raw command line to be executed.
        [Default: (null)]
        type: path

= free_form
        The `win_shell' module takes a free form command to run.
        There is no parameter actually named 'free form'. See the examples!

        type: str

- no_profile
        Do not load the user profile before running a command. This is only valid when using PowerShell as the executable.
        [Default: False]
        type: bool
        version_added: 2.8

- removes
        A path or path filter pattern; when the referenced path *does not* exist on the target host, the task will be skipped.
        [Default: (null)]
        type: path

- stdin
        Set the stdin of the command directly to the specified value.
        [Default: (null)]
        type: str
        version_added: 2.5


NOTES:
      * If you want to run an executable securely and predictably, it may be better to use the [win_command] module instead. Best
        practices when writing playbooks will follow the trend of using [win_command] unless `win_shell' is explicitly required.
        When running ad-hoc commands, use your best judgement.
      * WinRM will not return from a command execution until all child processes created have exited. Thus, it is not possible to
        use `win_shell' to spawn long-running child or background processes. Consider creating a Windows service for managing
        background processes.


SEE ALSO:
      * Module psexec
           The official documentation on the psexec module.
           https://docs.ansible.com/ansible/latest/modules/psexec_module.html
      * Module raw
           The official documentation on the raw module.
           https://docs.ansible.com/ansible/latest/modules/raw_module.html
      * Module script
           The official documentation on the script module.
           https://docs.ansible.com/ansible/latest/modules/script_module.html
      * Module shell
           The official documentation on the shell module.
           https://docs.ansible.com/ansible/latest/modules/shell_module.html
      * Module win_command
           The official documentation on the win_command module.
           https://docs.ansible.com/ansible/latest/modules/win_command_module.html
      * Module win_psexec
           The official documentation on the win_psexec module.
           https://docs.ansible.com/ansible/latest/modules/win_psexec_module.html


AUTHOR: Matt Davis (@nitzmahone)
        METADATA:
          status:
          - preview
          supported_by: core
        

EXAMPLES:

# Execute a command in the remote shell; stdout goes to the specified
# file on the remote.
- win_shell: C:\somescript.ps1 >> C:\somelog.txt

# Change the working directory to somedir/ before executing the command.
- win_shell: C:\somescript.ps1 >> C:\somelog.txt chdir=C:\somedir

# You can also use the 'args' form to provide the options. This command
# will change the working directory to somedir/ and will only run when
# somedir/somelog.txt doesn't exist.
- win_shell: C:\somescript.ps1 >> C:\somelog.txt
  args:
    chdir: C:\somedir
    creates: C:\somelog.txt

# Run a command under a non-Powershell interpreter (cmd in this case)
- win_shell: echo %HOMEDIR%
  args:
    executable: cmd
  register: homedir_out

- name: Run multi-lined shell commands
  win_shell: |
    $value = Test-Path -Path C:\temp
    if ($value) {
        Remove-Item -Path C:\temp -Force
    }
    New-Item -Path C:\temp -ItemType Directory

- name: Retrieve the input based on stdin
  win_shell: '$string = [Console]::In.ReadToEnd(); Write-Output $string.Trim()'
  args:
    stdin: Input message


RETURN VALUES:

msg:
    description: Changed.
    returned: always
    type: bool
    sample: true
start:
    description: The command execution start time.
    returned: always
    type: str
    sample: '2016-02-25 09:18:26.429568'
end:
    description: The command execution end time.
    returned: always
    type: str
    sample: '2016-02-25 09:18:26.755339'
delta:
    description: The command execution delta time.
    returned: always
    type: str
    sample: '0:00:00.325771'
stdout:
    description: The command standard output.
    returned: always
    type: str
    sample: 'Clustering node rabbit@slave1 with rabbit@master ...'
stderr:
    description: The command standard error.
    returned: always
    type: str
    sample: 'ls: cannot access foo: No such file or directory'
cmd:
    description: The command executed by the task.
    returned: always
    type: str
    sample: 'rabbitmqctl join_cluster rabbit@master'
rc:
    description: The command return code (0 means success).
    returned: always
    type: int
    sample: 0
stdout_lines:
    description: The command standard output split in lines.
    returned: always
    type: list
    sample: [u'Clustering node rabbit@slave1 with rabbit@master ...']

