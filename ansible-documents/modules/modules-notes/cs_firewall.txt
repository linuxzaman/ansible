> CS_FIREWALL    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/cloudstack/cs_firewall.py)

        Creates and removes firewall rules.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- account
        Account the firewall rule is related to.
        [Default: (null)]
        type: str

- api_http_method
        HTTP method used to query the API endpoint.
        If not given, the `CLOUDSTACK_METHOD' env variable is considered.
        As the last option, the value is taken from the ini config file, also see the notes.
        Fallback value is `get' if not specified.
        (Choices: get, post)[Default: (null)]
        type: str

- api_key
        API key of the CloudStack API.
        If not given, the `CLOUDSTACK_KEY' env variable is considered.
        As the last option, the value is taken from the ini config file, also see the notes.
        [Default: (null)]
        type: str

- api_region
        Name of the ini section in the `cloustack.ini' file.
        If not given, the `CLOUDSTACK_REGION' env variable is considered.
        [Default: cloudstack]
        type: str

- api_secret
        Secret key of the CloudStack API.
        If not set, the `CLOUDSTACK_SECRET' env variable is considered.
        As the last option, the value is taken from the ini config file, also see the notes.
        [Default: (null)]
        type: str

- api_timeout
        HTTP timeout in seconds.
        If not given, the `CLOUDSTACK_TIMEOUT' env variable is considered.
        As the last option, the value is taken from the ini config file, also see the notes.
        Fallback value is 10 seconds if not specified.
        [Default: (null)]
        type: int

- api_url
        URL of the CloudStack API e.g. https://cloud.example.com/client/api.
        If not given, the `CLOUDSTACK_ENDPOINT' env variable is considered.
        As the last option, the value is taken from the ini config file, also see the notes.
        [Default: (null)]
        type: str

- cidrs
        List of CIDRs (full notation) to be used for firewall rule.
        Since version 2.5, it is a list of CIDR.
        (Aliases: cidr)[Default: 0.0.0.0/0]
        type: list

- domain
        Domain the firewall rule is related to.
        [Default: (null)]
        type: str

- end_port
        End port for this rule. Considered if `protocol=tcp' or `protocol=udp'.
        If not specified, equal `start_port'.
        [Default: (null)]
        type: int

- icmp_code
        Error code for this icmp message.
        Considered if `protocol=icmp'.
        [Default: (null)]
        type: int

- icmp_type
        Type of the icmp message being sent.
        Considered if `protocol=icmp'.
        [Default: (null)]
        type: int

- ip_address
        Public IP address the ingress rule is assigned to.
        Required if `type=ingress'.
        [Default: (null)]
        type: str

- network
        Network the egress rule is related to.
        Required if `type=egress'.
        [Default: (null)]
        type: str

- poll_async
        Poll async jobs until job has finished.
        [Default: True]
        type: bool

- project
        Name of the project the firewall rule is related to.
        [Default: (null)]
        type: str

- protocol
        Protocol of the firewall rule.
        `all' is only available if `type=egress'.
        (Choices: tcp, udp, icmp, all)[Default: tcp]
        type: str

- start_port
        Start port for this rule.
        Considered if `protocol=tcp' or `protocol=udp'.
        (Aliases: port)[Default: (null)]
        type: int

- state
        State of the firewall rule.
        (Choices: present, absent)[Default: present]
        type: str

- tags
        List of tags. Tags are a list of dictionaries having keys `key' and `value'.
        To delete all tags, set an empty list e.g. `tags: []'.
        (Aliases: tag)[Default: (null)]
        type: list
        version_added: 2.4

- type
        Type of the firewall rule.
        (Choices: ingress, egress)[Default: ingress]
        type: str

- zone
        Name of the zone in which the virtual machine is in.
        If not set, default zone is used.
        [Default: (null)]
        type: str


NOTES:
      * Ansible uses the `cs' library's configuration method if credentials are not provided by the arguments `api_url', `api_key',
        `api_secret'. Configuration is read from several locations, in the following order. The `CLOUDSTACK_ENDPOINT',
        `CLOUDSTACK_KEY', `CLOUDSTACK_SECRET' and `CLOUDSTACK_METHOD'. `CLOUDSTACK_TIMEOUT' environment variables. A
        `CLOUDSTACK_CONFIG' environment variable pointing to an `.ini' file. A `cloudstack.ini' file in the current working
        directory. A `.cloudstack.ini' file in the users home directory. Optionally multiple credentials and endpoints can be
        specified using ini sections in `cloudstack.ini'. Use the argument `api_region' to select the section name, default section
        is `cloudstack'. See https://github.com/exoscale/cs for more information.
      * A detailed guide about cloudstack modules can be found in the L(CloudStack Cloud
        Guide,../scenario_guides/guide_cloudstack.html).
      * This module supports check mode.


REQUIREMENTS:  python >= 2.6, cs >= 0.6.10

AUTHOR: Ren√© Moser (@resmo)
        METADATA:
          status:
          - stableinterface
          supported_by: community
        

EXAMPLES:

- name: Allow inbound port 80/tcp from 1.2.3.4 to 4.3.2.1
  cs_firewall:
    ip_address: 4.3.2.1
    port: 80
    cidr: 1.2.3.4/32
  delegate_to: localhost

- name: Allow inbound tcp/udp port 53 to 4.3.2.1
  cs_firewall:
    ip_address: 4.3.2.1
    port: 53
    protocol: '{{ item }}'
  with_items:
  - tcp
  - udp
  delegate_to: localhost

- name: Ensure firewall rule is removed
  cs_firewall:
    ip_address: 4.3.2.1
    start_port: 8000
    end_port: 8888
    cidr: 17.0.0.0/8
    state: absent
  delegate_to: localhost

- name: Allow all outbound traffic
  cs_firewall:
    network: my_network
    type: egress
    protocol: all
  delegate_to: localhost

- name: Allow only HTTP outbound traffic for an IP
  cs_firewall:
    network: my_network
    type: egress
    port: 80
    cidr: 10.101.1.20
  delegate_to: localhost


RETURN VALUES:

---
id:
  description: UUID of the rule.
  returned: success
  type: str
  sample: 04589590-ac63-4ffc-93f5-b698b8ac38b6
ip_address:
  description: IP address of the rule if C(type=ingress)
  returned: success
  type: str
  sample: 10.100.212.10
type:
  description: Type of the rule.
  returned: success
  type: str
  sample: ingress
cidr:
  description: CIDR string of the rule.
  returned: success
  type: str
  sample: 0.0.0.0/0
cidrs:
  description: CIDR list of the rule.
  returned: success
  type: list
  sample: [ '0.0.0.0/0' ]
  version_added: '2.5'
protocol:
  description: Protocol of the rule.
  returned: success
  type: str
  sample: tcp
start_port:
  description: Start port of the rule.
  returned: success
  type: int
  sample: 80
end_port:
  description: End port of the rule.
  returned: success
  type: int
  sample: 80
icmp_code:
  description: ICMP code of the rule.
  returned: success
  type: int
  sample: 1
icmp_type:
  description: ICMP type of the rule.
  returned: success
  type: int
  sample: 1
network:
  description: Name of the network if C(type=egress)
  returned: success
  type: str
  sample: my_network

