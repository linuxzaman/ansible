> WIN_DOMAIN_USER    (/usr/lib/python2.7/dist-packages/ansible/modules/windows/win_domain_user.py)

        Manages Windows Active Directory user accounts.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- account_locked
        `no' will unlock the user account if locked.
        Note that there is not a way to lock an account as an administrator.
        Accounts are locked due to user actions; as an admin, you may only unlock a locked account.
        If you wish to administratively disable an account, set `enabled' to `no'.
        (Choices: False)[Default: (null)]

- attributes
        A dict of custom LDAP attributes to set on the user.
        This can be used to set custom attributes that are not exposed as module parameters, e.g. `telephoneNumber'.
        See the examples on how to format this parameter.
        [Default: (null)]
        type: str
        version_added: 2.5

- city
        Configures the user's city.
        [Default: (null)]
        type: str

- company
        Configures the user's company name.
        [Default: (null)]
        type: str

- country
        Configures the user's country code.
        Note that this is a two-character ISO 3166 code.
        [Default: (null)]
        type: str

- description
        Description of the user
        [Default: (null)]
        type: str

- domain_password
        The password for `username'.
        [Default: (null)]
        type: str
        version_added: 2.5

- domain_server
        Specifies the Active Directory Domain Services instance to connect to.
        Can be in the form of an FQDN or NetBIOS name.
        If not specified then the value is based on the domain of the computer running PowerShell.
        [Default: (null)]
        type: str
        version_added: 2.5

- domain_username
        The username to use when interacting with AD.
        If this is not set then the user Ansible used to log in with will be used instead when using CredSSP or Kerberos with credential
        delegation.
        [Default: (null)]
        type: str
        version_added: 2.5

- email
        Configures the user's email address.
        This is a record in AD and does not do anything to configure any email servers or systems.
        [Default: (null)]
        type: str

- enabled
        `yes' will enable the user account.
        `no' will disable the account.
        [Default: True]
        type: bool

- firstname
        Configures the user's first name (given name).
        [Default: (null)]
        type: str

- groups
        Adds or removes the user from this list of groups, depending on the value of `groups_action'.
        To remove all but the Principal Group, set `groups=<principal group name>' and `groups_action=replace'.
        Note that users cannot be removed from their principal group (for example, "Domain Users").
        [Default: (null)]
        type: list

- groups_action
        If `add', the user is added to each group in `groups' where not already a member.
        If `remove', the user is removed from each group in `groups'.
        If `replace', the user is added as a member of each group in `groups' and removed from any other groups.
        (Choices: add, remove, replace)[Default: replace]
        type: str

= name
        Name of the user to create, remove or modify.

        type: str

- password
        Optionally set the user's password to this (plain text) value.
        To enable an account - `enabled' - a password must already be configured on the account, or you must provide a password here.
        [Default: (null)]
        type: str

- password_expired
        `yes' will require the user to change their password at next login.
        `no' will clear the expired password flag.
        This is mutually exclusive with `password_never_expires'.
        [Default: (null)]
        type: bool

- password_never_expires
        `yes' will set the password to never expire.
        `no' will allow the password to expire.
        This is mutually exclusive with `password_expired'.
        [Default: (null)]
        type: bool

- path
        Container or OU for the new user; if you do not specify this, the user will be placed in the default container for users in the
        domain.
        Setting the path is only available when a new user is created; if you specify a path on an existing user, the user's path will
        not be updated - you must delete (e.g., `state=absent') the user and then re-add the user with the appropriate path.
        [Default: (null)]
        type: str

- postal_code
        Configures the user's postal code / zip code.
        [Default: (null)]
        type: str

- state
        When `present', creates or updates the user account.
        When `absent', removes the user account if it exists.
        When `query', retrieves the user account details without making any changes.
        (Choices: absent, present, query)[Default: present]
        type: str

- state_province
        Configures the user's state or province.
        [Default: (null)]
        type: str

- street
        Configures the user's street address.
        [Default: (null)]
        type: str

- surname
        Configures the user's last name (surname).
        [Default: (null)]
        type: str

- update_password
        `always' will update passwords if they differ.
        `on_create' will only set the password for newly created users.
        Note that `always' will always report an Ansible status of 'changed' because we cannot determine whether the new password differs
        from the old password.
        (Choices: always, on_create)[Default: always]
        type: str

- upn
        Configures the User Principal Name (UPN) for the account.
        This is not required, but is best practice to configure for modern versions of Active Directory.
        The format is `<username>@<domain>'.
        [Default: (null)]
        type: str

- user_cannot_change_password
        `yes' will prevent the user from changing their password.
        `no' will allow the user to change their password.
        [Default: (null)]
        type: bool


NOTES:
      * Works with Windows 2012R2 and newer.
      * If running on a server that is not a Domain Controller, credential delegation through CredSSP or Kerberos with delegation
        must be used or the `domain_username', `domain_password' must be set.
      * Note that some individuals have confirmed successful operation on Windows 2008R2 servers with AD and AD Web Services
        enabled, but this has not received the same degree of testing as Windows 2012R2.


SEE ALSO:
      * Module win_domain
           The official documentation on the win_domain module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_module.html
      * Module win_domain_controller
           The official documentation on the win_domain_controller module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_controller_module.html
      * Module win_domain_computer
           The official documentation on the win_domain_computer module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_computer_module.html
      * Module win_domain_group
           The official documentation on the win_domain_group module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_group_module.html
      * Module win_domain_membership
           The official documentation on the win_domain_membership module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_membership_module.html
      * Module win_user
           The official documentation on the win_user module.
           https://docs.ansible.com/ansible/latest/modules/win_user_module.html
      * Module win_user_profile
           The official documentation on the win_user_profile module.
           https://docs.ansible.com/ansible/latest/modules/win_user_profile_module.html


AUTHOR: Nick Chandler (@nwchandler)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Ensure user bob is present with address information
  win_domain_user:
    name: bob
    firstname: Bob
    surname: Smith
    company: BobCo
    password: B0bP4ssw0rd
    state: present
    groups:
      - Domain Admins
    street: 123 4th St.
    city: Sometown
    state_province: IN
    postal_code: 12345
    country: US
    attributes:
      telephoneNumber: 555-123456

- name: Ensure user bob is created and use custom credentials to create the user
  win_domain_user:
    name: bob
    firstname: Bob
    surname: Smith
    password: B0bP4ssw0rd
    state: present
    domain_username: DOMAIN\admin-account
    domain_password: SomePas2w0rd
    domain_server: domain@DOMAIN.COM

- name: Ensure user bob is present in OU ou=test,dc=domain,dc=local
  win_domain_user:
    name: bob
    password: B0bP4ssw0rd
    state: present
    path: ou=test,dc=domain,dc=local
    groups:
      - Domain Admins

- name: Ensure user bob is absent
  win_domain_user:
    name: bob
    state: absent


RETURN VALUES:

account_locked:
    description: true if the account is locked
    returned: always
    type: bool
    sample: false
changed:
    description: true if the account changed during execution
    returned: always
    type: bool
    sample: false
city:
    description: The user city
    returned: always
    type: str
    sample: Indianapolis
company:
    description: The user company
    returned: always
    type: str
    sample: RedHat
country:
    description: The user country
    returned: always
    type: str
    sample: US
description:
    description: A description of the account
    returned: always
    type: str
    sample: Server Administrator
distinguished_name:
    description: DN of the user account
    returned: always
    type: str
    sample: CN=nick,OU=test,DC=domain,DC=local
email:
    description: The user email address
    returned: always
    type: str
    sample: nick@domain.local
enabled:
    description: true if the account is enabled and false if disabled
    returned: always
    type: str
    sample: true
firstname:
    description: The user first name
    returned: always
    type: str
    sample: Nick
groups:
    description: AD Groups to which the account belongs
    returned: always
    type: list
    sample: [ "Domain Admins", "Domain Users" ]
msg:
    description: Summary message of whether the user is present or absent
    returned: always
    type: str
    sample: User nick is present
name:
    description: The username on the account
    returned: always
    type: str
    sample: nick
password_expired:
    description: true if the account password has expired
    returned: always
    type: bool
    sample: false
password_updated:
    description: true if the password changed during this execution
    returned: always
    type: bool
    sample: true
postal_code:
    description: The user postal code
    returned: always
    type: str
    sample: 46033
sid:
    description: The SID of the account
    returned: always
    type: str
    sample: S-1-5-21-2752426336-228313920-2202711348-1175
state:
    description: The state of the user account
    returned: always
    type: str
    sample: present
state_province:
    description: The user state or province
    returned: always
    type: str
    sample: IN
street:
    description: The user street address
    returned: always
    type: str
    sample: 123 4th St.
surname:
    description: The user last name
    returned: always
    type: str
    sample: Doe
upn:
    description: The User Principal Name of the account
    returned: always
    type: str
    sample: nick@domain.local
user_cannot_change_password:
    description: true if the user is not allowed to change password
    returned: always
    type: str
    sample: false

