> SUPERVISORCTL    (/usr/lib/python2.7/dist-packages/ansible/modules/web_infrastructure/supervisorctl.py)

        Manage the state of a program or group of programs running via supervisord

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- config
        The supervisor configuration file path
        [Default: (null)]
        version_added: 1.3

= name
        The name of the supervisord program or group to manage.
        The name will be taken as group name when it ends with a colon `:'
        Group support is only available in Ansible version 1.6 or later.


- password
        password to use for authentication
        [Default: (null)]
        version_added: 1.3

- server_url
        URL on which supervisord server is listening
        [Default: (null)]
        version_added: 1.3

- signal
        The signal to send to the program/group, when combined with the 'signalled' state. Required when l(state=signalled).
        [Default: (null)]
        version_added: 2.8

= state
        The desired state of program/group.
        (Choices: present, started, stopped, restarted, absent, signalled)

- supervisorctl_path
        path to supervisorctl executable
        [Default: (null)]
        version_added: 1.4

- username
        username to use for authentication
        [Default: (null)]
        version_added: 1.3


NOTES:
      * When `state' = `present', the module will call `supervisorctl reread' then `supervisorctl add' if the program/group does
        not exist.
      * When `state' = `restarted', the module will call `supervisorctl update' then call `supervisorctl restart'.
      * When `state' = `absent', the module will call `supervisorctl reread' then `supervisorctl remove' to remove the target
        program/group.


REQUIREMENTS:  supervisorctl

AUTHOR: Matt Wright (@mattupstate), Aaron Wang (@inetfuture) <inetfuture@gmail.com>
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Manage the state of program to be in 'started' state.
- supervisorctl:
    name: my_app
    state: started

# Manage the state of program group to be in 'started' state.
- supervisorctl:
    name: 'my_apps:'
    state: started

# Restart my_app, reading supervisorctl configuration from a specified file.
- supervisorctl:
    name: my_app
    state: restarted
    config: /var/opt/my_project/supervisord.conf

# Restart my_app, connecting to supervisord with credentials and server URL.
- supervisorctl:
    name: my_app
    state: restarted
    username: test
    password: testpass
    server_url: http://localhost:9001

# Send a signal to my_app via supervisorctl
- supervisorctl:
    name: my_app
    state: signalled
    signal: USR1


