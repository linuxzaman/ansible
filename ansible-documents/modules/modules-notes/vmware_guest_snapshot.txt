> VMWARE_GUEST_SNAPSHOT    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/vmware/vmware_guest_snapshot.py)

        This module can be used to create, delete and update snapshot(s) of the given virtual machine. All parameters and VMware object
        names are case sensitive.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= datacenter
        Destination datacenter for the deploy operation.


- description
        Define an arbitrary description to attach to snapshot.
        [Default: ]

- folder
        Destination folder, absolute or relative path to find an existing guest.
        This is required parameter, if `name' is supplied.
        The folder should include the datacenter. ESX's datacenter is ha-datacenter.
        Examples:
           folder: /ha-datacenter/vm
           folder: ha-datacenter/vm
           folder: /datacenter1/vm
           folder: datacenter1/vm
           folder: /datacenter1/vm/folder1
           folder: datacenter1/vm/folder1
           folder: /folder1/datacenter1/vm
           folder: folder1/datacenter1/vm
           folder: /folder1/datacenter1/vm/folder2
           folder: vm/folder2
           folder: folder2
        [Default: (null)]

- hostname
        The hostname or IP address of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_HOST' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: (null)]
        type: str

- memory_dump
        If set to `true', memory dump of virtual machine is also included in snapshot.
        Note that memory snapshots take time and resources, this will take longer time to create.
        If virtual machine does not provide capability to take memory snapshot, then this flag is set to `false'.
        [Default: False]
        type: bool
        version_added: 2.4

- name
        Name of the virtual machine to work with.
        This is required parameter, if `uuid' is not supplied.
        [Default: (null)]

- name_match
        If multiple VMs matching the name, use the first or last found.
        (Choices: first, last)[Default: first]

- new_description
        Value to change the description of an existing snapshot to.
        [Default: (null)]
        version_added: 2.5

- new_snapshot_name
        Value to rename the existing snapshot to.
        [Default: (null)]
        version_added: 2.5

- password
        The password of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PASSWORD' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: pass, pwd)[Default: (null)]
        type: str

- port
        The port number of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PORT' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: 443]
        type: int
        version_added: 2.5

- quiesce
        If set to `true' and virtual machine is powered on, it will quiesce the file system in virtual machine.
        Note that VMWare Tools are required for this flag.
        If virtual machine is powered off or VMware Tools are not available, then this flag is set to `false'.
        If virtual machine does not provide capability to take quiesce snapshot, then this flag is set to `false'.
        [Default: False]
        type: bool
        version_added: 2.4

- remove_children
        If set to `true' and state is set to `absent', then entire snapshot subtree is set for removal.
        [Default: False]
        type: bool
        version_added: 2.4

- snapshot_name
        Sets the snapshot name to manage.
        This param is required only if state is not `remove_all'
        [Default: (null)]

= state
        Manage snapshot(s) attached to a specific virtual machine.
        If set to `present' and snapshot absent, then will create a new snapshot with the given name.
        If set to `present' and snapshot present, then no changes are made.
        If set to `absent' and snapshot present, then snapshot with the given name is removed.
        If set to `absent' and snapshot absent, then no changes are made.
        If set to `revert' and snapshot present, then virtual machine state is reverted to the given snapshot.
        If set to `revert' and snapshot absent, then no changes are made.
        If set to `remove_all' and snapshot(s) present, then all snapshot(s) will be removed.
        If set to `remove_all' and snapshot(s) absent, then no changes are made.
        (Choices: present, absent, revert, remove_all)[Default: present]

- use_instance_uuid
        Whether to use the VMWare instance UUID rather than the BIOS UUID.
        [Default: False]
        type: bool
        version_added: 2.8

- username
        The username of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_USER' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: admin, user)[Default: (null)]
        type: str

- uuid
        UUID of the instance to manage if known, this is VMware's BIOS UUID by default.
        This is required if `name' parameter is not supplied.
        [Default: (null)]

- validate_certs
        Allows connection when SSL certificates are not valid. Set to `false' when certificates are not trusted.
        If the value is not specified in the task, the value of environment variable `VMWARE_VALIDATE_CERTS' will be used instead.
        Environment variable support added in Ansible 2.6.
        If set to `yes', please make sure Python >= 2.7.9 is installed on the given machine.
        [Default: True]
        type: bool


NOTES:
      * Tested on vSphere 5.5, 6.0 and 6.5


REQUIREMENTS:  python >= 2.6, PyVmomi

AUTHOR: Loic Blot (@nerzhul) <loic.blot@unix-experience.fr>
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a snapshot
    vmware_guest_snapshot:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      folder: "/{{ datacenter_name }}/vm/"
      name: "{{ guest_name }}"
      state: present
      snapshot_name: snap1
      description: snap1_description
    delegate_to: localhost

  - name: Remove a snapshot
    vmware_guest_snapshot:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      folder: "/{{ datacenter_name }}/vm/"
      name: "{{ guest_name }}"
      state: absent
      snapshot_name: snap1
    delegate_to: localhost

  - name: Revert to a snapshot
    vmware_guest_snapshot:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      folder: "/{{ datacenter_name }}/vm/"
      name: "{{ guest_name }}"
      state: revert
      snapshot_name: snap1
    delegate_to: localhost

  - name: Remove all snapshots of a VM
    vmware_guest_snapshot:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      folder: "/{{ datacenter_name }}/vm/"
      name: "{{ guest_name }}"
      state: remove_all
    delegate_to: localhost

  - name: Take snapshot of a VM using quiesce and memory flag on
    vmware_guest_snapshot:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      folder: "/{{ datacenter_name }}/vm/"
      name: "{{ guest_name }}"
      state: present
      snapshot_name: dummy_vm_snap_0001
      quiesce: yes
      memory_dump: yes
    delegate_to: localhost

  - name: Remove a snapshot and snapshot subtree
    vmware_guest_snapshot:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      folder: "/{{ datacenter_name }}/vm/"
      name: "{{ guest_name }}"
      state: absent
      remove_children: yes
      snapshot_name: snap1
    delegate_to: localhost

  - name: Rename a snapshot
    vmware_guest_snapshot:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      datacenter: "{{ datacenter_name }}"
      folder: "/{{ datacenter_name }}/vm/"
      name: "{{ guest_name }}"
      state: present
      snapshot_name: current_snap_name
      new_snapshot_name: im_renamed
      new_description: "{{ new_snapshot_description }}"
    delegate_to: localhost


RETURN VALUES:

snapshot_results:
    description: metadata about the virtual machine snapshots
    returned: always
    type: dict
    sample: {
      "current_snapshot": {
          "creation_time": "2019-04-09T14:40:26.617427+00:00",
          "description": "Snapshot 4 example",
          "id": 4,
          "name": "snapshot4",
          "state": "poweredOff"
      },
      "snapshots": [
          {
              "creation_time": "2019-04-09T14:38:24.667543+00:00",
              "description": "Snapshot 3 example",
              "id": 3,
              "name": "snapshot3",
              "state": "poweredOff"
          },
          {
              "creation_time": "2019-04-09T14:40:26.617427+00:00",
              "description": "Snapshot 4 example",
              "id": 4,
              "name": "snapshot4",
              "state": "poweredOff"
          }
      ]
    }

