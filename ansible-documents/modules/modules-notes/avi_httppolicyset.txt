> AVI_HTTPPOLICYSET    (/usr/lib/python2.7/dist-packages/ansible/modules/network/avi/avi_httppolicyset.py)

        This module is used to configure HTTPPolicySet object more examples at https://github.com/avinetworks/devops

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_context
        Avi API context that includes current session ID and CSRF Token.
        This allows user to perform single login and re-use the session.
        [Default: (null)]
        type: dict
        version_added: 2.5

- api_version
        Avi API version of to use for Avi API and objects.
        [Default: 16.4.4]
        type: str

- avi_api_patch_op
        Patch operation to use when using avi_api_update_method as patch.
        (Choices: add, replace, delete)[Default: (null)]
        version_added: 2.5

- avi_api_update_method
        Default method for object update is HTTP PUT.
        Setting to patch will override that behavior to use HTTP PATCH.
        (Choices: put, patch)[Default: put]
        version_added: 2.5

- avi_credentials
        Avi Credentials dictionary which can be used in lieu of enumerating Avi Controller login details.
        [Default: (null)]
        type: dict
        version_added: 2.5

- cloud_config_cksum
        Checksum of cloud configuration for pool.
        Internally set by cloud connector.
        [Default: (null)]

- controller
        IP address or hostname of the controller. The default value is the environment variable `AVI_CONTROLLER'.
        [Default: ]
        type: str

- created_by
        Creator name.
        [Default: (null)]

- description
        User defined description for the object.
        [Default: (null)]

- http_request_policy
        Http request policy for the virtual service.
        [Default: (null)]

- http_response_policy
        Http response policy for the virtual service.
        [Default: (null)]

- http_security_policy
        Http security policy for the virtual service.
        [Default: (null)]

- is_internal_policy
        Boolean flag to set is_internal_policy.
        Default value when not specified in API or module is interpreted by Avi Controller as False.
        [Default: (null)]
        type: bool

= name
        Name of the http policy set.


- password
        Password of Avi user in Avi controller. The default value is the environment variable `AVI_PASSWORD'.
        [Default: ]
        type: str

- state
        The state that should be applied on the entity.
        (Choices: absent, present)[Default: present]

- tenant
        Name of tenant used for all Avi API calls and context of object.
        [Default: admin]
        type: str

- tenant_ref
        It is a reference to an object of type tenant.
        [Default: (null)]

- tenant_uuid
        UUID of tenant used for all Avi API calls and context of object.
        [Default: ]
        type: str

- url
        Avi controller URL of the object.
        [Default: (null)]

- username
        Username used for accessing Avi controller. The default value is the environment variable `AVI_USERNAME'.
        [Default: ]
        type: str

- uuid
        Uuid of the http policy set.
        [Default: (null)]


NOTES:
      * For more information on using Ansible to manage Avi Network devices see https://www.ansible.com/ansible-avi-networks.


REQUIREMENTS:  avisdk

AUTHOR: Gaurav Rastogi (@grastogi23) <grastogi@avinetworks.com>
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a HTTP Policy set two switch between testpool1 and testpool2
  avi_httppolicyset:
    controller: 10.10.27.90
    username: admin
    password: AviNetworks123!
    name: test-HTTP-Policy-Set
    tenant_ref: admin
    http_request_policy:
    rules:
      - index: 1
        enable: true
        name: test-test1
        match:
          path:
            match_case: INSENSITIVE
            match_str:
              - /test1
            match_criteria: EQUALS
        switching_action:
          action: HTTP_SWITCHING_SELECT_POOL
          status_code: HTTP_LOCAL_RESPONSE_STATUS_CODE_200
          pool_ref: "/api/pool?name=testpool1"
      - index: 2
        enable: true
        name: test-test2
        match:
          path:
            match_case: INSENSITIVE
            match_str:
              - /test2
            match_criteria: CONTAINS
        switching_action:
          action: HTTP_SWITCHING_SELECT_POOL
          status_code: HTTP_LOCAL_RESPONSE_STATUS_CODE_200
          pool_ref: "/api/pool?name=testpool2"
    is_internal_policy: false


RETURN VALUES:

obj:
    description: HTTPPolicySet (api/httppolicyset) object
    returned: success, changed
    type: dict

