> WIN_DOMAIN_MEMBERSHIP    (/usr/lib/python2.7/dist-packages/ansible/modules/windows/win_domain_membership.py)

        Manages domain membership or workgroup membership for a Windows host. Also supports hostname changes. This module may require
        subsequent use of the [win_reboot] action if changes are made.

  * This module is maintained by The Ansible Core Team
OPTIONS (= is mandatory):

- dns_domain_name
        When `state' is `domain', the DNS name of the domain to which the targeted Windows host should be joined.
        [Default: (null)]
        type: str

- domain_admin_password
        Password for the specified `domain_admin_user'.
        [Default: (null)]
        type: str

= domain_admin_user
        Username of a domain admin for the target domain (required to join or leave the domain).

        type: str

- domain_ou_path
        The desired OU path for adding the computer object.
        This is only used when adding the target host to a domain, if it is already a member then it is ignored.
        [Default: (null)]
        type: str
        version_added: 2.4

- hostname
        The desired hostname for the Windows host.
        [Default: (null)]
        type: str

- state
        Whether the target host should be a member of a domain or workgroup.
        (Choices: domain, workgroup)[Default: (null)]
        type: str

- workgroup_name
        When `state' is `workgroup', the name of the workgroup that the Windows host should be in.
        [Default: (null)]
        type: str


SEE ALSO:
      * Module win_domain
           The official documentation on the win_domain module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_module.html
      * Module win_domain_controller
           The official documentation on the win_domain_controller module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_controller_module.html
      * Module win_domain_computer
           The official documentation on the win_domain_computer module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_computer_module.html
      * Module win_domain_group
           The official documentation on the win_domain_group module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_group_module.html
      * Module win_domain_user
           The official documentation on the win_domain_user module.
           https://docs.ansible.com/ansible/latest/modules/win_domain_user_module.html
      * Module win_group
           The official documentation on the win_group module.
           https://docs.ansible.com/ansible/latest/modules/win_group_module.html
      * Module win_group_membership
           The official documentation on the win_group_membership module.
           https://docs.ansible.com/ansible/latest/modules/win_group_membership_module.html
      * Module win_user
           The official documentation on the win_user module.
           https://docs.ansible.com/ansible/latest/modules/win_user_module.html


AUTHOR: Matt Davis (@nitzmahone)
        METADATA:
          status:
          - preview
          supported_by: core
        

EXAMPLES:

# host should be a member of domain ansible.vagrant; module will ensure the hostname is mydomainclient
# and will use the passed credentials to join domain if necessary.
# Ansible connection should use local credentials if possible.
# If a reboot is required, the second task will trigger one and wait until the host is available.
- hosts: winclient
  gather_facts: no
  tasks:
  - win_domain_membership:
      dns_domain_name: ansible.vagrant
      hostname: mydomainclient
      domain_admin_user: testguy@ansible.vagrant
      domain_admin_password: password123!
      domain_ou_path: "OU=Windows,OU=Servers,DC=ansible,DC=vagrant"
      state: domain
    register: domain_state

  - win_reboot:
    when: domain_state.reboot_required



# Host should be in workgroup mywg- module will use the passed credentials to clean-unjoin domain if possible.
# Ansible connection should use local credentials if possible.
# The domain admin credentials can be sourced from a vault-encrypted variable
- hosts: winclient
  gather_facts: no
  tasks:
  - win_domain_membership:
      workgroup_name: mywg
      domain_admin_user: '{{ win_domain_admin_user }}'
      domain_admin_password: '{{ win_domain_admin_password }}'
      state: workgroup


RETURN VALUES:

reboot_required:
    description: True if changes were made that require a reboot.
    returned: always
    type: bool
    sample: true

