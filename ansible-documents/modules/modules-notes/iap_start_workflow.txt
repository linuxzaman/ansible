> IAP_START_WORKFLOW    (/usr/lib/python2.7/dist-packages/ansible/modules/network/itential/iap_start_workflow.py)

        This will start a specified workflow in the Itential Automation Platform with given arguments.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= description
        Provide the description for the workflow
        [Default: None]
        type: str

- https
        Use HTTPS to connect
        By default using http
        [Default: False]
        type: bool

= iap_fqdn
        Provide the fqdn for the Itential Automation Platform
        [Default: None]
        type: str

= iap_port
        Provide the port number for the Itential Automation Platform
        [Default: None]
        type: str

= token_key
        Token key generated by iap_token module for the Itential Automation Platform
        [Default: None]
        type: str

- validate_certs
        If `no', SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using
        self-signed certificates.
        [Default: False]
        type: bool

= variables
        Provide the values to the job variables
        [Default: None]
        type: dict

= workflow_name
        Provide the workflow name
        [Default: None]
        type: str


AUTHOR: Itential (@cma0) <opensource@itential.com>
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Start a workflow in the Itential Automation Platform
  iap_start_workflow:
    iap_port: 3000
    iap_fqdn: localhost
    token_key: "DFSFSFHFGFGF[DSFSFAADAFASD%3D"
    workflow_name: "RouterUpgradeWorkflow"
    description: "OS-Router-Upgrade"
    variables: {"deviceName":"ASR9K"}
  register: result

- debug: var=result


RETURN VALUES:

response:
    description: The result contains the response from the call
    type: dict
    returned: always
msg:
    description: The msg will contain the error code or status of the workflow
    type: str
    returned: always

