> K8S    (/usr/lib/python2.7/dist-packages/ansible/modules/clustering/openshift/_openshift_raw.py)

        Use the OpenShift Python client to perform CRUD operations on K8s objects. Pass the object definition from a source file or
        inline. See examples for reading files and using Jinja templates or vault-encrypted files. Access to the full range of K8s APIs.
        Use the [k8s_facts] module to obtain a list of items about an object of type `kind' Authenticate using either a config file,
        certificates, password or token. Supports check mode.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_key
        Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.
        [Default: (null)]
        type: str

- api_version
        Use to specify the API version. Use to create, delete, or discover an object without providing a full resource definition. Use in
        conjunction with `kind', `name', and `namespace' to identify a specific object. If `resource definition' is provided, the
        `apiVersion' from the `resource_definition' will override this option.
        (Aliases: api, version)[Default: v1]
        type: str

- append_hash
        Whether to append a hash to a resource name for immutability purposes
        Applies only to ConfigMap and Secret resources
        The parameter will be silently ignored for other resource kinds
        The full definition of an object is needed to generate the hash - this means that deleting an object created with append_hash
        will only work if the same object is passed with state=absent (alternatively, just use state=absent with the name including the
        generated hash and append_hash=no)
        [Default: (null)]
        type: bool
        version_added: 2.8

- ca_cert
        Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate
        validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.
        (Aliases: ssl_ca_cert)[Default: (null)]
        type: path

- client_cert
        Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.
        (Aliases: cert_file)[Default: (null)]
        type: path

- client_key
        Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.
        (Aliases: key_file)[Default: (null)]
        type: path

- context
        The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.
        [Default: (null)]
        type: str

- force
        If set to `yes', and `state' is `present', an existing object will be replaced.
        [Default: False]
        type: bool

- host
        Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.
        [Default: (null)]
        type: str

- kind
        Use to specify an object model. Use to create, delete, or discover an object without providing a full resource definition. Use in
        conjunction with `api_version', `name', and `namespace' to identify a specific object. If `resource definition' is provided, the
        `kind' from the `resource_definition' will override this option.
        [Default: (null)]
        type: str

- kubeconfig
        Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client
        will attempt to load the default configuration file from `~/.kube/config.json'. Can also be specified via K8S_AUTH_KUBECONFIG
        environment variable.
        [Default: (null)]
        type: path

- merge_type
        Whether to override the default patch merge approach with a specific type. By default, the strategic merge will typically be
        used.
        For example, Custom Resource Definitions typically aren't updatable by the usual strategic merge. You may want to use `merge' if
        you see "strategic merge patch format is not supported"
        See https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-
        update-a-deployment
        Requires openshift >= 0.6.2
        If more than one merge_type is given, the merge_types will be tried in order
        If openshift >= 0.6.2, this defaults to `['strategic-merge', 'merge']', which is ideal for using the same parameters on resource
        kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default is simply `strategic-merge'.
        (Choices: json, merge, strategic-merge)[Default: (null)]
        type: list
        version_added: 2.7

- name
        Use to specify an object name. Use to create, delete, or discover an object without providing a full resource definition. Use in
        conjunction with `api_version', `kind' and `namespace' to identify a specific object. If `resource definition' is provided, the
        `metadata.name' value from the `resource_definition' will override this option.
        [Default: (null)]
        type: str

- namespace
        Use to specify an object namespace. Useful when creating, deleting, or discovering an object without providing a full resource
        definition. Use in conjunction with `api_version', `kind', and `name' to identify a specfic object. If `resource definition' is
        provided, the `metadata.namespace' value from the `resource_definition' will override this option.
        [Default: (null)]
        type: str

- password
        Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.
        Please read the description of the `username' option for a discussion of when this option is applicable.
        [Default: (null)]
        type: str

- resource_definition
        Provide a valid YAML definition (either as a string, list, or dict) for an object when creating or updating. NOTE: `kind',
        `api_version', `name', and `namespace' will be overwritten by corresponding values found in the provided `resource_definition'.
        (Aliases: definition, inline)[Default: (null)]

- src
        Provide a path to a file containing a valid YAML definition of an object or objects to be created or updated. Mutually exclusive
        with `resource_definition'. NOTE: `kind', `api_version', `name', and `namespace' will be overwritten by corresponding values
        found in the configuration read in from the `src' file.
        Reads from the local file system. To read from the Ansible controller's file system, including vaulted files, use the file lookup
        plugin or template lookup plugin, combined with the from_yaml filter, and pass the result to `resource_definition'. See Examples
        below.
        [Default: (null)]
        type: path

- state
        Determines if an object should be created, patched, or deleted. When set to `present', an object will be created, if it does not
        already exist. If set to `absent', an existing object will be deleted. If set to `present', an existing object will be patched,
        if its attributes differ from those specified using `resource_definition' or `src'.
        (Choices: absent, present)[Default: present]
        type: str

- username
        Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.
        Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of
        authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the `k8s_auth' module,
        as that might do what you need.
        [Default: (null)]
        type: str

- validate
        how (if at all) to validate the resource definition against the kubernetes schema. Requires the kubernetes-validate python module
        [Default: (null)]
        suboptions:
          fail_on_error:
            description: whether to fail on validation errors.
            required: true
            type: bool
          strict:
            default: false
            description: whether to fail when passing unexpected properties
            type: bool
          version:
            description: version of Kubernetes to validate against. defaults to Kubernetes
              server version
        
        version_added: 2.8

- validate_certs
        Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.
        (Aliases: verify_ssl)[Default: (null)]
        type: bool

- wait
        Whether to wait for certain resource kinds to end up in the desired state. By default the module exits once Kubernetes has
        received the request
        Implemented for `state=present' for `Deployment', `DaemonSet' and `Pod', and for `state=absent' for all resource kinds.
        For resource kinds without an implementation, `wait' returns immediately unless `wait_condition' is set.
        [Default: False]
        type: bool
        version_added: 2.8

- wait_condition
        Specifies a custom condition on the status to wait for. Ignored if `wait' is not set or is set to False.
        [Default: (null)]
        suboptions:
          reason:
            description:
            - The value of the reason field in your desired condition
            - For example, if a `Deployment' is paused, The `Progressing' c(type) will have
              the `DeploymentPaused' reason.
            - The possible reasons in a condition are specific to each resource type in Kubernetes.
              See the API documentation of the status field for a given resource to see possible
              choices.
          status:
            choices:
            - true
            - false
            - Unknown
            description:
            - The value of the status field in your desired condition.
            - For example, if a `Deployment' is paused, the `Progressing' `type' will have
              the `Unknown' status.
          type:
            description:
            - The type of condition to wait for. For example, the `Pod' resource will set
              the `Ready' condition (among others)
            - Required if you are specifying a `wait_condition'. If left empty, the `wait_condition'
              field will be ignored.
            - The possible types for a condition are specific to each resource type in Kubernetes.
              See the API documentation of the status field for a given resource to see possible
              choices.
        
        version_added: 2.8

- wait_timeout
        How long in seconds to wait for the resource to end up in the desired state. Ignored if `wait' is not set.
        [Default: 120]
        version_added: 2.8


NOTES:
      * The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on
        both platforms. For API version details and additional information visit https://github.com/openshift/openshift-restclient-
        python
      * To avoid SSL certificate validation errors when `validate_certs' is `True', the full certificate chain for the API server
        must be provided via `ca_cert' or in the kubeconfig file.


REQUIREMENTS:  python >= 2.7, openshift >= 0.6, PyYAML >= 3.11

AUTHOR: Chris Houseknecht (@chouseknecht), Fabian von Feilitzsch (@fabianvf)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a k8s namespace
  k8s:
    name: testing
    api_version: v1
    kind: Namespace
    state: present

- name: Create a Service object from an inline definition
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: web
        namespace: testing
        labels:
          app: galaxy
          service: web
      spec:
        selector:
          app: galaxy
          service: web
        ports:
        - protocol: TCP
          targetPort: 8000
          name: port-8000-tcp
          port: 8000

- name: Create a Service object by reading the definition from a file
  k8s:
    state: present
    src: /testing/service.yml

- name: Remove an existing Service object
  k8s:
    state: absent
    api_version: v1
    kind: Service
    namespace: testing
    name: web

# Passing the object definition from a file

- name: Create a Deployment by reading the definition from a local file
  k8s:
    state: present
    src: /testing/deployment.yml

- name: >-
    Read definition file from the Ansible controller file system.
    If the definition file has been encrypted with Ansible Vault it will automatically be decrypted.
  k8s:
    state: present
    definition: "{{ lookup('file', '/testing/deployment.yml') }}"

- name: Read definition file from the Ansible controller file system after Jinja templating
  k8s:
    state: present
    definition: "{{ lookup('template', '/testing/deployment.yml') }}"

- name: fail on validation errors
  k8s:
    state: present
    definition: "{{ lookup('template', '/testing/deployment.yml') }}"
    validate:
      fail_on_error: yes

- name: warn on validation errors, check for unexpected properties
  k8s:
    state: present
    definition: "{{ lookup('template', '/testing/deployment.yml') }}"
    validate:
      fail_on_error: no
      strict: yes


RETURN VALUES:

result:
  description:
  - The created, patched, or otherwise present object. Will be empty in the case of a deletion.
  returned: success
  type: complex
  contains:
     api_version:
       description: The versioned schema of this representation of an object.
       returned: success
       type: str
     kind:
       description: Represents the REST resource this object represents.
       returned: success
       type: str
     metadata:
       description: Standard object metadata. Includes name, namespace, annotations, labels, etc.
       returned: success
       type: complex
     spec:
       description: Specific attributes of the object. Will vary based on the I(api_version) and I(kind).
       returned: success
       type: complex
     status:
       description: Current status details for the object.
       returned: success
       type: complex
     items:
       description: Returned only when multiple yaml documents are passed to src or resource_definition
       returned: when resource_definition or src contains list of objects
       type: list
     duration:
       description: elapsed time of task in seconds
       returned: when C(wait) is true
       type: int
       sample: 48

