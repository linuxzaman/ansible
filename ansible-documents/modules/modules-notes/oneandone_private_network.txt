> ONEANDONE_PRIVATE_NETWORK    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/oneandone/oneandone_private_network.py)

        Create, remove, reconfigure, update a private network. This module has a dependency on 1and1 >= 1.0

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- add_members
        List of server identifiers (name or id) to be added to the private network.
        [Default: (null)]

- api_url
        Custom API URL. Overrides the ONEANDONE_API_URL environement variable.
        [Default: (null)]

= auth_token
        Authenticating API token provided by 1&1.


- datacenter
        The identifier of the datacenter where the private network will be created
        [Default: (null)]

- description
        Set a description for the network.
        [Default: (null)]

= name
        Private network name used with present state. Used as identifier (id or name) when used with absent state.


- network_address
        Set a private network space, i.e. 192.168.1.0
        [Default: (null)]

= private_network
        The identifier (id or name) of the network used with update state.


- remove_members
        List of server identifiers (name or id) to be removed from the private network.
        [Default: (null)]

- state
        Define a network's state to create, remove, or update.
        (Choices: present, absent, update)[Default: present]

- subnet_mask
        Set the netmask for the private network, i.e. 255.255.255.0
        [Default: (null)]

- wait
        wait for the instance to be in state 'running' before returning
        [Default: yes]
        type: bool

- wait_interval
        Defines the number of seconds to wait when using the _wait_for methods
        [Default: 5]

- wait_timeout
        how long before wait gives up, in seconds
        [Default: 600]


REQUIREMENTS:  1and1, python >= 2.6

AUTHOR: Amel Ajdinovic (@aajdinov), Ethan Devenport (@edevenport)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Provisioning example. Create and destroy private networks.

- oneandone_private_network:
    auth_token: oneandone_private_api_key
    name: backup_network
    description: Testing creation of a private network with ansible
    network_address: 70.35.193.100
    subnet_mask: 255.0.0.0
    datacenter: US

- oneandone_private_network:
    auth_token: oneandone_private_api_key
    state: absent
    name: backup_network

# Modify the private network.

- oneandone_private_network:
    auth_token: oneandone_private_api_key
    state: update
    private_network: backup_network
    network_address: 192.168.2.0
    subnet_mask: 255.255.255.0

# Add members to the private network.

- oneandone_private_network:
    auth_token: oneandone_private_api_key
    state: update
    private_network: backup_network
    add_members:
     - server identifier (id or name)

# Remove members from the private network.

- oneandone_private_network:
    auth_token: oneandone_private_api_key
    state: update
    private_network: backup_network
    remove_members:
     - server identifier (id or name)


RETURN VALUES:

private_network:
    description: Information about the private network.
    type: dict
    sample: '{"name": "backup_network", "id": "55726DEDA20C99CF6F2AF8F18CAC9963"}'
    returned: always

