> IG_CONFIG    (/usr/lib/python2.7/dist-packages/ansible/modules/network/ingate/ig_config.py)

        Manage the configuration database on an Ingate SBC.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- add
        Add a row to a table.
        [Default: (null)]
        type: bool

- client
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          address:
            description:
            - The hostname or IP address to the unit.
            required: true
            type: str
          password:
            description:
            - The password for the REST API user.
            required: true
            type: str
          port:
            description:
            - Which HTTP(S) port to connect to.
            type: int
          scheme:
            choices:
            - http
            - https
            description:
            - Which HTTP protocol to use.
            required: true
            type: str
          timeout:
            description:
            - The timeout (in seconds) for REST API requests.
            type: int
          username:
            description:
            - The username of the REST API user.
            required: true
            type: str
          validate_certs:
            aliases:
            - verify_ssl
            default: true
            description:
            - Verify the unit's HTTPS certificate.
            type: bool
          version:
            choices:
            - v1
            default: v1
            description:
            - REST API version.
            type: str
        

- columns
        A dict containing column names/values.
        [Default: (null)]

- delete
        Delete all rows in a table or a specific row.
        [Default: (null)]
        type: bool

- download
        Download the configuration database from the unit.
        [Default: (null)]
        type: bool

- factory
        Reset the preliminary configuration to its factory defaults.
        [Default: (null)]
        type: bool

- filename
        The name of the file to store the downloaded configuration in. Refer to the `download' option.
        [Default: (null)]

- get
        Return all rows in a table or a specific row.
        [Default: (null)]
        type: bool

- modify
        Modify a row in a table.
        [Default: (null)]
        type: bool

- no_response
        Expect no response when storing the preliminary configuration. Refer to the `store' option.
        [Default: (null)]
        type: bool

- path
        Where in the filesystem to store the downloaded configuration. Refer to the `download' option.
        [Default: (null)]

- return_rowid
        Get rowid(s) from a table where the columns match.
        [Default: (null)]
        type: bool

- revert
        Reset the preliminary configuration.
        [Default: (null)]
        type: bool

- rowid
        A row id.
        [Default: (null)]
        type: int

- store
        Store the preliminary configuration.
        [Default: (null)]
        type: bool

- store_download
        If the downloaded configuration should be stored on disk. Refer to the `download' option.
        [Default: False]
        type: bool

- table
        The name of the table.
        [Default: (null)]


NOTES:
      * If `store_download' is set to True, and `path' and `filename' is omitted, the file will be stored in the current directory
        with an automatic filename.
      * This module requires that the Ingate Python SDK is installed on the host. To install the SDK use the pip command from your
        shell `pip install ingatesdk'.


REQUIREMENTS:  ingatesdk >= 1.0.6

AUTHOR: Ingate Systems AB (@ingatesystems)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Add/remove DNS servers
  hosts: 192.168.1.1
  connection: local
  vars:
    client_rw:
      version: v1
      address: "{{ inventory_hostname }}"
      scheme: http
      username: alice
      password: foobar
  tasks:

  - name: Load factory defaults
    ig_config:
      client: "{{ client_rw }}"
      factory: true
    register: result
  - debug:
      var: result

  - name: Revert to last known applied configuration
    ig_config:
      client: "{{ client_rw }}"
      revert: true
    register: result
  - debug:
      var: result

  - name: Change the unit name
    ig_config:
      client: "{{ client_rw }}"
      modify: true
      table: misc.unitname
      columns:
        unitname: "Test Ansible"
    register: result
  - debug:
      var: result

  - name: Add a DNS server
    ig_config:
      client: "{{ client_rw }}"
      add: true
      table: misc.dns_servers
      columns:
        server: 192.168.1.21
    register: result
  - debug:
      var: result

  - name: Add a DNS server
    ig_config:
      client: "{{ client_rw }}"
      add: true
      table: misc.dns_servers
      columns:
        server: 192.168.1.22
    register: result
  - debug:
      var: result

  - name: Add a DNS server
    ig_config:
      client: "{{ client_rw }}"
      add: true
      table: misc.dns_servers
      columns:
        server: 192.168.1.23
    register: last_dns
  - debug:
      var: last_dns

  - name: Modify the last added DNS server
    ig_config:
      client: "{{ client_rw }}"
      modify: true
      table: misc.dns_servers
      rowid: "{{ last_dns['add'][0]['id'] }}"
      columns:
        server: 192.168.1.24
    register: result
  - debug:
      var: result

  - name: Return the last added DNS server
    ig_config:
      client: "{{ client_rw }}"
      get: true
      table: misc.dns_servers
      rowid: "{{ last_dns['add'][0]['id'] }}"
    register: result
  - debug:
      var: result

  - name: Remove last added DNS server
    ig_config:
      client: "{{ client_rw }}"
      delete: true
      table: misc.dns_servers
      rowid: "{{ last_dns['add'][0]['id'] }}"
    register: result
  - debug:
      var: result

  - name: Return the all rows from table misc.dns_servers
    ig_config:
      client: "{{ client_rw }}"
      get: true
      table: misc.dns_servers
    register: result
  - debug:
      var: result

  - name: Remove remaining DNS servers
    ig_config:
      client: "{{ client_rw }}"
      delete: true
      table: misc.dns_servers
    register: result
  - debug:
      var: result

  - name: Get rowid for interface eth0
    ig_config:
      client: "{{ client_rw }}"
      return_rowid: true
      table: network.local_nets
      columns:
        interface: eth0
    register: result
  - debug:
      var: result

  - name: Store the preliminary configuration
    ig_config:
      client: "{{ client_rw }}"
      store: true
    register: result
  - debug:
      var: result

  - name: Do backup of the configuration database
    ig_config:
      client: "{{ client_rw }}"
      download: true
      store_download: true
    register: result
  - debug:
      var: result


RETURN VALUES:

add:
  description: A list containing information about the added row
  returned: when C(add) is yes and success
  type: complex
  contains:
    href:
      description: The REST API URL to the added row
      returned: success
      type: string
      sample: http://192.168.1.1/api/v1/misc/dns_servers/2
    data:
      description: Column names/values
      returned: success
      type: complex
      sample: {'number': '2', 'server': '10.48.254.33'}
    id:
      description: The row id
      returned: success
      type: int
      sample: 22
delete:
  description: A list containing information about the deleted row(s)
  returned: when C(delete) is yes and success
  type: complex
  contains:
    table:
      description: The name of the table
      returned: success
      type: string
      sample: misc.dns_servers
    data:
      description: Column names/values
      returned: success
      type: complex
      sample: {'number': '2', 'server': '10.48.254.33'}
    id:
      description: The row id
      returned: success
      type: int
      sample: 22
get:
  description: A list containing information about the row(s)
  returned: when C(get) is yes and success
  type: complex
  contains:
    table:
      description: The name of the table
      returned: success
      type: string
      sample: Testname
    href:
      description: The REST API URL to the row
      returned: success
      type: string
      sample: http://192.168.1.1/api/v1/misc/dns_servers/1
    data:
      description: Column names/values
      returned: success
      type: complex
      sample: {'number': '2', 'server': '10.48.254.33'}
    id:
      description: The row id
      returned: success
      type: int
      sample: 1
modify:
  description: A list containing information about the modified row
  returned: when C(modify) is yes and success
  type: complex
  contains:
    table:
      description: The name of the table
      returned: success
      type: string
      sample: Testname
    href:
      description: The REST API URL to the modified row
      returned: success
      type: string
      sample: http://192.168.1.1/api/v1/misc/dns_servers/1
    data:
      description: Column names/values
      returned: success
      type: complex
      gsample: {'number': '2', 'server': '10.48.254.33'}
    id:
      description: The row id
      returned: success
      type: int
      sample: 10
revert:
  description: A command status message
  returned: when C(revert) is yes and success
  type: complex
  contains:
    msg:
      description: The command status message
      returned: success
      type: string
      sample: reverted the configuration to the last applied configuration.
factory:
  description: A command status message
  returned: when C(factory) is yes and success
  type: complex
  contains:
    msg:
      description: The command status message
      returned: success
      type: string
      sample: reverted the configuration to the factory configuration.
store:
  description: A command status message
  returned: when C(store) is yes and success
  type: complex
  contains:
    msg:
      description: The command status message
      returned: success
      type: string
      sample: Successfully applied and saved the configuration.
return_rowid:
  description: The matched row id(s).
  returned: when C(return_rowid) is yes and success
  type: list
  sample: [1, 3]
download:
  description: Configuraton database and meta data
  returned: when C(download) is yes and success
  type: complex
  contains:
    config:
      description: The configuration database
      returned: success
      type: string
    filename:
      description: A suggested name for the configuration
      returned: success
      type: string
      sample: testname_2018-10-01T214040.cfg
    mimetype:
      description: The mimetype
      returned: success
      type: string
      sample: application/x-config-database

