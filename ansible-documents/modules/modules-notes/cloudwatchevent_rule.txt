> CLOUDWATCHEVENT_RULE    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/cloudwatchevent_rule.py)

        This module creates and manages CloudWatch event rules and targets.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- aws_access_key
        AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is
        used.
        (Aliases: ec2_access_key, access_key)[Default: (null)]
        type: str

- aws_secret_key
        AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is
        used.
        (Aliases: ec2_secret_key, secret_key)[Default: (null)]
        type: str

- debug_botocore_endpoint_logs
        Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing
        the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during
        a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
        [Default: no]
        type: bool
        version_added: 2.8

- description
        A description of the rule
        [Default: (null)]

- ec2_url
        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where
        region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL
        environment variable, if any, is used.
        [Default: (null)]
        type: str

- event_pattern
        A string pattern (in valid JSON format) that is used to match against incoming events to determine if the rule should be
        triggered
        [Default: (null)]

= name
        The name of the rule you are creating, updating or deleting. No spaces or special characters allowed (i.e. must match `[\.\-_A-
        Za-z0-9]+')


- profile
        Uses a boto profile. Only works with boto >= 2.24.0.
        [Default: (null)]
        type: str
        version_added: 1.6

- region
        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
        (Aliases: aws_region, ec2_region)[Default: (null)]
        type: str

- role_arn
        The Amazon Resource Name (ARN) of the IAM role associated with the rule
        [Default: (null)]

- schedule_expression
        A cron or rate expression that defines the schedule the rule will trigger on. For example, `cron(0 20 * * ? *'), `rate(5
        minutes')
        [Default: (null)]

- security_token
        AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
        (Aliases: access_token)[Default: (null)]
        type: str
        version_added: 1.6

- state
        Whether the rule is present (and enabled), disabled, or absent
        (Choices: present, disabled, absent)[Default: present]

- targets
        A dictionary array of targets to add to or update for the rule, in the form `{ id: [string], arn: [string], role_arn: [string],
        input: [valid JSON string], input_path: [valid JSONPath string], ecs_parameters: {task_definition_arn: [string], task_count:
        [int]}}'. `id' [required] is the unique target assignment ID. `arn' (required) is the Amazon Resource Name associated with the
        target. `role_arn' (optional) is The Amazon Resource Name of the IAM role to be used for this target when the rule is triggered.
        `input' (optional) is a JSON object that will override the event data when passed to the target.  `input_path' (optional) is a
        JSONPath string (e.g. `$.detail') that specifies the part of the event data to be passed to the target. If neither `input' nor
        `input_path' is specified, then the entire event is passed to the target in JSON form. `task_definition_arn' [optional] is ecs
        task definition arn. `task_count' [optional] is ecs task count.
        [Default: (null)]

- validate_certs
        When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        [Default: True]
        type: bool
        version_added: 1.5


NOTES:
      * A rule must contain at least an `event_pattern' or `schedule_expression'. A rule can have both an `event_pattern' and a
        `schedule_expression', in which case the rule will trigger on matching events as well as on a schedule.
      * When specifying targets, `input' and `input_path' are mutually-exclusive and optional parameters.
      * If parameters are not set within the module, the following environment variables can be used in decreasing order of
        precedence `AWS_URL' or `EC2_URL', `AWS_ACCESS_KEY_ID' or `AWS_ACCESS_KEY' or `EC2_ACCESS_KEY', `AWS_SECRET_ACCESS_KEY' or
        `AWS_SECRET_KEY' or `EC2_SECRET_KEY', `AWS_SECURITY_TOKEN' or `EC2_SECURITY_TOKEN', `AWS_REGION' or `EC2_REGION'
      * Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See
        https://boto.readthedocs.io/en/latest/boto_config_tut.html
      * `AWS_REGION' or `EC2_REGION' can be typically be used to specify the AWS region, when required, but this can also be
        configured in the boto config file


REQUIREMENTS:  boto, boto3, python >= 2.6

AUTHOR: Jim Dalton (@jsdalton) <jim.dalton@gmail.com>
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- cloudwatchevent_rule:
    name: MyCronTask
    schedule_expression: "cron(0 20 * * ? *)"
    description: Run my scheduled task
    targets:
      - id: MyTargetId
        arn: arn:aws:lambda:us-east-1:123456789012:function:MyFunction

- cloudwatchevent_rule:
    name: MyDisabledCronTask
    schedule_expression: "rate(5 minutes)"
    description: Run my disabled scheduled task
    state: disabled
    targets:
      - id: MyOtherTargetId
        arn: arn:aws:lambda:us-east-1:123456789012:function:MyFunction
        input: '{"foo": "bar"}'

- cloudwatchevent_rule:
    name: MyCronTask
    state: absent


RETURN VALUES:

rule:
    description: CloudWatch Event rule data
    returned: success
    type: dict
    sample:
      arn: 'arn:aws:events:us-east-1:123456789012:rule/MyCronTask'
      description: 'Run my scheduled task'
      name: 'MyCronTask'
      schedule_expression: 'cron(0 20 * * ? *)'
      state: 'ENABLED'
targets:
    description: CloudWatch Event target(s) assigned to the rule
    returned: success
    type: list
    sample: "[{ 'arn': 'arn:aws:lambda:us-east-1:123456789012:function:MyFunction', 'id': 'MyTargetId' }]"

