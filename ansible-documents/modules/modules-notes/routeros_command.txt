> ROUTEROS_COMMAND    (/usr/lib/python2.7/dist-packages/ansible/modules/network/routeros/routeros_command.py)

        Sends arbitrary commands to an RouterOS node and returns the results read from the device. This module includes an argument that
        will cause the module to wait for a specific condition before returning or timing out if the condition is not met.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= commands
        List of commands to send to the remote RouterOS device over the configured provider. The resulting output from the command is
        returned. If the `wait_for' argument is provided, the module is not returned until the condition is satisfied or the number of
        retries has expired.


- interval
        Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions,
        the interval indicates how long to wait before trying the command again.
        [Default: 1]

- match
        The `match' argument is used in conjunction with the `wait_for' argument to specify the match policy.  Valid values are `all' or
        `any'.  If the value is set to `all' then all conditionals in the wait_for must be satisfied.  If the value is set to `any' then
        only one of the values must be satisfied.
        (Choices: any, all)[Default: all]

- retries
        Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device
        every retry and evaluated against the `wait_for' conditions.
        [Default: 10]

- wait_for
        List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving
        forward. If the conditional is not true within the configured number of retries, the task fails. See examples.
        [Default: (null)]


AUTHOR: Egor Zaitsev (@heuels)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

tasks:
  - name: run command on remote devices
    routeros_command:
      commands: /system routerboard print

  - name: run command and check to see if output contains routeros
    routeros_command:
      commands: /system resource print
      wait_for: result[0] contains MikroTik

  - name: run multiple commands on remote nodes
    routeros_command:
      commands:
        - /system routerboard print
        - /system identity print

  - name: run multiple commands and evaluate the output
    routeros_command:
      commands:
        - /system routerboard print
        - /interface ethernet print
      wait_for:
        - result[0] contains x86
        - result[1] contains ether1


RETURN VALUES:

stdout:
  description: The set of responses from the commands
  returned: always apart from low level errors (such as action plugin)
  type: list
  sample: ['...', '...']
stdout_lines:
  description: The value of stdout split into a list
  returned: always apart from low level errors (such as action plugin)
  type: list
  sample: [['...', '...'], ['...'], ['...']]
failed_conditions:
  description: The list of conditionals that have failed
  returned: failed
  type: list
  sample: ['...', '...']

