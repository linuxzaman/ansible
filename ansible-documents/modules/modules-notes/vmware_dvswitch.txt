> VMWARE_DVSWITCH    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/vmware/vmware_dvswitch.py)

        This module can be used to create, remove a Distributed Switch.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- contact
        Dictionary which configures administrtor contact name and description for the Distributed Switch.
        Valid attributes are:
        - `name' (str): Administrator name.
        - `description' (str): Description or other details.
        [Default: (null)]
        type: dict
        version_added: 2.8
        

= datacenter_name
        The name of the datacenter that will contain the Distributed Switch.
        (Aliases: datacenter)

- description
        Description of the Distributed Switch.
        [Default: (null)]
        type: str
        version_added: 2.8
        

- discovery_operation
        Select the discovery operation.
        Required parameter for `state' both `present' and `absent', before Ansible 2.6 version.
        Required only if `state' is set to `present', for Ansible 2.6 and onwards.
        (Choices: both, advertise, listen)[Default: listen]

- discovery_proto
        Link discovery protocol between Cisco and Link Layer discovery.
        Required parameter for `state' both `present' and `absent', before Ansible 2.6 version.
        Required only if `state' is set to `present', for Ansible 2.6 and onwards.
        `cdp': Use Cisco Discovery Protocol (CDP).
        `lldp': Use Link Layer Discovery Protocol (LLDP).
        `disabled': Do not use a discovery protocol.
        (Aliases: discovery_protocol)(Choices: cdp, lldp, disabled)[Default: cdp]

- health_check
        Dictionary which configures Health Check for the Distributed Switch.
        Valid attributes are:
        - `vlan_mtu' (bool): VLAN and MTU health check. (default: False)
        - `teaming_failover' (bool): Teaming and failover health check. (default: False)
        - `vlan_mtu_interval' (int): VLAN and MTU health check interval (minutes). (default: 0)
        - The default for `vlan_mtu_interval' is 1 in the vSphere Client if the VLAN and MTU health check is enabled.
        - `teaming_failover_interval' (int): Teaming and failover health check interval (minutes). (default: 0)
        - The default for `teaming_failover_interval' is 1 in the vSphere Client if the Teaming and failover health check is enabled.
        [Default: {u'vlan_mtu': False, u'vlan_mtu_interval': 0, u'teaming_failover': False, u'teaming_failover_interval': 0}]
        type: dict
        version_added: 2.8
        

- hostname
        The hostname or IP address of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_HOST' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: (null)]
        type: str

- mtu
        The switch maximum transmission unit.
        Required parameter for `state' both `present' and `absent', before Ansible 2.6 version.
        Required only if `state' is set to `present', for Ansible 2.6 and onwards.
        Accepts value between 1280 to 9000 (both inclusive).
        [Default: 1500]
        type: int

- multicast_filtering_mode
        The multicast filtering mode.
        `basic' mode: multicast traffic for virtual machines is forwarded according to the destination MAC address of the multicast
        group.
        `snooping' mode: the Distributed Switch provides IGMP and MLD snooping according to RFC 4541.
        (Choices: basic, snooping)[Default: basic]
        type: str
        version_added: 2.8
        

- password
        The password of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PASSWORD' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: pass, pwd)[Default: (null)]
        type: str

- port
        The port number of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PORT' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: 443]
        type: int
        version_added: 2.5

- state
        If set to `present' and the Distributed Switch doesn't exists then the Distributed Switch will be created.
        If set to `absent' and the Distributed Switch exists then the Distributed Switch will be deleted.
        (Choices: present, absent)[Default: present]

= switch_name
        The name of the distribute vSwitch to create or remove.
        (Aliases: switch, dvswitch)

- switch_version
        The version of the Distributed Switch to create.
        Can be 6.0.0, 5.5.0, 5.1.0, 5.0.0 with a vCenter running vSphere 6.0 and 6.5.
        Can be 6.6.0, 6.5.0, 6.0.0 with a vCenter running vSphere 6.7.
        The version must macht the version of the ESXi hosts you want to connect.
        The version of the vCenter server is used if not specified.
        Required only if `state' is set to `present'.
        (Aliases: version)(Choices: 5.0.0, 5.1.0, 5.5.0, 6.0.0, 6.5.0, 6.6.0)[Default: (null)]
        version_added: 2.5
        

- uplink_prefix
        The prefix used for the naming of the uplinks.
        Only valid if the Distributed Switch will be created. Not used if the Distributed Switch is already present.
        Uplinks are created as Uplink 1, Uplink 2, etc. pp. by default.
        [Default: Uplink ]
        version_added: 2.8
        

- uplink_quantity
        Quantity of uplink per ESXi host added to the Distributed Switch.
        The uplink quantity can be increased or decreased, but a decrease will only be successfull if the uplink isn't used by a
        portgroup.
        Required parameter for `state' both `present' and `absent', before Ansible 2.6 version.
        Required only if `state' is set to `present', for Ansible 2.6 and onwards.
        [Default: (null)]

- username
        The username of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_USER' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: admin, user)[Default: (null)]
        type: str

- validate_certs
        Allows connection when SSL certificates are not valid. Set to `false' when certificates are not trusted.
        If the value is not specified in the task, the value of environment variable `VMWARE_VALIDATE_CERTS' will be used instead.
        Environment variable support added in Ansible 2.6.
        If set to `yes', please make sure Python >= 2.7.9 is installed on the given machine.
        [Default: True]
        type: bool


NOTES:
      * Tested on vSphere 6.5 and 6.7


REQUIREMENTS:  python >= 2.6, PyVmomi

AUTHOR: Joseph Callen (@jcpowermac), Abhijeet Kasurde (@Akasurde), Christian Kotte (@ckotte)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create dvSwitch
  vmware_dvswitch:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: '{{ datacenter }}'
    switch: dvSwitch
    version: 6.0.0
    mtu: 9000
    uplink_quantity: 2
    discovery_protocol: lldp
    discovery_operation: both
    state: present
  delegate_to: localhost

- name: Create dvSwitch with all options
  vmware_dvswitch:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: '{{ datacenter }}'
    switch: dvSwitch
    version: 6.5.0
    mtu: 9000
    uplink_quantity: 2
    uplink_prefix: 'Uplink_'
    discovery_protocol: cdp
    discovery_operation: both
    multicast_filtering_mode: snooping
    health_check:
      vlan_mtu: true
      vlan_mtu_interval: 1
      teaming_failover: true
      teaming_failover_interval: 1
    state: present
  delegate_to: localhost

- name: Delete dvSwitch
  vmware_dvswitch:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    datacenter: '{{ datacenter }}'
    switch: dvSwitch
    state: absent
  delegate_to: localhost


RETURN VALUES:

result:
    description: information about performed operation
    returned: always
    type: str
    sample: {
        "changed": false,
        "contact": null,
        "contact_details": null,
        "description": null,
        "discovery_operation": "both",
        "discovery_protocol": "cdp",
        "dvswitch": "test",
        "health_check_teaming": false,
        "health_check_teaming_interval": 0,
        "health_check_vlan": false,
        "health_check_vlan_interval": 0,
        "mtu": 9000,
        "multicast_filtering_mode": "basic",
        "result": "DVS already configured properly",
        "uplink_quantity": 2,
        "uplinks": [
            "Uplink_1",
            "Uplink_2"
        ],
        "version": "6.6.0"
    }

