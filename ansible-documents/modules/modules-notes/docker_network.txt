> DOCKER_NETWORK    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/docker/docker_network.py)

        Create/remove Docker networks and connect containers to them. Performs largely the same function as the "docker network" CLI
        subcommand.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_version
        The version of the Docker API running on the Docker Host.
        Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.
        If the value is not specified in the task, the value of environment variable `DOCKER_API_VERSION' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_api_version)[Default: auto]
        type: str

- appends
        By default the connected list is canonical, meaning containers not on the list are removed from the network. Use `appends' to
        leave existing containers connected.
        (Aliases: incremental)[Default: False]
        type: bool

- attachable
        If enabled, and the network is in the global scope, non-service containers on worker nodes will be able to connect to the
        network.
        [Default: (null)]
        type: bool
        version_added: 2.8

- ca_cert
        Use a CA certificate when performing server verification by providing the path to a CA certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `ca.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_ca_cert, cacert_path)[Default: (null)]
        type: path

- client_cert
        Path to the client's TLS certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `cert.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_cert, cert_path)[Default: (null)]
        type: path

- client_key
        Path to the client's TLS key file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `key.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_key, key_path)[Default: (null)]
        type: path

- connected
        List of container names or container IDs to connect to a network.
        (Aliases: containers)[Default: (null)]
        type: list

- debug
        Debug mode
        [Default: False]
        type: bool

- docker_host
        The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string.
        For example, `tcp://192.0.2.23:2376'. If TLS is used to encrypt the connection, the module will automatically replace `tcp' in
        the connection URL with `https'.
        If the value is not specified in the task, the value of environment variable `DOCKER_HOST' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_url)[Default: unix://var/run/docker.sock]
        type: str

- driver
        Specify the type of network. Docker provides bridge and overlay drivers, but 3rd party drivers can also be used.
        [Default: bridge]
        type: str

- driver_options
        Dictionary of network settings. Consult docker docs for valid options and values.
        [Default: (null)]
        type: dict

- enable_ipv6
        Enable IPv6 networking.
        [Default: (null)]
        type: bool
        version_added: 2.8

- force
        With state `absent' forces disconnecting all containers from the network prior to deleting the network. With state `present' will
        disconnect all containers, delete the network and re-create the network.  This option is required if you have changed the IPAM or
        driver options and want an existing network to be updated to use the new options.
        [Default: False]
        type: bool

- internal
        Restrict external access to the network.
        [Default: (null)]
        type: bool
        version_added: 2.8

- ipam_config
        List of IPAM config blocks. Consult L(Docker docs,https://docs.docker.com/compose/compose-file/compose-file-v2/#ipam) for valid
        options and values. Note that `iprange' is spelled differently here (we use the notation from the Docker SDK for Python).
        [Default: (null)]
        suboptions:
          aux_addresses:
            description:
            - Auxiliary IP addresses used by Network driver, as a mapping from hostname to
              IP.
            type: dict
          gateway:
            description:
            - IP gateway address.
            type: str
          iprange:
            description:
            - IP address range in CIDR notation.
            type: str
          subnet:
            description:
            - IP subset in CIDR notation.
            type: str
        
        type: list
        version_added: 2.8

- ipam_driver
        Specify an IPAM driver.
        [Default: (null)]
        type: str

- ipam_driver_options
        Dictionary of IPAM driver options.
        [Default: (null)]
        type: dict
        version_added: 2.8

- ipam_options
        Dictionary of IPAM options.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `ipam_config' instead. In Docker 1.10.0, IPAM options were introduced
        (see L(here,https://github.com/moby/moby/pull/17316)). This module parameter addresses the IPAM config not the newly introduced
        IPAM options. For the IPAM options, see the `ipam_driver_options' parameter.
        [Default: (null)]
        suboptions:
          aux_addresses:
            description:
            - Auxiliary IP addresses used by Network driver, as a mapping from hostname to
              IP.
            type: dict
          gateway:
            description:
            - IP gateway address.
            type: str
          iprange:
            description:
            - IP address range in CIDR notation.
            type: str
          subnet:
            description:
            - IP subset in CIDR notation.
            type: str
        
        type: dict

- labels
        Dictionary of labels.
        [Default: (null)]
        type: dict
        version_added: 2.8

= name
        Name of the network to operate on.
        (Aliases: network_name)
        type: str

- scope
        Specify the network's scope.
        (Choices: local, global, swarm)[Default: (null)]
        type: str
        version_added: 2.8

- ssl_version
        Provide a valid SSL version number. Default value determined by ssl.py module.
        If the value is not specified in the task, the value of environment variable `DOCKER_SSL_VERSION' will be used instead.
        [Default: (null)]
        type: str

- state
        `absent' deletes the network. If a network has connected containers, it cannot be deleted. Use the `force' option to disconnect
        all containers and delete the network.
        `present' creates the network, if it does not already exist with the specified parameters, and connects the list of containers
        provided via the connected parameter. Containers not on the list will be disconnected. An empty list will leave no containers
        connected to the network. Use the `appends' option to leave existing containers connected. Use the `force' options to force re-
        creation of the network.
        (Choices: absent, present)[Default: present]
        type: str

- timeout
        The maximum amount of time in seconds to wait on a response from the API.
        If the value is not specified in the task, the value of environment variable `DOCKER_TIMEOUT' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: 60]
        type: int

- tls
        Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if
        `tls_verify' is set to `yes' as well, it will take precedence.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: False]
        type: bool

- tls_hostname
        When verifying the authenticity of the Docker Host server, provide the expected name of the server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_HOSTNAME' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: localhost]
        type: str

- validate_certs
        Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_VERIFY' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: tls_verify)[Default: False]
        type: bool


NOTES:
      * Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define
        `DOCKER_HOST', `DOCKER_TLS_HOSTNAME', `DOCKER_API_VERSION', `DOCKER_CERT_PATH', `DOCKER_SSL_VERSION', `DOCKER_TLS',
        `DOCKER_TLS_VERIFY' and `DOCKER_TIMEOUT'. If you are using docker machine, run the script shipped with the product that
        sets up the environment. It will set these variables for you. See https://docker-py.readthedocs.io/en/stable/machine/ for
        more details.
      * When connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for
        Python, version 2.4 or newer, this can be done by installing `docker[tls]' with [pip].
      * Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In
        general, it will use `$HOME/.docker/config.json' if the `DOCKER_CONFIG' environment variable is not specified, and use
        `$DOCKER_CONFIG/config.json' otherwise.


REQUIREMENTS:  Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python module has been
        superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker/docker-
        py/issues/1310) for details). For Python 2.6, `docker-py' must be used. Otherwise, it is recommended to install
        the `docker' Python module. Note that both modules should `not' be installed at the same time. Also note that
        when both modules are installed and one of them is uninstalled, the other might no longer function and a
        reinstall of it is required., L(Docker SDK for Python,https://docker-py.readthedocs.io/en/stable/) >= 1.10.0 (use
        L(docker-py,https://pypi.org/project/docker-py/) for Python 2.6), The docker server >= 1.10.0

AUTHOR: Ben Keith (@keitwb), Chris Houseknecht (@chouseknecht), Dave Bendit (@DBendit)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Create a network
  docker_network:
    name: network_one

- name: Remove all but selected list of containers
  docker_network:
    name: network_one
    connected:
      - container_a
      - container_b
      - container_c

- name: Remove a single container
  docker_network:
    name: network_one
    connected: "{{ fulllist|difference(['container_a']) }}"

- name: Add a container to a network, leaving existing containers connected
  docker_network:
    name: network_one
    connected:
      - container_a
    appends: yes

- name: Create a network with driver options
  docker_network:
    name: network_two
    driver_options:
      com.docker.network.bridge.name: net2

- name: Create a network with custom IPAM config
  docker_network:
    name: network_three
    ipam_config:
      - subnet: 172.3.27.0/24
        gateway: 172.3.27.2
        iprange: 172.3.27.0/26
        aux_addresses:
          host1: 172.3.27.3
          host2: 172.3.27.4

- name: Create a network with labels
  docker_network:
    name: network_four
    labels:
      key1: value1
      key2: value2

- name: Create a network with IPv6 IPAM config
  docker_network:
    name: network_ipv6_one
    enable_ipv6: yes
    ipam_config:
      - subnet: fdd1:ac8c:0557:7ce1::/64

- name: Create a network with IPv6 and custom IPv4 IPAM config
  docker_network:
    name: network_ipv6_two
    enable_ipv6: yes
    ipam_config:
      - subnet: 172.4.27.0/24
      - subnet: fdd1:ac8c:0557:7ce2::/64

- name: Delete a network, disconnecting all containers
  docker_network:
    name: network_one
    state: absent
    force: yes


RETURN VALUES:

network:
    description:
    - Network inspection results for the affected network.
    - Note that facts are part of the registered vars since Ansible 2.8. For compatibility reasons, the facts
      are also accessible directly as C(docker_network). Note that the returned fact will be removed in Ansible 2.12.
    returned: success
    type: dict
    sample: {}

