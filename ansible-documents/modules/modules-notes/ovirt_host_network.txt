> OVIRT_HOST_NETWORK    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/ovirt/ovirt_host_network.py)

        Module to manage host networks in oVirt/RHV.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= auth
        Dictionary with values needed to create HTTP/HTTPS connection to oVirt:

        suboptions:
          ca_file:
            description:
            - A PEM file containing the trusted CA certificates.
            - The certificate presented by the server will be verified using these CA certificates.
            - If `ca_file' parameter is not set, system wide CA certificate store is used.
            - Default value is set by `OVIRT_CAFILE' environment variable.
            type: str
          headers:
            description:
            - Dictionary of HTTP headers to be added to each API call.
            type: dict
          hostname:
            description:
            - A string containing the hostname of the server, usually something like ``server.example.com'`.
            - Default value is set by `OVIRT_HOSTNAME' environment variable.
            - Either `url' or `hostname' is required.
            type: str
          insecure:
            description:
            - A boolean flag that indicates if the server TLS certificate and host name should
              be checked.
            type: bool
          kerberos:
            description:
            - A boolean flag indicating if Kerberos authentication should be used instead
              of the default basic authentication.
            type: bool
          password:
            description:
            - The password of the user.
            - Default value is set by `OVIRT_PASSWORD' environment variable.
            required: true
            type: str
          token:
            description:
            - Token to be used instead of login with username/password.
            - Default value is set by `OVIRT_TOKEN' environment variable.
            type: str
          url:
            description:
            - A string containing the API URL of the server, usually something like ``https://server.example.com/ovirt-engine/api'`.
            - Default value is set by `OVIRT_URL' environment variable.
            - Either `url' or `hostname' is required.
            type: str
          username:
            description:
            - The name of the user, something like `admin@internal'.
            - Default value is set by `OVIRT_USERNAME' environment variable.
            required: true
            type: str
        
        type: dict

- bond
        Dictionary describing network bond:
        `name' - Bond name.
        `mode' - Bonding mode.
        `options' - Bonding options.
        `interfaces' - List of interfaces to create a bond.
        [Default: (null)]

- check
        If `true' verify connectivity between host and engine.
        Network configuration changes will be rolled back if connectivity between engine and the host is lost after changing network
        configuration.
        [Default: (null)]
        type: bool

- fetch_nested
        If `True' the module will fetch additional data from the API.
        It will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by
        specifying `nested_attributes'.
        [Default: (null)]
        type: bool
        version_added: 2.3

- interface
        Name of the network interface where logical network should be attached.
        [Default: (null)]

- labels
        List of names of the network label to be assigned to bond or interface.
        [Default: (null)]

= name
        Name of the host to manage networks for.
        (Aliases: host)

- nested_attributes
        Specifies list of the attributes which should be fetched from the API.
        This parameter apply only when `fetch_nested' is `true'.
        [Default: (null)]
        type: list
        version_added: 2.3

- networks
        List of dictionary describing networks to be attached to interface or bond:
        `name' - Name of the logical network to be assigned to bond or interface.
        `boot_protocol' - Boot protocol one of the `none', `static' or `dhcp'.
        `address' - IP address in case of `static' boot protocol is used.
        `netmask' - Subnet mask in case of `static' boot protocol is used.
        `gateway' - Gateway in case of `static' boot protocol is used.
        `version' - IP version. Either v4 or v6. Default is v4.
        [Default: (null)]

- poll_interval
        Number of the seconds the module waits until another poll request on entity status is sent.
        [Default: 3]
        type: int

- save
        If `true' network configuration will be persistent, otherwise it is temporary. Default `true' since Ansible 2.8.
        [Default: True]
        type: bool

- state
        Should the host be present/absent.
        (Choices: present, absent)[Default: present]

- sync_networks
        If `true' all networks will be synchronized before modification
        [Default: False]
        type: bool
        version_added: 2.8
        

- timeout
        The amount of time in seconds the module should wait for the instance to get into desired state.
        [Default: 180]
        type: int

- wait
        `yes' if the module should wait for the entity to get into desired state.
        [Default: True]
        type: bool


NOTES:
      * In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can
        create the following task: `pip: name=ovirt-engine-sdk-python version=4.3.0'


REQUIREMENTS:  python >= 2.7, ovirt-engine-sdk-python >= 4.3.0

AUTHOR: Ondra Machacek (@machacekondra)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Examples don't contain auth parameter for simplicity,
# look at ovirt_auth module to see how to reuse authentication:

# In all examples the durability of the configuration created is dependent on the 'save' option value:

# Create bond on eth0 and eth1 interface, and put 'myvlan' network on top of it and persist the new configuration:
- name: Bonds
  ovirt_host_network:
    name: myhost
    save: yes
    bond:
      name: bond0
      mode: 2
      interfaces:
        - eth1
        - eth2
    networks:
      - name: myvlan
        boot_protocol: static
        address: 1.2.3.4
        netmask: 255.255.255.0
        gateway: 1.2.3.4
        version: v4

# Create bond on eth1 and eth2 interface, specifiyng both mode and miimon:
- name: Bonds
  ovirt_host_network:
    name: myhost
    bond:
      name: bond0
      mode: 1
      options:
        miimon: 200
      interfaces:
        - eth1
        - eth2

# Remove bond0 bond from host interfaces:
- ovirt_host_network:
    state: absent
    name: myhost
    bond:
      name: bond0

# Assign myvlan1 and myvlan2 vlans to host eth0 interface:
- ovirt_host_network:
    name: myhost
    interface: eth0
    networks:
      - name: myvlan1
      - name: myvlan2

# Remove myvlan2 vlan from host eth0 interface:
- ovirt_host_network:
    state: absent
    name: myhost
    interface: eth0
    networks:
      - name: myvlan2

# Remove all networks/vlans from host eth0 interface:
- ovirt_host_network:
    state: absent
    name: myhost
    interface: eth0


RETURN VALUES:

id:
    description: ID of the host NIC which is managed
    returned: On success if host NIC is found.
    type: str
    sample: 7de90f31-222c-436c-a1ca-7e655bd5b60c
host_nic:
    description: "Dictionary of all the host NIC attributes. Host NIC attributes can be found on your oVirt/RHV instance
                  at following url: http://ovirt.github.io/ovirt-engine-api-model/master/#types/host_nic."
    returned: On success if host NIC is found.
    type: dict

