> CE_BFD_SESSION    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cloudengine/ce_bfd_session.py)

        Manages BFD session configuration, creates a BFD session or deletes a specified BFD session on HUAWEI CloudEngine devices.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- addr_type
        Specifies the peer IP address type.
        (Choices: ipv4)[Default: (null)]

- create_type
        BFD session creation mode, the currently created BFD session only supports static or static auto-negotiation mode.
        (Choices: static, auto)[Default: (null)]

- dest_addr
        Specifies the peer IP address bound to the BFD session.
        [Default: (null)]

- out_if_name
        Specifies the type and number of the interface bound to the BFD session.
        [Default: (null)]

= session_name
        Specifies the name of a BFD session. The value is a string of 1 to 15 case-sensitive characters without spaces.


- src_addr
        Indicates the source IP address carried in BFD packets.
        [Default: (null)]

- state
        Determines whether the config should be present or not on the device.
        (Choices: present, absent)[Default: present]

- use_default_ip
        Indicates the default multicast IP address that is bound to a BFD session. By default, BFD uses the multicast IP address
        224.0.0.184. You can set the multicast IP address by running the default-ip-address command. The value is a bool type.
        [Default: no]
        type: bool

- vrf_name
        Specifies the name of a Virtual Private Network (VPN) instance that is bound to a BFD session. The value is a string of 1 to 31
        case-sensitive characters, spaces not supported. When double quotation marks are used around the string, spaces are allowed in
        the string. The value _public_ is reserved and cannot be used as the VPN instance name.
        [Default: (null)]


AUTHOR: QijunPan (@QijunPan)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: bfd session module test
  hosts: cloudengine
  connection: local
  gather_facts: no
  vars:
    cli:
      host: "{{ inventory_hostname }}"
      port: "{{ ansible_ssh_port }}"
      username: "{{ username }}"
      password: "{{ password }}"
      transport: cli

  tasks:
  - name: Configuring Single-hop BFD for Detecting Faults on a Layer 2 Link
    ce_bfd_session:
      session_name: bfd_l2link
      use_default_ip: true
      out_if_name: 10GE1/0/1
      provider: '{{ cli }}'

  - name: Configuring Single-Hop BFD on a VLANIF Interface
    ce_bfd_session:
      session_name: bfd_vlanif
      dest_addr: 10.1.1.6
      out_if_name: Vlanif100
      provider: '{{ cli }}'

  - name: Configuring Multi-Hop BFD
    ce_bfd_session:
      session_name: bfd_multi_hop
      dest_addr: 10.1.1.1
      provider: '{{ cli }}'


RETURN VALUES:

proposed:
    description: k/v pairs of parameters passed into module
    returned: always
    type: dict
    sample: {
        "addr_type": null,
        "create_type": null,
        "dest_addr": null,
        "out_if_name": "10GE1/0/1",
        "session_name": "bfd_l2link",
        "src_addr": null,
        "state": "present",
        "use_default_ip": true,
        "vrf_name": null
    }
existing:
    description: k/v pairs of existing configuration
    returned: always
    type: dict
    sample: {
        "session": {}
    }
end_state:
    description: k/v pairs of configuration after module execution
    returned: always
    type: dict
    sample: {
        "session": {
            "addrType": "IPV4",
            "createType": "SESS_STATIC",
            "destAddr": null,
            "outIfName": "10GE1/0/1",
            "sessName": "bfd_l2link",
            "srcAddr": null,
            "useDefaultIp": "true",
            "vrfName": null
        }
    }
updates:
    description: commands sent to the device
    returned: always
    type: list
    sample: [
        "bfd bfd_l2link bind peer-ip default-ip interface 10ge1/0/1"
    ]
changed:
    description: check to see if a change was made on the device
    returned: always
    type: bool
    sample: true

