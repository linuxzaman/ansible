> GCP_CLOUDBUILD_TRIGGER    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/google/gcp_cloudbuild_trigger.py)

        Configuration for an automated build in response to source repository changes.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= auth_kind
        The type of credential used.
        (Choices: application, machineaccount, serviceaccount)
        type: str

- build
        Contents of the build template. Either a filename or build template must be provided.
        [Default: (null)]
        suboptions:
          images:
            description:
            - A list of images to be pushed upon the successful completion of all build steps.
            - The images are pushed using the builder service account's credentials.
            - The digests of the pushed images will be stored in the Build resource's results
              field.
            - If any of the images fail to be pushed, the build status is marked FAILURE.
            required: false
          steps:
            description:
            - The operations to be performed on the workspace.
            required: false
            suboptions:
              args:
                description:
                - A list of arguments that will be presented to the step when it is started.
                - If the image used to run the step's container has an entrypoint, the args
                  are used as arguments to that entrypoint. If the image does not define an
                  entrypoint, the first element in args is used as the entrypoint, and the
                  remainder will be used as arguments.
                required: false
              dir:
                description:
                - Working directory to use when running this step's container.
                - If this value is a relative path, it is relative to the build's working
                  directory. If this value is absolute, it may be outside the build's working
                  directory, in which case the contents of the path may not be persisted across
                  build step executions, unless a `volume` for that path is specified.
                - If the build specifies a `RepoSource` with `dir` and a step with a `dir`,
                  which specifies an absolute path, the `RepoSource` `dir` is ignored for
                  the step's execution.
                required: false
              entrypoint:
                description:
                - Entrypoint to be used instead of the build step image's default entrypoint.
                - If unset, the image's default entrypoint is used .
                required: false
              env:
                description:
                - A list of environment variable definitions to be used when running a step.
                - The elements are of the form "KEY=VALUE" for the environment variable "KEY"
                  being given the value "VALUE".
                required: false
              id:
                description:
                - Unique identifier for this build step, used in `wait_for` to reference this
                  build step as a dependency.
                required: false
              name:
                description:
                - The name of the container image that will run this particular build step.
                - If the image is available in the host's Docker daemon's cache, it will be
                  run directly. If not, the host will attempt to pull the image first, using
                  the builder service account's credentials if necessary.
                - The Docker daemon's cache will already have the latest versions of all of
                  the officially supported build steps (https://github.com/GoogleCloudPlatform/cloud-builders.)
                - The Docker daemon will also have cached many of the layers for some popular
                  images, like "ubuntu", "debian", but they will be refreshed at the time
                  you attempt to use them.
                - If you built an image in a previous build step, it will be stored in the
                  host's Docker daemon's cache and is available to use as the name for a later
                  build step.
                required: false
              secret_env:
                description:
                - A list of environment variables which are encrypted using a Cloud Key Management
                  Service crypto key. These values must be specified in the build's `Secret`.
                required: false
              timeout:
                description:
                - Time limit for executing this build step. If not defined, the step has no
                  time limit and will be allowed to continue to run until either it completes
                  or the build itself times out.
                required: false
              timing:
                description:
                - Output only. Stores timing information for executing this build step.
                required: false
              volumes:
                description:
                - List of volumes to mount into the build step.
                - Each volume is created as an empty volume prior to execution of the build
                  step. Upon completion of the build, volumes and their contents are discarded.
                - Using a named volume in only one step is not valid as it is indicative of
                  a build request with an incorrect configuration.
                required: false
                suboptions:
                  name:
                    description:
                    - Name of the volume to mount.
                    - Volume names must be unique per build step and must be valid names for
                      Docker volumes. Each named volume must be used by at least two build
                      steps.
                    required: false
                  path:
                    description:
                    - Path at which to mount the volume.
                    - Paths must be absolute and cannot conflict with other volume paths on
                      the same build step or with certain reserved volume paths.
                    required: false
              wait_for:
                description:
                - The ID(s) of the step(s) that this build step depends on.
                - This build step will not start until all the build steps in `wait_for` have
                  completed successfully. If `wait_for` is empty, this build step will start
                  when all previous build steps in the `Build.Steps` list have completed successfully.
                required: false
          tags:
            description:
            - Tags for annotation of a Build. These are not docker tags.
            required: false
        

- description
        Human-readable description of the trigger.
        [Default: (null)]

- disabled
        Whether the trigger is disabled or not. If true, the trigger will never result in a build.
        [Default: (null)]
        type: bool

- filename
        Path, from the source root, to a file whose contents is used for the template. Either a filename or build template must be
        provided.
        [Default: (null)]

- id
        The unique identifier for the trigger.
        [Default: (null)]

- ignored_files
        ignoredFiles and includedFiles are file glob matches using http://godoc/pkg/path/filepath#Match extended with support for `**`.
        If ignoredFiles and changed files are both empty, then they are not used to determine whether or not to trigger a build.
        If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that
        are outside of the ignoredFiles globs, then we do not trigger a build.
        [Default: (null)]

- included_files
        ignoredFiles and includedFiles are file glob matches using http://godoc/pkg/path/filepath#Match extended with support for `**`.
        If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is empty, then as far as this filter is
        concerned, we should trigger the build.
        If any of the files altered in the commit pass the ignoredFiles filter and includedFiles is not empty, then we make sure that at
        least one of those files matches a includedFiles glob. If not, then we do not trigger a build.
        [Default: (null)]

- project
        The Google Cloud Platform project to use.
        [Default: (null)]
        type: str

- scopes
        Array of scopes to be used.
        [Default: (null)]
        type: list

- service_account_contents
        A string representing the contents of a Service Account JSON file.
        This should not be passed in as a dictionary, but a string that has the exact contents of a service account json file (valid
        JSON)
        [Default: (null)]
        type: str

- service_account_email
        An optional service account email address if machineaccount is selected and the user does not wish to use the default email.
        [Default: (null)]
        type: str

- service_account_file
        The path of a Service Account JSON file if serviceaccount is selected as type.
        [Default: (null)]
        type: path

- state
        Whether the given object should exist in GCP
        (Choices: present, absent)[Default: present]

- substitutions
        Substitutions data for Build resource.
        [Default: (null)]

- trigger_template
        Template describing the types of source changes to trigger a build.
        Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that
        regular expression will trigger a build.
        [Default: (null)]
        suboptions:
          branch_name:
            description:
            - Name of the branch to build. Exactly one a of branch name, tag, or commit SHA
              must be provided.
            required: false
          commit_sha:
            description:
            - Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA
              must be provided.
            required: false
          dir:
            description:
            - Directory, relative to the source root, in which to run the build.
            - This must be a relative path. If a step's dir is specified and is an absolute
              path, this value is ignored for that step's execution.
            required: false
          project_id:
            description:
            - ID of the project that owns the Cloud Source Repository. If omitted, the project
              ID requesting the build is assumed.
            required: false
          repo_name:
            default: default
            description:
            - Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
            required: false
          tag_name:
            description:
            - Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must
              be provided.
            required: false
        


NOTES:
      * API Reference: https://cloud.google.com/cloud-build/docs/api/reference/rest/
      * Automating builds using build triggers: https://cloud.google.com/cloud-build/docs/running-builds/automate-builds
      * The id for this resource is created by the API after you create the resource the first time. If you want to manage this
        resource after creation, you'll have to copy the generated id into the playbook. If you do not, new triggers will be
        created on subsequent runs.
      * For authentication, you can set service_account_file using the `GCP_SERVICE_ACCOUNT_FILE' env variable.
      * For authentication, you can set service_account_email using the `GCP_SERVICE_ACCOUNT_EMAIL' env variable.
      * For authentication, you can set service_account_contents using the `GCP_SERVICE_ACCOUNT_CONTENTS' env variable.
      * For authentication, you can set auth_kind using the `GCP_AUTH_KIND' env variable.
      * For authentication, you can set scopes using the `GCP_SCOPES' env variable.
      * Environment variables values will only be used if the playbook values are not set.
      * The `service_account_email' and `service_account_file' options are mutually exclusive.


REQUIREMENTS:  python >= 2.6, requests >= 2.18.4, google-auth >= 1.3.0

AUTHOR: Google Inc. (@googlecloudplatform)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: create a repository
  gcp_sourcerepo_repository:
    name: projects/{{ gcp_project }}/repos/{{ resource_name }}
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present

- name: create a trigger
  gcp_cloudbuild_trigger:
    trigger_template:
      branch_name: master
      project_id: test_project
      repo_name: test_object
    filename: cloudbuild.yaml
    project: test_project
    auth_kind: serviceaccount
    service_account_file: "/tmp/auth.pem"
    state: present


RETURN VALUES:

id:
  description:
  - The unique identifier for the trigger.
  returned: success
  type: str
description:
  description:
  - Human-readable description of the trigger.
  returned: success
  type: str
disabled:
  description:
  - Whether the trigger is disabled or not. If true, the trigger will never result
    in a build.
  returned: success
  type: bool
createTime:
  description:
  - Time when the trigger was created.
  returned: success
  type: str
substitutions:
  description:
  - Substitutions data for Build resource.
  returned: success
  type: dict
filename:
  description:
  - Path, from the source root, to a file whose contents is used for the template.
    Either a filename or build template must be provided.
  returned: success
  type: str
ignoredFiles:
  description:
  - ignoredFiles and includedFiles are file glob matches using http://godoc/pkg/path/filepath#Match
    extended with support for `**`.
  - If ignoredFiles and changed files are both empty, then they are not used to determine
    whether or not to trigger a build.
  - If ignoredFiles is not empty, then we ignore any files that match any of the ignored_file
    globs. If the change has no files that are outside of the ignoredFiles globs,
    then we do not trigger a build.
  returned: success
  type: list
includedFiles:
  description:
  - ignoredFiles and includedFiles are file glob matches using http://godoc/pkg/path/filepath#Match
    extended with support for `**`.
  - If any of the files altered in the commit pass the ignoredFiles filter and includedFiles
    is empty, then as far as this filter is concerned, we should trigger the build.
  - If any of the files altered in the commit pass the ignoredFiles filter and includedFiles
    is not empty, then we make sure that at least one of those files matches a includedFiles
    glob. If not, then we do not trigger a build.
  returned: success
  type: list
triggerTemplate:
  description:
  - Template describing the types of source changes to trigger a build.
  - Branch and tag names in trigger templates are interpreted as regular expressions.
    Any branch or tag change that matches that regular expression will trigger a build.
  returned: success
  type: complex
  contains:
    projectId:
      description:
      - ID of the project that owns the Cloud Source Repository. If omitted, the project
        ID requesting the build is assumed.
      returned: success
      type: str
    repoName:
      description:
      - Name of the Cloud Source Repository. If omitted, the name "default" is assumed.
      returned: success
      type: str
    dir:
      description:
      - Directory, relative to the source root, in which to run the build.
      - This must be a relative path. If a step's dir is specified and is an absolute
        path, this value is ignored for that step's execution.
      returned: success
      type: str
    branchName:
      description:
      - Name of the branch to build. Exactly one a of branch name, tag, or commit
        SHA must be provided.
      returned: success
      type: str
    tagName:
      description:
      - Name of the tag to build. Exactly one of a branch name, tag, or commit SHA
        must be provided.
      returned: success
      type: str
    commitSha:
      description:
      - Explicit commit SHA to build. Exactly one of a branch name, tag, or commit
        SHA must be provided.
      returned: success
      type: str
build:
  description:
  - Contents of the build template. Either a filename or build template must be provided.
  returned: success
  type: complex
  contains:
    tags:
      description:
      - Tags for annotation of a Build. These are not docker tags.
      returned: success
      type: list
    images:
      description:
      - A list of images to be pushed upon the successful completion of all build
        steps.
      - The images are pushed using the builder service account's credentials.
      - The digests of the pushed images will be stored in the Build resource's results
        field.
      - If any of the images fail to be pushed, the build status is marked FAILURE.
      returned: success
      type: list
    steps:
      description:
      - The operations to be performed on the workspace.
      returned: success
      type: complex
      contains:
        name:
          description:
          - The name of the container image that will run this particular build step.
          - If the image is available in the host's Docker daemon's cache, it will
            be run directly. If not, the host will attempt to pull the image first,
            using the builder service account's credentials if necessary.
          - The Docker daemon's cache will already have the latest versions of all
            of the officially supported build steps (U(https://github.com/GoogleCloudPlatform/cloud-builders).)
          - The Docker daemon will also have cached many of the layers for some popular
            images, like "ubuntu", "debian", but they will be refreshed at the time
            you attempt to use them.
          - If you built an image in a previous build step, it will be stored in the
            host's Docker daemon's cache and is available to use as the name for a
            later build step.
          returned: success
          type: str
        args:
          description:
          - A list of arguments that will be presented to the step when it is started.
          - If the image used to run the step's container has an entrypoint, the args
            are used as arguments to that entrypoint. If the image does not define
            an entrypoint, the first element in args is used as the entrypoint, and
            the remainder will be used as arguments.
          returned: success
          type: list
        env:
          description:
          - A list of environment variable definitions to be used when running a step.
          - The elements are of the form "KEY=VALUE" for the environment variable
            "KEY" being given the value "VALUE".
          returned: success
          type: list
        id:
          description:
          - Unique identifier for this build step, used in `wait_for` to reference
            this build step as a dependency.
          returned: success
          type: str
        entrypoint:
          description:
          - Entrypoint to be used instead of the build step image's default entrypoint.
          - If unset, the image's default entrypoint is used .
          returned: success
          type: str
        dir:
          description:
          - Working directory to use when running this step's container.
          - If this value is a relative path, it is relative to the build's working
            directory. If this value is absolute, it may be outside the build's working
            directory, in which case the contents of the path may not be persisted
            across build step executions, unless a `volume` for that path is specified.
          - If the build specifies a `RepoSource` with `dir` and a step with a `dir`,
            which specifies an absolute path, the `RepoSource` `dir` is ignored for
            the step's execution.
          returned: success
          type: str
        secretEnv:
          description:
          - A list of environment variables which are encrypted using a Cloud Key
            Management Service crypto key. These values must be specified in the build's
            `Secret`.
          returned: success
          type: list
        timeout:
          description:
          - Time limit for executing this build step. If not defined, the step has
            no time limit and will be allowed to continue to run until either it completes
            or the build itself times out.
          returned: success
          type: str
        timing:
          description:
          - Output only. Stores timing information for executing this build step.
          returned: success
          type: str
        volumes:
          description:
          - List of volumes to mount into the build step.
          - Each volume is created as an empty volume prior to execution of the build
            step. Upon completion of the build, volumes and their contents are discarded.
          - Using a named volume in only one step is not valid as it is indicative
            of a build request with an incorrect configuration.
          returned: success
          type: complex
          contains:
            name:
              description:
              - Name of the volume to mount.
              - Volume names must be unique per build step and must be valid names
                for Docker volumes. Each named volume must be used by at least two
                build steps.
              returned: success
              type: str
            path:
              description:
              - Path at which to mount the volume.
              - Paths must be absolute and cannot conflict with other volume paths
                on the same build step or with certain reserved volume paths.
              returned: success
              type: str
        waitFor:
          description:
          - The ID(s) of the step(s) that this build step depends on.
          - This build step will not start until all the build steps in `wait_for`
            have completed successfully. If `wait_for` is empty, this build step will
            start when all previous build steps in the `Build.Steps` list have completed
            successfully.
          returned: success
          type: list

