> VYOS_INTERFACE    (/usr/lib/python2.7/dist-packages/ansible/modules/network/vyos/vyos_interface.py)

        This module provides declarative management of Interfaces on VyOS network devices.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

- aggregate
        List of Interfaces definitions.
        [Default: (null)]

- delay
        Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state
        argument which are `state' with values `up'/`down' and `neighbors'.
        [Default: 10]

- description
        Description of Interface.
        [Default: (null)]

- duplex
        Interface link status.
        (Choices: full, half, auto)[Default: auto]

- enabled
        Interface link status.
        [Default: (null)]
        type: bool

- mtu
        Maximum size of transmit packet.
        [Default: (null)]

= name
        Name of the Interface.


- neighbors
        Check the operational state of given interface `name' for LLDP neighbor.
        The following suboptions are available.
        [Default: (null)]
        suboptions:
          host:
            description:
            - LLDP neighbor host for given interface `name'.
          port:
            description:
            - LLDP neighbor port to which given interface `name' is connected.
        
        version_added: 2.5
        

- provider
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli'.
        For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-
        protocols).
        HORIZONTALLINE
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          host:
            description:
            - Specifies the DNS host name or address for connecting to the remote device over
              the specified transport.  The value of host is used as the destination address
              for the transport.
            required: true
            type: str
          password:
            description:
            - Specifies the password to use to authenticate the connection to the remote device.   This
              value is used to authenticate the SSH session. If the value is not specified
              in the task, the value of environment variable `ANSIBLE_NET_PASSWORD' will
              be used instead.
            type: str
          port:
            default: 22
            description:
            - Specifies the port to use when building the connection to the remote device.
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH key to use to authenticate the connection to the remote device.   This
              value is the path to the key used to authenticate the SSH session. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_SSH_KEYFILE'
              will be used instead.
            type: path
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error.
            type: int
          username:
            description:
            - Configures the username to use to authenticate the connection to the remote
              device.  This value is used to authenticate the SSH session. If the value is
              not specified in the task, the value of environment variable `ANSIBLE_NET_USERNAME'
              will be used instead.
            type: str
        
        type: dict

- speed
        Interface link speed.
        [Default: (null)]

- state
        State of the Interface configuration, `up' means present and operationally up and `down' means present and operationally `down'
        (Choices: present, absent, up, down)[Default: present]


NOTES:
      * Tested against VYOS 1.1.7
      * For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`


AUTHOR: Ganesh Nalawade (@ganeshrn)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

- name: configure interface
  vyos_interface:
    name: eth0
    description: test-interface

- name: remove interface
  vyos_interface:
    name: eth0
    state: absent

- name: make interface down
  vyos_interface:
    name: eth0
    enabled: False

- name: make interface up
  vyos_interface:
    name: eth0
    enabled: True

- name: Configure interface speed, mtu, duplex
  vyos_interface:
    name: eth5
    state: present
    speed: 100
    mtu: 256
    duplex: full

- name: Set interface using aggregate
  vyos_interface:
    aggregate:
      - { name: eth1, description: test-interface-1,  speed: 100, duplex: half, mtu: 512}
      - { name: eth2, description: test-interface-2,  speed: 1000, duplex: full, mtu: 256}

- name: Disable interface on aggregate
  net_interface:
    aggregate:
      - name: eth1
      - name: eth2
    enabled: False

- name: Delete interface using aggregate
  net_interface:
    aggregate:
      - name: eth1
      - name: eth2
    state: absent

- name: Check lldp neighbors intent arguments
  vyos_interface:
    name: eth0
    neighbors:
    - port: eth0
      host: netdev

- name: Config + intent
  vyos_interface:
    name: eth1
    enabled: False
    state: down


RETURN VALUES:

commands:
  description: The list of configuration mode commands to send to the device
  returned: always, except for the platforms that use Netconf transport to manage the device.
  type: list
  sample:
    - set interfaces ethernet eth0 description "test-interface"
    - set interfaces ethernet eth0 speed 100
    - set interfaces ethernet eth0 mtu 256
    - set interfaces ethernet eth0 duplex full

