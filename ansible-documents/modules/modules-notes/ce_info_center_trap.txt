> CE_INFO_CENTER_TRAP    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cloudengine/ce_info_center_trap.py)

        Manages information center trap configurations on HUAWEI CloudEngine switches.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- channel_id
        Number of a channel. The value is an integer ranging from 0 to 9. The default value is 0.
        [Default: (null)]

- module_name
        Module name of the rule. The value is a string of 1 to 31 case-insensitive characters. The default value is default. Please use
        lower-case letter, such as [aaa, acl, arp, bfd].
        [Default: (null)]

- state
        Specify desired state of the resource.
        (Choices: present, absent)[Default: present]

- trap_buff_enable
        Whether a trap buffer is enabled to output information.
        (Choices: no_use, true, false)[Default: no_use]

- trap_buff_size
        Size of a trap buffer. The value is an integer ranging from 0 to 1024. The default value is 256.
        [Default: (null)]

- trap_enable
        Whether a device is enabled to output alarms.
        (Choices: no_use, true, false)[Default: no_use]

- trap_level
        Trap level permitted to output.
        (Choices: emergencies, alert, critical, error, warning, notification, informational, debugging)[Default: (null)]

- trap_time_stamp
        Timestamp format of alarm information.
        (Choices: date_boot, date_second, date_tenthsecond, date_millisecond, shortdate_second, shortdate_tenthsecond,
        shortdate_millisecond, formatdate_second, formatdate_tenthsecond, formatdate_millisecond)[Default: (null)]


AUTHOR: wangdezhuang (@QijunPan)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: CloudEngine info center trap test
  hosts: cloudengine
  connection: local
  gather_facts: no
  vars:
    cli:
      host: "{{ inventory_hostname }}"
      port: "{{ ansible_ssh_port }}"
      username: "{{ username }}"
      password: "{{ password }}"
      transport: cli

  tasks:

  - name: "Config trap buffer"
    ce_info_center_trap:
      state: present
      trap_buff_enable: true
      trap_buff_size: 768
      provider: "{{ cli }}"

  - name: "Undo trap buffer"
    ce_info_center_trap:
      state: absent
      trap_buff_enable: true
      trap_buff_size: 768
      provider: "{{ cli }}"

  - name: "Config trap module log level"
    ce_info_center_trap:
      state: present
      module_name: aaa
      channel_id: 1
      trap_enable: true
      trap_level: error
      provider: "{{ cli }}"

  - name: "Undo trap module log level"
    ce_info_center_trap:
      state: absent
      module_name: aaa
      channel_id: 1
      trap_enable: true
      trap_level: error
      provider: "{{ cli }}"


RETURN VALUES:

changed:
    description: check to see if a change was made on the device
    returned: always
    type: bool
    sample: true
proposed:
    description: k/v pairs of parameters passed into module
    returned: always
    type: dict
    sample: {"state": "present", "trap_buff_enable": "true", "trap_buff_size": "768"}
existing:
    description: k/v pairs of existing aaa server
    returned: always
    type: dict
    sample: {"icTrapBuffEn": "false", "trapBuffSize": "256"}
end_state:
    description: k/v pairs of aaa params after module execution
    returned: always
    type: dict
    sample: {"icTrapBuffEn": "true", "trapBuffSize": "768"}
updates:
    description: command sent to the device
    returned: always
    type: list
    sample: ["info-center trapbuffer", "info-center trapbuffer size 768"]

