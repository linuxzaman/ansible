> GCP_COMPUTE_SUBNETWORK    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/google/gcp_compute_subnetwork.py)

        A VPC network is a virtual version of the traditional physical networks that exist within and between physical data centers. A
        VPC network provides connectivity for your Compute Engine virtual machine (VM) instances, Container Engine containers, App Engine
        Flex services, and other network-related resources. Each GCP project contains one or more VPC networks. Each VPC network is a
        global entity spanning all GCP regions. This global VPC network allows VM instances and other resources to communicate with each
        other via internal, private IP addresses. Each VPC network is subdivided into subnets, and each subnet is contained within a
        single region. You can have more than one subnet in a region for a given VPC network. Each subnet has a contiguous private
        RFC1918 IP space. You create instances, containers, and the like in these subnets. When you create an instance, you must create
        it in a subnet, and the instance draws its internal IP address from that subnet. Virtual machine (VM) instances in a VPC network
        can communicate with instances in all other subnets of the same VPC network, regardless of region, using their RFC1918 private IP
        addresses. You can isolate portions of the network, even entire subnets, using firewall rules.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= auth_kind
        The type of credential used.
        (Choices: application, machineaccount, serviceaccount)
        type: str

- description
        An optional description of this resource. Provide this property when you create the resource. This field can be set only at
        resource creation time.
        [Default: (null)]

- enable_flow_logs
        Whether to enable flow logging for this subnetwork.
        [Default: (null)]
        type: bool
        version_added: 2.8
        

= ip_cidr_range
        The range of internal addresses that are owned by this subnetwork.
        Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-
        overlapping within a network. Only IPv4 is supported.


= name
        The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and
        comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
        `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
        dash, lowercase letter, or digit, except the last character, which cannot be a dash.


= network
        The network this subnet belongs to.
        Only networks that are in the distributed mode can have subnetworks.
        This field represents a link to a Network resource in GCP. It can be specified in two ways. First, you can place a dictionary
        with key 'selfLink' and value of your resource's selfLink Alternatively, you can add `register: name-of-resource` to a
        gcp_compute_network task and then set this network field to "{{ name-of-resource }}"


- private_ip_google_access
        When enabled, VMs in this subnetwork without external IP addresses can access Google APIs and services by using Private Google
        Access.
        [Default: (null)]
        type: bool

- project
        The Google Cloud Platform project to use.
        [Default: (null)]
        type: str

= region
        URL of the GCP region for this subnetwork.


- scopes
        Array of scopes to be used.
        [Default: (null)]
        type: list

- secondary_ip_ranges
        An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must
        belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges.
        [Default: (null)]
        suboptions:
          ip_cidr_range:
            description:
            - The range of IP addresses belonging to this subnetwork secondary range. Provide
              this property when you create the subnetwork.
            - Ranges must be unique and non-overlapping with all primary and secondary IP
              ranges within a network. Only IPv4 is supported.
            required: true
          range_name:
            description:
            - The name associated with this subnetwork secondary range, used when adding an
              alias IP range to a VM instance. The name must be 1-63 characters long, and
              comply with RFC1035. The name must be unique within the subnetwork.
            required: true
        
        version_added: 2.8
        

- service_account_contents
        A string representing the contents of a Service Account JSON file.
        This should not be passed in as a dictionary, but a string that has the exact contents of a service account json file (valid
        JSON)
        [Default: (null)]
        type: str

- service_account_email
        An optional service account email address if machineaccount is selected and the user does not wish to use the default email.
        [Default: (null)]
        type: str

- service_account_file
        The path of a Service Account JSON file if serviceaccount is selected as type.
        [Default: (null)]
        type: path

- state
        Whether the given object should exist in GCP
        (Choices: present, absent)[Default: present]


NOTES:
      * API Reference: https://cloud.google.com/compute/docs/reference/rest/beta/subnetworks
      * Private Google Access: https://cloud.google.com/vpc/docs/configure-private-google-access
      * Cloud Networking: https://cloud.google.com/vpc/docs/using-vpc
      * For authentication, you can set service_account_file using the `GCP_SERVICE_ACCOUNT_FILE' env variable.
      * For authentication, you can set service_account_email using the `GCP_SERVICE_ACCOUNT_EMAIL' env variable.
      * For authentication, you can set service_account_contents using the `GCP_SERVICE_ACCOUNT_CONTENTS' env variable.
      * For authentication, you can set auth_kind using the `GCP_AUTH_KIND' env variable.
      * For authentication, you can set scopes using the `GCP_SCOPES' env variable.
      * Environment variables values will only be used if the playbook values are not set.
      * The `service_account_email' and `service_account_file' options are mutually exclusive.


REQUIREMENTS:  python >= 2.6, requests >= 2.18.4, google-auth >= 1.3.0

AUTHOR: Google Inc. (@googlecloudplatform)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: create a network
  gcp_compute_network:
    name: network-subnetwork
    auto_create_subnetworks: 'true'
    project: "{{ gcp_project }}"
    auth_kind: "{{ gcp_cred_kind }}"
    service_account_file: "{{ gcp_cred_file }}"
    state: present
  register: network

- name: create a subnetwork
  gcp_compute_subnetwork:
    name: ansiblenet
    region: us-west1
    network: "{{ network }}"
    ip_cidr_range: 172.16.0.0/16
    project: test_project
    auth_kind: serviceaccount
    service_account_file: "/tmp/auth.pem"
    state: present


RETURN VALUES:

creationTimestamp:
  description:
  - Creation timestamp in RFC3339 text format.
  returned: success
  type: str
description:
  description:
  - An optional description of this resource. Provide this property when you create
    the resource. This field can be set only at resource creation time.
  returned: success
  type: str
gatewayAddress:
  description:
  - The gateway address for default routes to reach destination addresses outside
    this subnetwork.
  returned: success
  type: str
id:
  description:
  - The unique identifier for the resource.
  returned: success
  type: int
ipCidrRange:
  description:
  - The range of internal addresses that are owned by this subnetwork.
  - Provide this property when you create the subnetwork. For example, 10.0.0.0/8
    or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network.
    Only IPv4 is supported.
  returned: success
  type: str
name:
  description:
  - The name of the resource, provided by the client when initially creating the resource.
    The name must be 1-63 characters long, and comply with RFC1035. Specifically,
    the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`
    which means the first character must be a lowercase letter, and all following
    characters must be a dash, lowercase letter, or digit, except the last character,
    which cannot be a dash.
  returned: success
  type: str
network:
  description:
  - The network this subnet belongs to.
  - Only networks that are in the distributed mode can have subnetworks.
  returned: success
  type: dict
enableFlowLogs:
  description:
  - Whether to enable flow logging for this subnetwork.
  returned: success
  type: bool
fingerprint:
  description:
  - Fingerprint of this resource. This field is used internally during updates of
    this resource.
  returned: success
  type: str
secondaryIpRanges:
  description:
  - An array of configurations for secondary IP ranges for VM instances contained
    in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange
    of the subnetwork. The alias IPs may belong to either primary or secondary ranges.
  returned: success
  type: complex
  contains:
    rangeName:
      description:
      - The name associated with this subnetwork secondary range, used when adding
        an alias IP range to a VM instance. The name must be 1-63 characters long,
        and comply with RFC1035. The name must be unique within the subnetwork.
      returned: success
      type: str
    ipCidrRange:
      description:
      - The range of IP addresses belonging to this subnetwork secondary range. Provide
        this property when you create the subnetwork.
      - Ranges must be unique and non-overlapping with all primary and secondary IP
        ranges within a network. Only IPv4 is supported.
      returned: success
      type: str
privateIpGoogleAccess:
  description:
  - When enabled, VMs in this subnetwork without external IP addresses can access
    Google APIs and services by using Private Google Access.
  returned: success
  type: bool
region:
  description:
  - URL of the GCP region for this subnetwork.
  returned: success
  type: str

