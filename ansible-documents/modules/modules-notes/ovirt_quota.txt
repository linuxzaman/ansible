> OVIRT_QUOTA    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/ovirt/ovirt_quota.py)

        Module to manage datacenter quotas in oVirt/RHV

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= auth
        Dictionary with values needed to create HTTP/HTTPS connection to oVirt:

        suboptions:
          ca_file:
            description:
            - A PEM file containing the trusted CA certificates.
            - The certificate presented by the server will be verified using these CA certificates.
            - If `ca_file' parameter is not set, system wide CA certificate store is used.
            - Default value is set by `OVIRT_CAFILE' environment variable.
            type: str
          headers:
            description:
            - Dictionary of HTTP headers to be added to each API call.
            type: dict
          hostname:
            description:
            - A string containing the hostname of the server, usually something like ``server.example.com'`.
            - Default value is set by `OVIRT_HOSTNAME' environment variable.
            - Either `url' or `hostname' is required.
            type: str
          insecure:
            description:
            - A boolean flag that indicates if the server TLS certificate and host name should
              be checked.
            type: bool
          kerberos:
            description:
            - A boolean flag indicating if Kerberos authentication should be used instead
              of the default basic authentication.
            type: bool
          password:
            description:
            - The password of the user.
            - Default value is set by `OVIRT_PASSWORD' environment variable.
            required: true
            type: str
          token:
            description:
            - Token to be used instead of login with username/password.
            - Default value is set by `OVIRT_TOKEN' environment variable.
            type: str
          url:
            description:
            - A string containing the API URL of the server, usually something like ``https://server.example.com/ovirt-engine/api'`.
            - Default value is set by `OVIRT_URL' environment variable.
            - Either `url' or `hostname' is required.
            type: str
          username:
            description:
            - The name of the user, something like `admin@internal'.
            - Default value is set by `OVIRT_USERNAME' environment variable.
            required: true
            type: str
        
        type: dict

- cluster_grace
        Cluster grace(hard limit) defined in percentage (1-100).
        (Aliases: cluster_hard_limit)[Default: (null)]

- cluster_threshold
        Cluster threshold(soft limit) defined in percentage (0-100).
        (Aliases: cluster_soft_limit)[Default: (null)]

- clusters
        List of dictionary of cluster limits, which is valid to specific cluster.
        If cluster isn't specified it's valid to all clusters in system:
        [Default: (null)]
        suboptions:
          cluster:
            description:
            - Name of the cluster.
          cpu:
            description:
            - CPU limit.
          memory:
            description:
            - Memory limit (in GiB).
        

= data_center
        Name of the datacenter where quota should be managed.


- description
        Description of the quota to manage.
        [Default: (null)]

- fetch_nested
        If `True' the module will fetch additional data from the API.
        It will fetch IDs of the VMs disks, snapshots, etc. User can configure to fetch other attributes of the nested entities by
        specifying `nested_attributes'.
        [Default: (null)]
        type: bool
        version_added: 2.3

- id
        ID of the quota to manage.
        [Default: (null)]
        version_added: 2.8

= name
        Name of the quota to manage.


- nested_attributes
        Specifies list of the attributes which should be fetched from the API.
        This parameter apply only when `fetch_nested' is `true'.
        [Default: (null)]
        type: list
        version_added: 2.3

- poll_interval
        Number of the seconds the module waits until another poll request on entity status is sent.
        [Default: 3]
        type: int

- state
        Should the quota be present/absent.
        (Choices: present, absent)[Default: present]

- storage_grace
        Storage grace(hard limit) defined in percentage (1-100).
        (Aliases: storage_hard_limit)[Default: (null)]

- storage_threshold
        Storage threshold(soft limit) defined in percentage (0-100).
        (Aliases: storage_soft_limit)[Default: (null)]

- storages
        List of dictionary of storage limits, which is valid to specific storage.
        If storage isn't specified it's valid to all storages in system:
        [Default: (null)]
        suboptions:
          size:
            description:
            - Size limit (in GiB).
          storage:
            description:
            - Name of the storage.
        

- timeout
        The amount of time in seconds the module should wait for the instance to get into desired state.
        [Default: 180]
        type: int

- wait
        `yes' if the module should wait for the entity to get into desired state.
        [Default: True]
        type: bool


NOTES:
      * In order to use this module you have to install oVirt Python SDK. To ensure it's installed with correct version you can
        create the following task: `pip: name=ovirt-engine-sdk-python version=4.3.0'


REQUIREMENTS:  python >= 2.7, ovirt-engine-sdk-python >= 4.3.0

AUTHOR: Ondra Machacek (@machacekondra)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Examples don't contain auth parameter for simplicity,
# look at ovirt_auth module to see how to reuse authentication:

# Add cluster quota to cluster cluster1 with memory limit 20GiB and CPU limit to 10:
- ovirt_quota:
    name: quota1
    data_center: dcX
    clusters:
        - name: cluster1
          memory: 20
          cpu: 10

# Add cluster quota to all clusters with memory limit 30GiB and CPU limit to 15:
- ovirt_quota:
    name: quota2
    data_center: dcX
    clusters:
        - memory: 30
          cpu: 15

# Add storage quota to storage data1 with size limit to 100GiB
- ovirt_quota:
    name: quota3
    data_center: dcX
    storage_grace: 40
    storage_threshold: 60
    storages:
        - name: data1
          size: 100

# Remove quota quota1 (Note the quota must not be assigned to any VM/disk):
- ovirt_quota:
    state: absent
    data_center: dcX
    name: quota1

# Change Quota Name
- ovirt_quota:
    id: 00000000-0000-0000-0000-000000000000
    name: "new_quota_name"
    data_center: dcX


RETURN VALUES:

id:
    description: ID of the quota which is managed
    returned: On success if quota is found.
    type: str
    sample: 7de90f31-222c-436c-a1ca-7e655bd5b60c
quota:
    description: "Dictionary of all the quota attributes. Quota attributes can be found on your oVirt/RHV instance
                  at following url: http://ovirt.github.io/ovirt-engine-api-model/master/#types/quota."
    returned: On success if quota is found.
    type: dict

