> K8S_SERVICE    (/usr/lib/python2.7/dist-packages/ansible/modules/clustering/k8s/k8s_service.py)

        Use Openshift Python SDK to manage Services on Kubernetes

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_key
        Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.
        [Default: (null)]
        type: str

- ca_cert
        Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate
        validation errors. Can also be specified via K8S_AUTH_SSL_CA_CERT environment variable.
        (Aliases: ssl_ca_cert)[Default: (null)]
        type: path

- client_cert
        Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.
        (Aliases: cert_file)[Default: (null)]
        type: path

- client_key
        Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.
        (Aliases: key_file)[Default: (null)]
        type: path

- context
        The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.
        [Default: (null)]
        type: str

- force
        If set to `True', and `state' is `present', an existing object will be replaced.
        [Default: False]
        type: bool

- host
        Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.
        [Default: (null)]
        type: str

- kubeconfig
        Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client
        will attempt to load the default configuration file from `~/.kube/config.json'. Can also be specified via K8S_AUTH_KUBECONFIG
        environment variable.
        [Default: (null)]
        type: path

- merge_type
        Whether to override the default patch merge approach with a specific type. By default, the strategic merge will typically be
        used.
        For example, Custom Resource Definitions typically aren't updatable by the usual strategic merge. You may want to use `merge' if
        you see "strategic merge patch format is not supported"
        See https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-
        update-a-deployment
        Requires openshift >= 0.6.2
        If more than one merge_type is given, the merge_types will be tried in order
        If openshift >= 0.6.2, this defaults to `['strategic-merge', 'merge']', which is ideal for using the same parameters on resource
        kinds that combine Custom Resources and built-in resources. For openshift < 0.6.2, the default is simply `strategic-merge'.
        (Choices: json, merge, strategic-merge)[Default: (null)]
        type: list

= name
        Use to specify a Service object name.

        type: str

= namespace
        Use to specify a Service object namespace.

        type: str

- password
        Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.
        Please read the description of the `username' option for a discussion of when this option is applicable.
        [Default: (null)]
        type: str

- ports
        A list of ports to expose.
        https://kubernetes.io/docs/concepts/services-networking/service/#multi-port-services
        [Default: (null)]
        type: list

- resource_definition
        A partial YAML definition of the Service object being created/updated. Here you can define Kubernetes Service Resource parameters
        not covered by this module's parameters.
        NOTE: `resource_definition' has lower priority than module parameters. If you try to define e.g. `metadata.namespace' here, that
        value will be ignored and `metadata' used instead.
        (Aliases: definition, inline)[Default: (null)]
        type: dict

- selector
        Label selectors identify objects this Service should apply to.
        https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        [Default: (null)]
        type: dict

- state
        Determines if an object should be created, patched, or deleted. When set to `present', an object will be created, if it does not
        already exist. If set to `absent', an existing object will be deleted. If set to `present', an existing object will be patched,
        if its attributes differ from those specified using module options and `resource_definition'.
        (Choices: present, absent)[Default: present]

- type
        Specifies the type of Service to create.
        See https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
        (Choices: NodePort, ClusterIP, LoadBalancer, ExternalName)[Default: (null)]

- username
        Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.
        Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of
        authentication (e.g. OAuth2 in OpenShift), this option will not work as expected and you should look into the `k8s_auth' module,
        as that might do what you need.
        [Default: (null)]
        type: str

- validate_certs
        Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.
        (Aliases: verify_ssl)[Default: (null)]
        type: bool


NOTES:
      * The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on
        both platforms. For API version details and additional information visit https://github.com/openshift/openshift-restclient-
        python
      * To avoid SSL certificate validation errors when `validate_certs' is `True', the full certificate chain for the API server
        must be provided via `ca_cert' or in the kubeconfig file.


REQUIREMENTS:  python >= 2.7, openshift >= 0.6.2

AUTHOR: KubeVirt Team (@kubevirt)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Expose https port with ClusterIP
  k8s_service:
    state: present
    name: test-https
    namespace: default
    ports:
    - port: 443
      protocol: TCP
    selector:
      key: special

- name: Expose https port with ClusterIP using spec
  k8s_service:
    state: present
    name: test-https
    namespace: default
    inline:
      spec:
        ports:
        - port: 443
          protocol: TCP
        selector:
          key: special


RETURN VALUES:

result:
  description:
  - The created, patched, or otherwise present Service object. Will be empty in the case of a deletion.
  returned: success
  type: complex
  contains:
     api_version:
       description: The versioned schema of this representation of an object.
       returned: success
       type: str
     kind:
       description: Always 'Service'.
       returned: success
       type: str
     metadata:
       description: Standard object metadata. Includes name, namespace, annotations, labels, etc.
       returned: success
       type: complex
     spec:
       description: Specific attributes of the object. Will vary based on the I(api_version) and I(kind).
       returned: success
       type: complex
     status:
       description: Current status details for the object.
       returned: success
       type: complex

