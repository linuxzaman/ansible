> GIT    (/usr/lib/python2.7/dist-packages/ansible/modules/source_control/git.py)

        Manage `git' checkouts of repositories to deploy files or software.

  * This module is maintained by The Ansible Core Team
OPTIONS (= is mandatory):

- accept_hostkey
        if `yes', ensure that "-o StrictHostKeyChecking=no" is present as an ssh option.
        [Default: no]
        type: bool
        version_added: 1.5

- archive
        Specify archive file path with extension. If specified, creates an archive file of the specified format containing the tree
        structure for the source tree. Allowed archive formats ["zip", "tar.gz", "tar", "tgz"]
        This will clone and perform git archive from local directory as not all git servers support git archive.
        [Default: (null)]
        version_added: 2.4

- bare
        if `yes', repository will be created as a bare repo, otherwise it will be a standard repo with a workspace.
        [Default: no]
        type: bool
        version_added: 1.4

- clone
        If `no', do not clone the repository even if it does not exist locally
        [Default: yes]
        type: bool
        version_added: 1.9

- depth
        Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is `1',
        otherwise ignored. Needs `git>=1.9.1' to work correctly.
        [Default: (null)]
        version_added: 1.2

= dest
        The path of where the repository should be checked out. This parameter is required, unless `clone' is set to `no'.


- executable
        Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used.
        [Default: (null)]
        version_added: 1.4

- force
        If `yes', any modified files in the working repository will be discarded.  Prior to 0.7, this was always 'yes' and could not be
        disabled.  Prior to 1.9, the default was `yes`
        [Default: no]
        type: bool
        version_added: 0.7

- key_file
        Specify an optional private key file path, on the target host, to use for the checkout.
        [Default: (null)]
        version_added: 1.5

- recursive
        if `no', repository will be cloned without the --recursive option, skipping sub-modules.
        [Default: yes]
        type: bool
        version_added: 1.6

- reference
        Reference repository (see "git clone --reference ...")
        [Default: (null)]
        version_added: 1.4

- refspec
        Add an additional refspec to be fetched. If version is set to a `SHA-1' not reachable from any branch or tag, this option may be
        necessary to specify the ref containing the `SHA-1'. Uses the same syntax as the 'git fetch' command. An example value could be
        "refs/meta/config".
        [Default: (null)]
        version_added: 1.9

- remote
        Name of the remote.
        [Default: origin]

= repo
        git, SSH, or HTTP(S) protocol address of the git repository.
        (Aliases: name)

- separate_git_dir
        The path to place the cloned repository. If specified, Git repository can be separated from working tree.
        [Default: (null)]
        version_added: 2.7

- ssh_opts
        Creates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override ssh arguments. An example
        value could be "-o StrictHostKeyChecking=no" (although this particular option is better set via `accept_hostkey').
        [Default: (null)]
        version_added: 1.5

- track_submodules
        if `yes', submodules will track the latest commit on their master branch (or other branch specified in .gitmodules).  If `no',
        submodules will be kept at the revision specified by the main project. This is equivalent to specifying the --remote flag to git
        submodule update.
        [Default: no]
        type: bool
        version_added: 1.8

- umask
        The umask to set before doing any checkouts, or any other repository maintenance.
        [Default: (null)]
        version_added: 2.2

- update
        If `no', do not retrieve new revisions from the origin repository
        Operations like archive will work on the existing (old) repository and might not respond to changes to the options version or
        remote.
        [Default: yes]
        type: bool
        version_added: 1.2

- verify_commit
        if `yes', when cloning or checking out a `version' verify the signature of a GPG signed commit. This requires `git'
        version>=2.1.0 to be installed. The commit MUST be signed and the public key MUST be present in the GPG keyring.
        [Default: no]
        type: bool
        version_added: 2.0

- version
        What version of the repository to check out.  This can be the literal string `HEAD', a branch name, a tag name. It can also be a
        `SHA-1' hash, in which case `refspec' needs to be specified if the given revision is not already available.
        [Default: HEAD]


NOTES:
      * If the task seems to be hanging, first verify remote host is in `known_hosts'. SSH will prompt user to authorize the first
        contact with a remote host.  To avoid this prompt, one solution is to use the option accept_hostkey. Another solution is to
        add the remote host public key in `/etc/ssh/ssh_known_hosts' before calling the git module, with the following command:
        ssh-keyscan -H remote_host.com >> /etc/ssh/ssh_known_hosts.


REQUIREMENTS:  git>=1.7.1 (the command line tool)

AUTHOR: Ansible Core Team, Michael DeHaan
        METADATA:
          status:
          - preview
          supported_by: core
        

EXAMPLES:

# Example git checkout from Ansible Playbooks
- git:
    repo: 'https://foosball.example.org/path/to/repo.git'
    dest: /srv/checkout
    version: release-0.22

# Example read-write git checkout from github
- git:
    repo: git@github.com:mylogin/hello.git
    dest: /home/mylogin/hello

# Example just ensuring the repo checkout exists
- git:
    repo: 'https://foosball.example.org/path/to/repo.git'
    dest: /srv/checkout
    update: no

# Example just get information about the repository whether or not it has
# already been cloned locally.
- git:
    repo: 'https://foosball.example.org/path/to/repo.git'
    dest: /srv/checkout
    clone: no
    update: no

# Example checkout a github repo and use refspec to fetch all pull requests
- git:
    repo: https://github.com/ansible/ansible-examples.git
    dest: /src/ansible-examples
    refspec: '+refs/pull/*:refs/heads/*'

# Example Create git archive from repo
- git:
    repo: https://github.com/ansible/ansible-examples.git
    dest: /src/ansible-examples
    archive: /tmp/ansible-examples.zip

# Example clone a repo with separate git directory
- git:
    repo: https://github.com/ansible/ansible-examples.git
    dest: /src/ansible-examples
    separate_git_dir: /src/ansible-examples.git


RETURN VALUES:

after:
    description: last commit revision of the repository retrieved during the update
    returned: success
    type: str
    sample: 4c020102a9cd6fe908c9a4a326a38f972f63a903
before:
    description: commit revision before the repository was updated, "null" for new repository
    returned: success
    type: str
    sample: 67c04ebe40a003bda0efb34eacfb93b0cafdf628
remote_url_changed:
    description: Contains True or False whether or not the remote URL was changed.
    returned: success
    type: bool
    sample: True
warnings:
    description: List of warnings if requested features were not available due to a too old git version.
    returned: error
    type: str
    sample: Your git version is too old to fully support the depth argument. Falling back to full checkouts.
git_dir_now:
    description: Contains the new path of .git directory if it's changed
    returned: success
    type: str
    sample: /path/to/new/git/dir
git_dir_before:
    description: Contains the original path of .git directory if it's changed
    returned: success
    type: str
    sample: /path/to/old/git/dir

