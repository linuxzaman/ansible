> SHELL    (/usr/lib/python2.7/dist-packages/ansible/modules/commands/shell.py)

        The `shell' module takes the command name followed by a list of space-delimited arguments. It is almost exactly like the
        [command] module but runs the command through a shell (`/bin/sh') on the remote node. For Windows targets, use the [win_shell]
        module instead.

  * This module is maintained by The Ansible Core Team
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- chdir
        Change into this directory before running the command.
        [Default: (null)]
        type: path
        version_added: 0.6

- creates
        A filename, when it already exists, this step will *not* be run.
        [Default: (null)]
        type: path

- executable
        Change the shell used to execute the command.
        This expects an absolute path to the executable.
        [Default: (null)]
        type: path
        version_added: 0.9

= free_form
        The shell module takes a free form command to run, as a string.
        There is no actual parameter named 'free form'.
        See the examples on how to use this module.

        type: str

- removes
        A filename, when it does not exist, this step will *not* be run.
        [Default: (null)]
        type: path
        version_added: 0.8

- stdin
        Set the stdin of the command directly to the specified value.
        [Default: (null)]
        type: str
        version_added: 2.4

- stdin_add_newline
        Whether to append a newline to stdin data.
        [Default: True]
        type: bool
        version_added: 2.8

- warn
        Whether to enable task warnings.
        [Default: True]
        type: bool
        version_added: 1.8


NOTES:
      * If you want to execute a command securely and predictably, it may be better to use the [command] module instead. Best
        practices when writing playbooks will follow the trend of using [command] unless the `shell' module is explicitly required.
        When running ad-hoc commands, use your best judgement.
      * Check mode is supported when passing `creates' or `removes'. If running in check mode and either of these are specified,
        the module will check for the existence of the file and report the correct changed status. If these are not supplied, the
        task will be skipped.
      * To sanitize any variables passed to the shell module, you should use `{{ var | quote }}' instead of just `{{ var }}' to
        make sure they do not include evil things like semicolons.
      * An alternative to using inline shell scripts with this module is to use the [script] module possibly together with the
        [template] module.
      * For rebooting systems, use the [reboot] or [win_reboot] module.


SEE ALSO:
      * Module command
           The official documentation on the command module.
           https://docs.ansible.com/ansible/latest/modules/command_module.html
      * Module raw
           The official documentation on the raw module.
           https://docs.ansible.com/ansible/latest/modules/raw_module.html
      * Module script
           The official documentation on the script module.
           https://docs.ansible.com/ansible/latest/modules/script_module.html
      * Module win_shell
           The official documentation on the win_shell module.
           https://docs.ansible.com/ansible/latest/modules/win_shell_module.html


AUTHOR: Ansible Core Team, Michael DeHaan
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:

- name: Execute the command in remote shell; stdout goes to the specified file on the remote.
  shell: somescript.sh >> somelog.txt

- name: Change the working directory to somedir/ before executing the command.
  shell: somescript.sh >> somelog.txt
  args:
    chdir: somedir/

# You can also use the 'args' form to provide the options.
- name: This command will change the working directory to somedir/ and will only run when somedir/somelog.txt doesn't exist.
  shell: somescript.sh >> somelog.txt
  args:
    chdir: somedir/
    creates: somelog.txt

- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)
  shell: cat < /tmp/*txt
  args:
    executable: /bin/bash

- name: Run a command using a templated variable (always use quote filter to avoid injection)
  shell: cat {{ myfile|quote }}

# You can use shell to run other executables to perform actions inline
- name: Run expect to wait for a successful PXE boot via out-of-band CIMC
  shell: |
    set timeout 300
    spawn ssh admin@{{ cimc_host }}

    expect "password:"
    send "{{ cimc_password }}\n"

    expect "\n{{ cimc_name }}"
    send "connect host\n"

    expect "pxeboot.n12"
    send "\n"

    exit 0
  args:
    executable: /usr/bin/expect
  delegate_to: localhost

# Disabling warnings
- name: Using curl to connect to a host via SOCKS proxy (unsupported in uri). Ordinarily this would throw a warning.
  shell: curl --socks5 localhost:9000 http://www.ansible.com
  args:
    warn: no


RETURN VALUES:

msg:
    description: changed
    returned: always
    type: bool
    sample: True
start:
    description: The command execution start time
    returned: always
    type: str
    sample: '2016-02-25 09:18:26.429568'
end:
    description: The command execution end time
    returned: always
    type: str
    sample: '2016-02-25 09:18:26.755339'
delta:
    description: The command execution delta time
    returned: always
    type: str
    sample: '0:00:00.325771'
stdout:
    description: The command standard output
    returned: always
    type: str
    sample: 'Clustering node rabbit@slave1 with rabbit@master ...'
stderr:
    description: The command standard error
    returned: always
    type: str
    sample: 'ls: cannot access foo: No such file or directory'
cmd:
    description: The command executed by the task
    returned: always
    type: str
    sample: 'rabbitmqctl join_cluster rabbit@master'
rc:
    description: The command return code (0 means success)
    returned: always
    type: int
    sample: 0
stdout_lines:
    description: The command standard output split in lines
    returned: always
    type: list
    sample: [u'Clustering node rabbit@slave1 with rabbit@master ...']

