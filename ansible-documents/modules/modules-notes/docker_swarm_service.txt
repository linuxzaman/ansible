> DOCKER_SWARM_SERVICE    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/docker/docker_swarm_service.py)

        Manages docker services via a swarm manager node.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_version
        The version of the Docker API running on the Docker Host.
        Defaults to the latest version of the API supported by Docker SDK for Python and the docker daemon.
        If the value is not specified in the task, the value of environment variable `DOCKER_API_VERSION' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_api_version)[Default: auto]
        type: str

- args
        List arguments to be passed to the container.
        Corresponds to the `ARG' parameter of `docker service create'.
        [Default: (null)]
        type: list

- ca_cert
        Use a CA certificate when performing server verification by providing the path to a CA certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `ca.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_ca_cert, cacert_path)[Default: (null)]
        type: path

- client_cert
        Path to the client's TLS certificate file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `cert.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_cert, cert_path)[Default: (null)]
        type: path

- client_key
        Path to the client's TLS key file.
        If the value is not specified in the task and the environment variable `DOCKER_CERT_PATH' is set, the file `key.pem' from the
        directory specified in the environment variable `DOCKER_CERT_PATH' will be used.
        (Aliases: tls_client_key, key_path)[Default: (null)]
        type: path

- command
        Command to execute when the container starts.
        A command may be either a string or a list or a list of strings.
        Corresponds to the `COMMAND' parameter of `docker service create'.
        [Default: (null)]
        type: raw
        version_added: 2.8
        

- configs
        List of dictionaries describing the service configs.
        Corresponds to the `--config' option of `docker service create'.
        Requires API version >= 1.30.
        [Default: (null)]
        suboptions:
          config_id:
            description:
            - Config's ID.
            required: true
            type: str
          config_name:
            description:
            - Config's name as defined at its creation.
            required: true
            type: str
          filename:
            description:
            - Name of the file containing the config. Defaults to the `config_name' if not
              specified.
            required: true
            type: str
          gid:
            description:
            - GID of the config file's group.
            type: str
          mode:
            description:
            - File access mode inside the container. Must be an octal number (like `0644'
              or `0444').
            type: int
          uid:
            description:
            - UID of the config file's owner.
            type: str
        
        type: list

- constraints
        List of the service constraints.
        Corresponds to the `--constraint' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `placement.constraints' instead.
        [Default: (null)]
        type: list

- container_labels
        Dictionary of key value pairs.
        Corresponds to the `--container-label' option of `docker service create'.
        [Default: (null)]
        type: dict

- debug
        Debug mode
        [Default: False]
        type: bool

- dns
        List of custom DNS servers.
        Corresponds to the `--dns' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        type: list

- dns_options
        List of custom DNS options.
        Corresponds to the `--dns-option' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        type: list

- dns_search
        List of custom DNS search domains.
        Corresponds to the `--dns-search' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        type: list

- docker_host
        The URL or Unix socket path used to connect to the Docker API. To connect to a remote host, provide the TCP connection string.
        For example, `tcp://192.0.2.23:2376'. If TLS is used to encrypt the connection, the module will automatically replace `tcp' in
        the connection URL with `https'.
        If the value is not specified in the task, the value of environment variable `DOCKER_HOST' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: docker_url)[Default: unix://var/run/docker.sock]
        type: str

- endpoint_mode
        Service endpoint mode.
        Corresponds to the `--endpoint-mode' option of `docker service create'.
        Requires API version >= 1.25.
        (Choices: vip, dnsrr)[Default: (null)]
        type: str

- env
        List or dictionary of the service environment variables.
        If passed a list each items need to be in the format of `KEY=VALUE'.
        If passed a dictionary values which might be parsed as numbers, booleans or other types by the YAML parser must be quoted (e.g.
        `"true"') in order to avoid data loss.
        Corresponds to the `--env' option of `docker service create'.
        [Default: (null)]
        type: raw

- env_files
        List of paths to files, present on the target, containing environment variables `FOO=BAR'.
        The order of the list is significant in determining the value assigned to a variable that shows up more than once.
        If variable also present in `env', then `env' value will override.
        [Default: (null)]
        type: list
        version_added: 2.8

- force_update
        Force update even if no changes require it.
        Corresponds to the `--force' option of `docker service update'.
        Requires API version >= 1.25.
        [Default: False]
        type: bool

- groups
        List of additional group names and/or IDs that the container process will run as.
        Corresponds to the `--group' option of `docker service update'.
        Requires API version >= 1.25.
        [Default: (null)]
        type: list
        version_added: 2.8

- healthcheck
        Configure a check that is run to determine whether or not containers for this service are "healthy". See the docs for the
        L(HEALTHCHECK Dockerfile instruction,https://docs.docker.com/engine/reference/builder/#healthcheck) for details on how
        healthchecks work.
        `interval', `timeout' and `start_period' are specified as durations. They accept duration as a string in a format that look like:
        `5h34m56s', `1m30s' etc. The supported units are `us', `ms', `s', `m' and `h'.
        Requires API version >= 1.25.
        [Default: (null)]
        suboptions:
          interval:
            description:
            - Time between running the check.
            type: str
          retries:
            description:
            - Consecutive failures needed to report unhealthy. It accept integer value.
            type: int
          start_period:
            description:
            - Start period for the container to initialize before starting health-retries
              countdown.
            type: str
          test:
            description:
            - Command to run to check health.
            - Must be either a string or a list. If it is a list, the first item must be one
              of `NONE', `CMD' or `CMD-SHELL'.
            type: raw
          timeout:
            description:
            - Maximum time to allow one check to run.
            type: str
        
        type: dict
        version_added: 2.8

- hostname
        Container hostname.
        Corresponds to the `--hostname' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        type: str

- hosts
        Dict of host-to-IP mappings, where each host name is a key in the dictionary. Each host name will be added to the container's
        /etc/hosts file.
        Corresponds to the `--host' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        type: dict
        version_added: 2.8

= image
        Service image path and tag.
        Corresponds to the `IMAGE' parameter of `docker service create'.

        type: str

- labels
        Dictionary of key value pairs.
        Corresponds to the `--label' option of `docker service create'.
        [Default: (null)]
        type: dict

- limit_cpu
        Service CPU limit. `0' equals no limit.
        Corresponds to the `--limit-cpu' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `limits.cpus' instead.
        [Default: (null)]
        type: float

- limit_memory
        Service memory limit (format: `<number>[<unit>]'). Number is a positive integer. Unit can be `B' (byte), `K' (kibibyte, 1024B),
        `M' (mebibyte), `G' (gibibyte), `T' (tebibyte), or `P' (pebibyte).
        `0' equals no limit.
        Omitting the unit defaults to bytes.
        Corresponds to the `--limit-memory' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `limits.memory' instead.
        [Default: (null)]
        type: str

- limits
        Configures service resource limits.
        [Default: (null)]
        suboptions:
          cpus:
            description:
            - Service CPU limit. `0' equals no limit.
            - Corresponds to the `--limit-cpu' option of `docker service create'.
            type: float
          memory:
            description:
            - 'Service memory reservation (format: `<number>[<unit>]'). Number is a positive
              integer. Unit can be `B' (byte), `K' (kibibyte, 1024B), `M' (mebibyte), `G'
              (gibibyte), `T' (tebibyte), or `P' (pebibyte).'
            - `0' equals no reservation.
            - Omitting the unit defaults to bytes.
            - Corresponds to the `--reserve-memory' option of `docker service create'.
            type: str
        
        type: dict
        version_added: 2.8

- log_driver
        Configure the logging driver for a service.
        Corresponds to the `--log-driver' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `logging.driver' instead.
        [Default: (null)]
        type: str

- log_driver_options
        Options for service logging driver.
        Corresponds to the `--log-opt' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `logging.options' instead.
        [Default: (null)]
        type: dict

- logging
        Logging configuration for the service.
        [Default: (null)]
        suboptions:
          driver:
            description:
            - Configure the logging driver for a service.
            - Corresponds to the `--log-driver' option of `docker service create'.
            type: str
          options:
            description:
            - Options for service logging driver.
            - Corresponds to the `--log-opt' option of `docker service create'.
            type: dict
        
        type: dict
        version_added: 2.8

- mode
        Service replication mode.
        Service will be removed and recreated when changed.
        Corresponds to the `--mode' option of `docker service create'.
        (Choices: replicated, global)[Default: replicated]
        type: str

- mounts
        List of dictionaries describing the service mounts.
        Corresponds to the `--mount' option of `docker service create'.
        [Default: (null)]
        suboptions:
          driver_config:
            description:
            - Volume driver configuration.
            - Can only be used when `mode' is `volume'.
            suboptions:
              name:
                description:
                - Name of the volume-driver plugin to use for the volume.
                type: str
              options:
                description:
                - Options as key-value pairs to pass to the driver for this volume.
                type: dict
            type: dict
            version_added: '2.8'
          labels:
            description:
            - Volume labels to apply.
            type: dict
            version_added: '2.8'
          no_copy:
            description:
            - Disable copying of data from a container when a volume is created.
            - Can only be used when `mode' is `volume'.
            type: bool
            version_added: '2.8'
          propagation:
            choices:
            - shared
            - slave
            - private
            - rshared
            - rslave
            - rprivate
            description:
            - The propagation mode to use.
            - Can only be used when `mode' is `bind'.
            type: str
            version_added: '2.8'
          readonly:
            description:
            - Whether the mount should be read-only.
            type: bool
          source:
            description:
            - Mount source (e.g. a volume name or a host path).
            required: true
            type: str
          target:
            description:
            - Container path.
            required: true
            type: str
          tmpfs_mode:
            description:
            - File mode of the tmpfs in octal.
            - Can only be used when `mode' is `tmpfs'.
            type: int
            version_added: '2.8'
          tmpfs_size:
            description:
            - 'Size of the tmpfs mount (format: `<number>[<unit>]'). Number is a positive
              integer. Unit can be `B' (byte), `K' (kibibyte, 1024B), `M' (mebibyte), `G'
              (gibibyte), `T' (tebibyte), or `P' (pebibyte).'
            - Can only be used when `mode' is `tmpfs'.
            type: str
            version_added: '2.8'
          type:
            choices:
            - bind
            - volume
            - tmpfs
            default: bind
            description:
            - The mount type.
            type: str
        
        type: list

= name
        Service name.
        Corresponds to the `--name' option of `docker service create'.

        type: str

- networks
        List of the service networks names.
        Prior to API version 1.29, updating and removing networks is not supported. If changes are made the service will then be removed
        and recreated.
        Corresponds to the `--network' option of `docker service create'.
        [Default: (null)]
        type: list

- placement
        Configures service placement preferences and constraints.
        [Default: (null)]
        suboptions:
          constraints:
            description:
            - List of the service constraints.
            - Corresponds to the `--constraint' option of `docker service create'.
            type: list
          preferences:
            description:
            - List of the placement preferences as key value pairs.
            - Corresponds to the `--placement-pref' option of `docker service create'.
            - Requires API version >= 1.27.
            type: list
        
        type: dict
        version_added: 2.8

- publish
        List of dictionaries describing the service published ports.
        Corresponds to the `--publish' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        suboptions:
          mode:
            choices:
            - ingress
            - host
            description:
            - What publish mode to use.
            - Requires API version >= 1.32.
            type: str
          protocol:
            choices:
            - tcp
            - udp
            default: tcp
            description:
            - What protocol to use.
            type: str
          published_port:
            description:
            - The port to make externally available.
            required: true
            type: int
          target_port:
            description:
            - The port inside the container to expose.
            required: true
            type: int
        
        type: list

- read_only
        Mount the containers root filesystem as read only.
        Corresponds to the `--read-only' option of `docker service create'.
        [Default: (null)]
        type: bool
        version_added: 2.8

- replicas
        Number of containers instantiated in the service. Valid only if `mode' is `replicated'.
        If set to `-1', and service is not present, service replicas will be set to `1'.
        If set to `-1', and service is present, service replicas will be unchanged.
        Corresponds to the `--replicas' option of `docker service create'.
        [Default: -1]
        type: int

- reservations
        Configures service resource reservations.
        [Default: (null)]
        suboptions:
          cpus:
            description:
            - Service CPU reservation. `0' equals no reservation.
            - Corresponds to the `--reserve-cpu' option of `docker service create'.
            type: float
          memory:
            description:
            - 'Service memory reservation (format: `<number>[<unit>]'). Number is a positive
              integer. Unit can be `B' (byte), `K' (kibibyte, 1024B), `M' (mebibyte), `G'
              (gibibyte), `T' (tebibyte), or `P' (pebibyte).'
            - `0' equals no reservation.
            - Omitting the unit defaults to bytes.
            - Corresponds to the `--reserve-memory' option of `docker service create'.
            type: str
        
        type: dict
        version_added: 2.8

- reserve_cpu
        Service CPU reservation. `0' equals no reservation.
        Corresponds to the `--reserve-cpu' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `reservations.cpus' instead.
        [Default: (null)]
        type: float

- reserve_memory
        Service memory reservation (format: `<number>[<unit>]'). Number is a positive integer. Unit can be `B' (byte), `K' (kibibyte,
        1024B), `M' (mebibyte), `G' (gibibyte), `T' (tebibyte), or `P' (pebibyte).
        `0' equals no reservation.
        Omitting the unit defaults to bytes.
        Corresponds to the `--reserve-memory' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `reservations.memory' instead.
        [Default: (null)]
        type: str

- resolve_image
        If the current image digest should be resolved from registry and updated if changed.
        Requires API version >= 1.30.
        [Default: False]
        type: bool
        version_added: 2.8
        

- restart_config
        Configures if and how to restart containers when they exit.
        [Default: (null)]
        suboptions:
          condition:
            choices:
            - none
            - on-failure
            - any
            description:
            - Restart condition of the service.
            - Corresponds to the `--restart-condition' option of `docker service create'.
            type: str
          delay:
            description:
            - Delay between restarts.
            - 'Accepts a a string in a format that look like: `5h34m56s', `1m30s' etc. The
              supported units are `us', `ms', `s', `m' and `h'.'
            - Corresponds to the `--restart-delay' option of `docker service create'.
            type: str
          max_attempts:
            description:
            - Maximum number of service restarts.
            - Corresponds to the `--restart-condition' option of `docker service create'.
            type: int
          window:
            description:
            - Restart policy evaluation window.
            - 'Accepts a string in a format that look like: `5h34m56s', `1m30s' etc. The
              supported units are `us', `ms', `s', `m' and `h'.'
            - Corresponds to the `--restart-window' option of `docker service create'.
            type: str
        
        type: dict
        version_added: 2.8

- restart_policy
        Restart condition of the service.
        Corresponds to the `--restart-condition' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `restart_config.condition' instead.
        (Choices: none, on-failure, any)[Default: (null)]
        type: str

- restart_policy_attempts
        Maximum number of service restarts.
        Corresponds to the `--restart-condition' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `restart_config.max_attempts' instead.
        [Default: (null)]
        type: int

- restart_policy_delay
        Delay between restarts.
        Accepts a duration as an integer in nanoseconds or as a string in a format that look like: `5h34m56s', `1m30s' etc. The supported
        units are `us', `ms', `s', `m' and `h'.
        Corresponds to the `--restart-delay' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `restart_config.delay' instead.
        [Default: (null)]
        type: raw

- restart_policy_window
        Restart policy evaluation window.
        Accepts a duration as an integer in nanoseconds or as a string in a format that look like: `5h34m56s', `1m30s' etc. The supported
        units are `us', `ms', `s', `m' and `h'.
        Corresponds to the `--restart-window' option of `docker service create'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `restart_config.window' instead.
        [Default: (null)]
        type: raw

- rollback_config
        Configures how the service should be rolled back in case of a failing update.
        [Default: (null)]
        suboptions:
          delay:
            description:
            - Delay between task rollbacks.
            - 'Accepts a string in a format that look like: `5h34m56s', `1m30s' etc. The
              supported units are `us', `ms', `s', `m' and `h'.'
            - Corresponds to the `--rollback-delay' option of `docker service create'.
            - Requires API version >= 1.28.
            type: str
          failure_action:
            choices:
            - continue
            - pause
            description:
            - Action to take in case of rollback failure.
            - Corresponds to the `--rollback-failure-action' option of `docker service create'.
            - Requires API version >= 1.28.
            type: str
          max_failure_ratio:
            description:
            - Fraction of tasks that may fail during a rollback.
            - Corresponds to the `--rollback-max-failure-ratio' option of `docker service
              create'.
            - Requires API version >= 1.28.
            type: float
          monitor:
            description:
            - Duration after each task rollback to monitor for failure.
            - 'Accepts a string in a format that look like: `5h34m56s', `1m30s' etc. The
              supported units are `us', `ms', `s', `m' and `h'.'
            - Corresponds to the `--rollback-monitor' option of `docker service create'.
            - Requires API version >= 1.28.
            type: str
          order:
            choices:
            - stop-first
            - start-first
            description:
            - Specifies the order of operations during rollbacks.
            - Corresponds to the `--rollback-order' option of `docker service create'.
            - Requires API version >= 1.29.
            type: str
          parallelism:
            description:
            - The number of containers to rollback at a time. If set to 0, all containers
              rollback simultaneously.
            - Corresponds to the `--rollback-parallelism' option of `docker service create'.
            - Requires API version >= 1.28.
            type: int
        
        type: dict
        version_added: 2.8

- secrets
        List of dictionaries describing the service secrets.
        Corresponds to the `--secret' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        suboptions:
          filename:
            description:
            - Name of the file containing the secret. Defaults to the `secret_name' if not
              specified.
            type: str
          gid:
            description:
            - GID of the secret file's group.
            type: str
          mode:
            description:
            - File access mode inside the container. Must be an octal number (like `0644'
              or `0444').
            type: int
          secret_id:
            description:
            - Secret's ID.
            required: true
            type: str
          secret_name:
            description:
            - Secret's name as defined at its creation.
            required: true
            type: str
          uid:
            description:
            - UID of the secret file's owner.
            type: str
        
        type: list

- ssl_version
        Provide a valid SSL version number. Default value determined by ssl.py module.
        If the value is not specified in the task, the value of environment variable `DOCKER_SSL_VERSION' will be used instead.
        [Default: (null)]
        type: str

= state
        `absent' - A service matching the specified name will be removed and have its tasks stopped.
        `present' - Asserts the existence of a service matching the name and provided configuration parameters. Unspecified configuration
        parameters will be set to docker defaults.
        (Choices: present, absent)[Default: present]
        type: str

- stop_grace_period
        Time to wait before force killing a container.
        Accepts a duration as a string in a format that look like: `5h34m56s', `1m30s' etc. The supported units are `us', `ms', `s', `m'
        and `h'.
        Corresponds to the `--stop-grace-period' option of `docker service create'.
        [Default: (null)]
        type: str
        version_added: 2.8

- stop_signal
        Override default signal used to stop the container.
        Corresponds to the `--stop-signal' option of `docker service create'.
        [Default: (null)]
        type: str
        version_added: 2.8

- timeout
        The maximum amount of time in seconds to wait on a response from the API.
        If the value is not specified in the task, the value of environment variable `DOCKER_TIMEOUT' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: 60]
        type: int

- tls
        Secure the connection to the API by using TLS without verifying the authenticity of the Docker host server. Note that if
        `tls_verify' is set to `yes' as well, it will take precedence.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: False]
        type: bool

- tls_hostname
        When verifying the authenticity of the Docker Host server, provide the expected name of the server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_HOSTNAME' will be used instead. If the
        environment variable is not set, the default value will be used.
        [Default: localhost]
        type: str

- tty
        Allocate a pseudo-TTY.
        Corresponds to the `--tty' option of `docker service create'.
        Requires API version >= 1.25.
        [Default: (null)]
        type: bool

- update_config
        Configures how the service should be updated. Useful for configuring rolling updates.
        [Default: (null)]
        suboptions:
          delay:
            description:
            - Rolling update delay.
            - 'Accepts a string in a format that look like: `5h34m56s', `1m30s' etc. The
              supported units are `us', `ms', `s', `m' and `h'.'
            - Corresponds to the `--update-delay' option of `docker service create'.
            type: str
          failure_action:
            choices:
            - continue
            - pause
            - rollback
            description:
            - Action to take in case of container failure.
            - Corresponds to the `--update-failure-action' option of `docker service create'.
            - Usage of `rollback' requires API version >= 1.29.
            type: str
          max_failure_ratio:
            description:
            - Fraction of tasks that may fail during an update before the failure action is
              invoked.
            - Corresponds to the `--update-max-failure-ratio' option of `docker service
              create'.
            - Requires API version >= 1.25.
            type: float
          monitor:
            description:
            - Time to monitor updated tasks for failures.
            - 'Accepts a string in a format that look like: `5h34m56s', `1m30s' etc. The
              supported units are `us', `ms', `s', `m' and `h'.'
            - Corresponds to the `--update-monitor' option of `docker service create'.
            - Requires API version >= 1.25.
            type: str
          order:
            choices:
            - stop-first
            - start-first
            description:
            - Specifies the order of operations when rolling out an updated task.
            - Corresponds to the `--update-order' option of `docker service create'.
            - Requires API version >= 1.29.
            type: str
          parallelism:
            description:
            - Rolling update parallelism.
            - Corresponds to the `--update-parallelism' option of `docker service create'.
            type: int
        
        type: dict
        version_added: 2.8

- update_delay
        Rolling update delay.
        Accepts a duration as an integer in nanoseconds or as a string in a format that look like: `5h34m56s', `1m30s' etc. The supported
        units are `us', `ms', `s', `m' and `h'.
        Corresponds to the `--update-delay' option of `docker service create'.
        Before Ansible 2.8, the default value for this option was `10'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `update_config.delay' instead.
        [Default: (null)]
        type: raw

- update_failure_action
        Action to take in case of container failure.
        Corresponds to the `--update-failure-action' option of `docker service create'.
        Usage of `rollback' requires API version >= 1.29.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `update_config.failure_action' instead.
        (Choices: continue, pause, rollback)[Default: (null)]
        type: str

- update_max_failure_ratio
        Fraction of tasks that may fail during an update before the failure action is invoked.
        Corresponds to the `--update-max-failure-ratio' option of `docker service create'.
        Requires API version >= 1.25.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `update_config.max_failure_ratio' instead.
        [Default: (null)]
        type: float

- update_monitor
        Time to monitor updated tasks for failures.
        Accepts a duration as an integer in nanoseconds or as a string in a format that look like: `5h34m56s', `1m30s' etc. The supported
        units are `us', `ms', `s', `m' and `h'.
        Corresponds to the `--update-monitor' option of `docker service create'.
        Requires API version >= 1.25.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `update_config.monitor' instead.
        [Default: (null)]
        type: raw

- update_order
        Specifies the order of operations when rolling out an updated task.
        Corresponds to the `--update-order' option of `docker service create'.
        Requires API version >= 1.29.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `update_config.order' instead.
        (Choices: stop-first, start-first)[Default: (null)]
        type: str

- update_parallelism
        Rolling update parallelism.
        Corresponds to the `--update-parallelism' option of `docker service create'.
        Before Ansible 2.8, the default value for this option was `1'.
        Deprecated in 2.8, will be removed in 2.12. Use parameter `update_config.parallelism' instead.
        [Default: (null)]
        type: int

- user
        Sets the username or UID used for the specified command.
        Before Ansible 2.8, the default value for this option was `root'.
        The default has been removed so that the user defined in the image is used if no user is specified here.
        Corresponds to the `--user' option of `docker service create'.
        [Default: (null)]
        type: str

- validate_certs
        Secure the connection to the API by using TLS and verifying the authenticity of the Docker host server.
        If the value is not specified in the task, the value of environment variable `DOCKER_TLS_VERIFY' will be used instead. If the
        environment variable is not set, the default value will be used.
        (Aliases: tls_verify)[Default: False]
        type: bool

- working_dir
        Path to the working directory.
        Corresponds to the `--workdir' option of `docker service create'.
        [Default: (null)]
        type: str
        version_added: 2.8


NOTES:
      * Images will only resolve to the latest digest when using Docker API >= 1.30 and Docker SDK for Python >= 3.2.0. When using
        older versions use `force_update: true' to trigger the swarm to resolve a new image.
      * Connect to the Docker daemon by providing parameters with each task or by defining environment variables. You can define
        `DOCKER_HOST', `DOCKER_TLS_HOSTNAME', `DOCKER_API_VERSION', `DOCKER_CERT_PATH', `DOCKER_SSL_VERSION', `DOCKER_TLS',
        `DOCKER_TLS_VERIFY' and `DOCKER_TIMEOUT'. If you are using docker machine, run the script shipped with the product that
        sets up the environment. It will set these variables for you. See https://docker-py.readthedocs.io/en/stable/machine/ for
        more details.
      * When connecting to Docker daemon with TLS, you might need to install additional Python packages. For the Docker SDK for
        Python, version 2.4 or newer, this can be done by installing `docker[tls]' with [pip].
      * Note that the Docker SDK for Python only allows to specify the path to the Docker configuration for very few functions. In
        general, it will use `$HOME/.docker/config.json' if the `DOCKER_CONFIG' environment variable is not specified, and use
        `$DOCKER_CONFIG/config.json' otherwise.


REQUIREMENTS:  Docker API >= 1.24, Docker SDK for Python: Please note that the L(docker-py,https://pypi.org/project/docker-py/) Python
        module has been superseded by L(docker,https://pypi.org/project/docker/) (see L(here,https://github.com/docker
        /docker-py/issues/1310) for details). This module does `not' work with docker-py., L(Docker SDK for Python,https
        ://docker-py.readthedocs.io/en/stable/) >= 2.0.2, Python >= 2.7

AUTHOR: Dario Zanzico (@dariko), Jason Witkowski (@jwitko), Hannes Ljungberg (@hannseman)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Set command and arguments
  docker_swarm_service:
    name: myservice
    image: alpine
    command: sleep
    args:
      - "3600"

- name: Set a bind mount
  docker_swarm_service:
    name: myservice
    image: alpine
    mounts:
      - source: /tmp/
        target: /remote_tmp/
        type: bind

- name: Set service labels
  docker_swarm_service:
    name: myservice
    image: alpine
    labels:
      com.example.description: "Accounting webapp"
      com.example.department: "Finance"

- name: Set environment variables
  docker_swarm_service:
    name: myservice
    image: alpine
    env:
      ENVVAR1: envvar1
      ENVVAR2: envvar2
    env_files:
      - envs/common.env
      - envs/apps/web.env

- name: Set fluentd logging
  docker_swarm_service:
    name: myservice
    image: alpine
    logging:
      driver: fluentd
      options:
        fluentd-address: "127.0.0.1:24224"
        fluentd-async-connect: "true"
        tag: myservice

- name: Set restart policies
  docker_swarm_service:
    name: myservice
    image: alpine
    restart_config:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s

- name: Set update config
  docker_swarm_service:
    name: myservice
    image: alpine
    update_config:
      parallelism: 2
      delay: 10s
      order: stop-first

- name: Set rollback config
  docker_swarm_service:
    name: myservice
    image: alpine
    update_config:
      failure_action: rollback
    rollback_config:
      parallelism: 2
      delay: 10s
      order: stop-first

- name: Set placement preferences
  docker_swarm_service:
    name: myservice
    image: alpine:edge
    placement:
      preferences:
        - spread: node.labels.mylabel
      constraints:
        - node.role == manager
        - engine.labels.operatingsystem == ubuntu 14.04

- name: Set configs
  docker_swarm_service:
    name: myservice
    image: alpine:edge
    configs:
      - config_id: myconfig_id
        config_name: myconfig_name
        filename: "/tmp/config.txt"

- name: Set networks
  docker_swarm_service:
    name: myservice
    image: alpine:edge
    networks:
      - mynetwork

- name: Set secrets
  docker_swarm_service:
    name: myservice
    image: alpine:edge
    secrets:
      - secret_id: mysecret_id
        secret_name: mysecret_name
        filename: "/run/secrets/secret.txt"

- name: Start service with healthcheck
  docker_swarm_service:
    name: myservice
    image: nginx:1.13
    healthcheck:
      # Check if nginx server is healthy by curl'ing the server.
      # If this fails or timeouts, the healthcheck fails.
      test: ["CMD", "curl", "--fail", "http://nginx.host.com"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 30s

- name: Configure service resources
  docker_swarm_service:
    name: myservice
    image: alpine:edge
    reservations:
      cpus: 0.25
      memory: 20M
    limits:
      cpus: 0.50
      memory: 50M

- name: Remove service
  docker_swarm_service:
    name: myservice
    state: absent


RETURN VALUES:

swarm_service:
  returned: always
  type: dict
  description:
    - Dictionary of variables representing the current state of the service.
      Matches the module parameters format.
    - Note that facts are not part of registered vars but accessible directly.
    - Note that before Ansible 2.7.9, the return variable was documented as C(ansible_swarm_service),
      while the module actually returned a variable called C(ansible_docker_service). The variable
      was renamed to C(swarm_service) in both code and documentation for Ansible 2.7.9 and Ansible 2.8.0.
      In Ansible 2.7.x, the old name C(ansible_docker_service) can still be used.
  sample: '{
    "args": [
      "3600"
    ],
    "command": [
      "sleep"
    ],
    "configs": null,
    "constraints": [
      "node.role == manager",
      "engine.labels.operatingsystem == ubuntu 14.04"
    ],
    "container_labels": null,
    "dns": null,
    "dns_options": null,
    "dns_search": null,
    "endpoint_mode": null,
    "env": [
       "ENVVAR1=envvar1",
       "ENVVAR2=envvar2"
    ],
    "force_update": null,
    "groups": null,
    "healthcheck": {
      "interval": 90000000000,
      "retries": 3,
      "start_period": 30000000000,
      "test": [
        "CMD",
        "curl",
        "--fail",
        "http://nginx.host.com"
      ],
      "timeout": 10000000000
    },
    "healthcheck_disabled": false,
    "hostname": null,
    "hosts": null,
    "image": "alpine:latest@sha256:b3dbf31b77fd99d9c08f780ce6f5282aba076d70a513a8be859d8d3a4d0c92b8",
    "labels": {
      "com.example.department": "Finance",
      "com.example.description": "Accounting webapp"
    },
    "limit_cpu": 0.5,
    "limit_memory": 52428800,
    "log_driver": "fluentd",
    "log_driver_options": {
      "fluentd-address": "127.0.0.1:24224",
      "fluentd-async-connect": "true",
      "tag": "myservice"
    },
    "mode": "replicated",
    "mounts": [
      {
        "readonly": false,
        "source": "/tmp/",
        "target": "/remote_tmp/",
        "type": "bind",
        "labels": null,
        "propagation": null,
        "no_copy": null,
        "driver_config": null,
        "tmpfs_size": null,
        "tmpfs_mode": null
      }
    ],
    "networks": null,
    "placement_preferences": [
      {
        "spread": "node.labels.mylabel"
      }
    ],
    "publish": null,
    "read_only": null,
    "replicas": 1,
    "reserve_cpu": 0.25,
    "reserve_memory": 20971520,
    "restart_policy": "on-failure",
    "restart_policy_attempts": 3,
    "restart_policy_delay": 5000000000,
    "restart_policy_window": 120000000000,
    "secrets": null,
    "stop_grace_period": null,
    "stop_signal": null,
    "tty": null,
    "update_delay": 10000000000,
    "update_failure_action": null,
    "update_max_failure_ratio": null,
    "update_monitor": null,
    "update_order": "stop-first",
    "update_parallelism": 2,
    "user": null,
    "working_dir": null
  }'
changes:
  returned: always
  description:
    - List of changed service attributes if a service has been altered, [] otherwise.
  type: list
  sample: ['container_labels', 'replicas']
rebuilt:
  returned: always
  description:
    - True if the service has been recreated (removed and created)
  type: bool
  sample: True

