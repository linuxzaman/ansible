> OPENSSL_PRIVATEKEY    (/usr/lib/python2.7/dist-packages/ansible/modules/crypto/openssl_privatekey.py)

        This module allows one to (re)generate OpenSSL private keys. One can generate
        L(RSA,https://en.wikipedia.org/wiki/RSA_(cryptosystem)), L(DSA,https://en.wikipedia.org/wiki/Digital_Signature_Algorithm),
        L(ECC,https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) or L(EdDSA,https://en.wikipedia.org/wiki/EdDSA) private keys.
        Keys are generated in PEM format. Please note that the module regenerates private keys if they don't match the module's options.
        In particular, if you provide another passphrase (or specify none), change the keysize, etc., the private key will be
        regenerated. If you are concerned that this could **overwrite your private key**, consider using the `backup' option. The module
        can use the cryptography Python library, or the pyOpenSSL Python library. By default, it tries to detect which one is available.
        This can be overridden with the `select_crypto_backend' option."

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- attributes
        The attributes the resulting file or directory should have.
        To get supported flags look at the man page for `chattr' on the target system.
        This string should contain the attributes in the same order as the one displayed by `lsattr'.
        The `=' operator is assumed as default, otherwise `+' or `-' operators need to be included in the string.
        (Aliases: attr)[Default: (null)]
        type: str
        version_added: 2.3

- backup
        Create a backup file including a timestamp so you can get the original private key back if you overwrote it with a new one by
        accident.
        [Default: False]
        type: bool
        version_added: 2.8

- cipher
        The cipher to encrypt the private key. (Valid values can be found by running `openssl list -cipher-algorithms` or `openssl list-
        cipher-algorithms`, depending on your OpenSSL version.)
        When using the `cryptography' backend, use `auto'.
        [Default: (null)]
        type: str
        version_added: 2.4

- curve
        Note that not all curves are supported by all versions of `cryptography'.
        For maximal interoperability, `secp384r1' or `secp256r1' should be used.
        We use the curve names as defined in the L(IANA registry for TLS,https://www.iana.org/assignments/tls-parameters/tls-
        parameters.xhtml#tls-parameters-8).
        (Choices: secp384r1, secp521r1, secp224r1, secp192r1, secp256r1, secp256k1, brainpoolP256r1, brainpoolP384r1, brainpoolP512r1,
        sect571k1, sect409k1, sect283k1, sect233k1, sect163k1, sect571r1, sect409r1, sect283r1, sect233r1, sect163r2)[Default: (null)]
        type: str
        version_added: 2.8

- force
        Should the key be regenerated even if it already exists.
        [Default: False]
        type: bool

- group
        Name of the group that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

- mode
        The permissions the resulting file or directory should have.
        For those used to `/usr/bin/chmod' remember that modes are actually octal numbers. You must either add a leading zero so that
        Ansible's YAML parser knows it is an octal number (like `0644' or `01777') or quote it (like `'644'' or `'1777'') so Ansible
        receives a string and can do its own conversion from string into number.
        Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected
        results.
        As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
        As of Ansible 2.6, the mode may also be the special string `preserve'.
        When set to `preserve' the file will be given the same permissions as the source file.
        [Default: (null)]
        type: str

- owner
        Name of the user that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

- passphrase
        The passphrase for the private key.
        [Default: (null)]
        type: str
        version_added: 2.4

= path
        Name of the file in which the generated TLS/SSL private key will be written. It will have 0600 mode.

        type: path

- select_crypto_backend
        Determines which crypto backend to use.
        The default choice is `auto', which tries to use `cryptography' if available, and falls back to `pyopenssl'.
        If set to `pyopenssl', will try to use the L(pyOpenSSL,https://pypi.org/project/pyOpenSSL/) library.
        If set to `cryptography', will try to use the L(cryptography,https://cryptography.io/) library.
        (Choices: auto, cryptography, pyopenssl)[Default: auto]
        type: str
        version_added: 2.8

- selevel
        The level part of the SELinux file context.
        This is the MLS/MCS attribute, sometimes known as the `range'.
        When set to `_default', it will use the `level' portion of the policy if available.
        [Default: s0]
        type: str

- serole
        The role part of the SELinux file context.
        When set to `_default', it will use the `role' portion of the policy if available.
        [Default: (null)]
        type: str

- setype
        The type part of the SELinux file context.
        When set to `_default', it will use the `type' portion of the policy if available.
        [Default: (null)]
        type: str

- seuser
        The user part of the SELinux file context.
        By default it uses the `system' policy, where applicable.
        When set to `_default', it will use the `user' portion of the policy if available.
        [Default: (null)]
        type: str

- size
        Size (in bits) of the TLS/SSL key to generate.
        [Default: 4096]
        type: int

- state
        Whether the private key should exist or not, taking action if the state is different from what is stated.
        (Choices: absent, present)[Default: present]
        type: str

- type
        The algorithm used to generate the TLS/SSL private key.
        Note that `ECC', `X25519', `X448', `Ed25519' and `Ed448' require the `cryptography' backend. `X25519' needs cryptography 2.5 or
        newer, while `X448', `Ed25519' and `Ed448' require cryptography 2.6 or newer. For `ECC', the minimal cryptography version
        required depends on the `curve' option.
        (Choices: DSA, ECC, Ed25519, Ed448, RSA, X25519, X448)[Default: RSA]
        type: str

- unsafe_writes
        Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.
        By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but
        sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be
        updated atomically from inside the container and can only be written in an unsafe manner.
        This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't
        force Ansible to perform unsafe writes).
        IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
        [Default: False]
        type: bool
        version_added: 2.2


SEE ALSO:
      * Module openssl_certificate
           The official documentation on the openssl_certificate module.
           https://docs.ansible.com/ansible/latest/modules/openssl_certificate_module.html
      * Module openssl_csr
           The official documentation on the openssl_csr module.
           https://docs.ansible.com/ansible/latest/modules/openssl_csr_module.html
      * Module openssl_dhparam
           The official documentation on the openssl_dhparam module.
           https://docs.ansible.com/ansible/latest/modules/openssl_dhparam_module.html
      * Module openssl_pkcs12
           The official documentation on the openssl_pkcs12 module.
           https://docs.ansible.com/ansible/latest/modules/openssl_pkcs12_module.html
      * Module openssl_publickey
           The official documentation on the openssl_publickey module.
           https://docs.ansible.com/ansible/latest/modules/openssl_publickey_module.html


REQUIREMENTS:  Either cryptography >= 1.2.3 (older versions might work as well), Or pyOpenSSL

AUTHOR: Yanis Guenane (@Spredzy), Felix Fontein (@felixfontein)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
  openssl_privatekey:
    path: /etc/ssl/private/ansible.com.pem

- name: Generate an OpenSSL private key with the default values (4096 bits, RSA) and a passphrase
  openssl_privatekey:
    path: /etc/ssl/private/ansible.com.pem
    passphrase: ansible
    cipher: aes256

- name: Generate an OpenSSL private key with a different size (2048 bits)
  openssl_privatekey:
    path: /etc/ssl/private/ansible.com.pem
    size: 2048

- name: Force regenerate an OpenSSL private key if it already exists
  openssl_privatekey:
    path: /etc/ssl/private/ansible.com.pem
    force: yes

- name: Generate an OpenSSL private key with a different algorithm (DSA)
  openssl_privatekey:
    path: /etc/ssl/private/ansible.com.pem
    type: DSA


RETURN VALUES:

size:
    description: Size (in bits) of the TLS/SSL private key.
    returned: changed or success
    type: int
    sample: 4096
type:
    description: Algorithm used to generate the TLS/SSL private key.
    returned: changed or success
    type: str
    sample: RSA
curve:
    description: Elliptic curve used to generate the TLS/SSL private key.
    returned: changed or success, and I(type) is C(ECC)
    type: str
    sample: secp256r1
filename:
    description: Path to the generated TLS/SSL private key file.
    returned: changed or success
    type: str
    sample: /etc/ssl/private/ansible.com.pem
fingerprint:
    description:
    - The fingerprint of the public key. Fingerprint will be generated for each C(hashlib.algorithms) available.
    - The PyOpenSSL backend requires PyOpenSSL >= 16.0 for meaningful output.
    returned: changed or success
    type: dict
    sample:
      md5: "84:75:71:72:8d:04:b5:6c:4d:37:6d:66:83:f5:4c:29"
      sha1: "51:cc:7c:68:5d:eb:41:43:88:7e:1a:ae:c7:f8:24:72:ee:71:f6:10"
      sha224: "b1:19:a6:6c:14:ac:33:1d:ed:18:50:d3:06:5c:b2:32:91:f1:f1:52:8c:cb:d5:75:e9:f5:9b:46"
      sha256: "41:ab:c7:cb:d5:5f:30:60:46:99:ac:d4:00:70:cf:a1:76:4f:24:5d:10:24:57:5d:51:6e:09:97:df:2f:de:c7"
      sha384: "85:39:50:4e:de:d9:19:33:40:70:ae:10:ab:59:24:19:51:c3:a2:e4:0b:1c:b1:6e:dd:b3:0c:d9:9e:6a:46:af:da:18:f8:ef:ae:2e:c0:9a:75:2c:9b:b3:0f:3a:5f:3d"
      sha512: "fd:ed:5e:39:48:5f:9f:fe:7f:25:06:3f:79:08:cd:ee:a5:e7:b3:3d:13:82:87:1f:84:e1:f5:c7:28:77:53:94:86:56:38:69:f0:d9:35:22:01:1e:a6:60:...:0f:9b"
backup_file:
    description: Name of backup file created.
    returned: changed and if I(backup) is C(yes)
    type: str
    sample: /path/to/privatekey.pem.2019-03-09@11:22~

