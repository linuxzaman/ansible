> PAUSE    (/usr/lib/python2.7/dist-packages/ansible/modules/utilities/logic/pause.py)

        Pauses playbook execution for a set amount of time, or until a prompt is acknowledged. All parameters are optional. The default
        behavior is to pause with a prompt. To pause/wait/sleep per host, use the [wait_for] module. You can use `ctrl+c' if you wish to
        advance a pause earlier than it is set to expire or if you need to abort a playbook run entirely. To continue early press
        `ctrl+c' and then `c'. To abort a playbook press `ctrl+c' and then `a'. The pause module integrates into async/parallelized
        playbooks without any special considerations (see Rolling Updates). When using pauses with the `serial' playbook parameter (as in
        rolling updates) you are only prompted once for the current group of hosts. This module is also supported for Windows targets.

  * This module is maintained by The Ansible Core Team
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- echo
        Controls whether or not keyboard input is shown when typing.
        Has no effect if 'seconds' or 'minutes' is set.
        [Default: yes]
        type: bool
        version_added: 2.5
        

- minutes
        A positive number of minutes to pause for.
        [Default: (null)]

- prompt
        Optional text to use for the prompt message.
        [Default: (null)]

- seconds
        A positive number of seconds to pause for.
        [Default: (null)]


NOTES:
      * Starting in 2.2,  if you specify 0 or negative for minutes or seconds, it will wait for 1 second, previously it would wait
        indefinitely.
      * This module is also supported for Windows targets.
      * User input is not captured or echoed, regardless of echo setting, when minutes or seconds is specified.


AUTHOR: Tim Bielawa (@tbielawa)
        METADATA:
          status:
          - stableinterface
          supported_by: core
        

EXAMPLES:

# Pause for 5 minutes to build app cache.
- pause:
    minutes: 5

# Pause until you can verify updates to an application were successful.
- pause:

# A helpful reminder of what to look out for post-update.
- pause:
    prompt: "Make sure org.foo.FooOverload exception is not present"

# Pause to get some sensitive input.
- pause:
    prompt: "Enter a secret"
    echo: no


RETURN VALUES:

user_input:
  description: User input from interactive console
  returned: if no waiting time set
  type: str
  sample: Example user input
start:
  description: Time when started pausing
  returned: always
  type: str
  sample: "2017-02-23 14:35:07.298862"
stop:
  description: Time when ended pausing
  returned: always
  type: str
  sample: "2017-02-23 14:35:09.552594"
delta:
  description: Time paused in seconds
  returned: always
  type: str
  sample: 2
stdout:
  description: Output of pause module
  returned: always
  type: str
  sample: Paused for 0.04 minutes
echo:
  description: Value of echo setting
  returned: always
  type: bool
  sample: true

