> IAM    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/iam.py)

        Allows for the management of IAM users, user API keys, groups, roles.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- access_key_ids
        A list of the keys that you want impacted by the access_key_state parameter.
        [Default: (null)]

- access_key_state
        When type is user, it creates, removes, deactivates or activates a user's access key(s). Note that actions apply only to keys
        specified.
        (Choices: create, remove, active, inactive)[Default: (null)]

- aws_access_key
        AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is
        used.
        (Aliases: ec2_access_key, access_key)[Default: (null)]
        type: str

- aws_secret_key
        AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is
        used.
        (Aliases: ec2_secret_key, secret_key)[Default: (null)]
        type: str

- debug_botocore_endpoint_logs
        Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing
        the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during
        a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
        [Default: no]
        type: bool
        version_added: 2.8

- ec2_url
        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where
        region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL
        environment variable, if any, is used.
        [Default: (null)]
        type: str

- groups
        A list of groups the user should belong to. When update, will gracefully remove groups not listed.
        [Default: (null)]

- iam_type
        Type of IAM resource
        (Choices: user, group, role)[Default: (null)]

- key_count
        When access_key_state is create it will ensure this quantity of keys are present. Defaults to 1.
        [Default: 1]

= name
        Name of IAM resource to create or identify


- new_name
        When state is update, will replace name with new_name on IAM resource
        [Default: (null)]

- new_path
        When state is update, will replace the path with new_path on the IAM resource
        [Default: (null)]

- password
        When type is user and state is present, define the users login password. Also works with update. Note that always returns
        changed.
        [Default: (null)]

- path
        When creating or updating, specify the desired path of the resource. If state is present, it will replace the current path to
        match what is passed in when they do not match.
        [Default: /]

- profile
        Uses a boto profile. Only works with boto >= 2.24.0.
        [Default: (null)]
        type: str
        version_added: 1.6

- region
        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
        (Aliases: aws_region, ec2_region)[Default: (null)]
        type: str

- security_token
        AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
        (Aliases: access_token)[Default: (null)]
        type: str
        version_added: 1.6

= state
        Whether to create, delete or update the IAM resource. Note, roles cannot be updated.
        (Choices: present, absent, update)

- trust_policy
        The inline (JSON or YAML) trust policy document that grants an entity permission to assume the role. Mutually exclusive with
        `trust_policy_filepath'.
        [Default: (null)]
        version_added: 2.2

- trust_policy_filepath
        The path to the trust policy document that grants an entity permission to assume the role. Mutually exclusive with
        `trust_policy'.
        [Default: (null)]
        version_added: 2.2

- update_password
        `always' will update passwords if they differ.  `on_create' will only set the password for newly created users.
        (Choices: always, on_create)[Default: always]

- validate_certs
        When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        [Default: True]
        type: bool
        version_added: 1.5


NOTES:
      * Currently boto does not support the removal of Managed Policies, the module will error out if your user/group/role has
        managed policies when you try to do state=absent. They will need to be removed manually.
      * If parameters are not set within the module, the following environment variables can be used in decreasing order of
        precedence `AWS_URL' or `EC2_URL', `AWS_ACCESS_KEY_ID' or `AWS_ACCESS_KEY' or `EC2_ACCESS_KEY', `AWS_SECRET_ACCESS_KEY' or
        `AWS_SECRET_KEY' or `EC2_SECRET_KEY', `AWS_SECURITY_TOKEN' or `EC2_SECURITY_TOKEN', `AWS_REGION' or `EC2_REGION'
      * Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See
        https://boto.readthedocs.io/en/latest/boto_config_tut.html
      * `AWS_REGION' or `EC2_REGION' can be typically be used to specify the AWS region, when required, but this can also be
        configured in the boto config file


REQUIREMENTS:  python >= 2.6, boto

AUTHOR: Jonathan I. Davila (@defionscode), Paul Seiffert (@seiffert)
        METADATA:
          status:
          - stableinterface
          supported_by: community
        

EXAMPLES:

# Basic user creation example
tasks:
- name: Create two new IAM users with API keys
  iam:
    iam_type: user
    name: "{{ item }}"
    state: present
    password: "{{ temp_pass }}"
    access_key_state: create
  loop:
    - jcleese
    - mpython

# Advanced example, create two new groups and add the pre-existing user
# jdavila to both groups.
task:
- name: Create Two Groups, Mario and Luigi
  iam:
    iam_type: group
    name: "{{ item }}"
    state: present
  loop:
     - Mario
     - Luigi
  register: new_groups

- name:
  iam:
    iam_type: user
    name: jdavila
    state: update
    groups: "{{ item.created_group.group_name }}"
  loop: "{{ new_groups.results }}"

# Example of role with custom trust policy for Lambda service
- name: Create IAM role with custom trust relationship
  iam:
    iam_type: role
    name: AAALambdaTestRole
    state: present
    trust_policy:
      Version: '2012-10-17'
      Statement:
      - Action: sts:AssumeRole
        Effect: Allow
        Principal:
          Service: lambda.amazonaws.com


RETURN VALUES:

role_result:
    description: the IAM.role dict returned by Boto
    type: str
    returned: if iam_type=role and state=present
    sample: {
                "arn": "arn:aws:iam::A1B2C3D4E5F6:role/my-new-role",
                "assume_role_policy_document": "...truncated...",
                "create_date": "2017-09-02T14:32:23Z",
                "path": "/",
                "role_id": "AROAA1B2C3D4E5F6G7H8I",
                "role_name": "my-new-role"
            }
roles:
    description: a list containing the name of the currently defined roles
    type: list
    returned: if iam_type=role and state=present
    sample: [
        "my-new-role",
        "my-existing-role-1",
        "my-existing-role-2",
        "my-existing-role-3",
        "my-existing-role-...",
    ]

