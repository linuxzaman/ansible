> VMWARE_HOST_KERNEL_MANAGER    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/vmware/vmware_host_kernel_manager.py)

        This module can be used to manage kernel module options on ESXi hosts. All connected ESXi hosts in scope will be configured when
        specified. If a host is not connected at time of configuration, it will be marked as such in the output. Kernel module options
        may require a reboot to take effect which is not covered here. You can use [reboot] or [vmware_host_powerstate] module to reboot
        all ESXi host systems.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- cluster_name
        Name of the VMware cluster to work on.
        All ESXi hosts in this cluster will be configured.
        This parameter is required if `esxi_hostname' is not specified.
        [Default: (null)]
        type: str

- esxi_hostname
        Name of the ESXi host to work on.
        This parameter is required if `cluster_name' is not specified.
        [Default: (null)]
        type: str

- hostname
        The hostname or IP address of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_HOST' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: (null)]
        type: str

= kernel_module_name
        Name of the kernel module to be configured.

        type: str

= kernel_module_option
        Specified configurations will be applied to the given module.
        These values are specified in key=value pairs and separated by a space when there are multiple options.

        type: str

- password
        The password of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PASSWORD' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: pass, pwd)[Default: (null)]
        type: str

- port
        The port number of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PORT' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: 443]
        type: int
        version_added: 2.5

- username
        The username of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_USER' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: admin, user)[Default: (null)]
        type: str

- validate_certs
        Allows connection when SSL certificates are not valid. Set to `false' when certificates are not trusted.
        If the value is not specified in the task, the value of environment variable `VMWARE_VALIDATE_CERTS' will be used instead.
        Environment variable support added in Ansible 2.6.
        If set to `yes', please make sure Python >= 2.7.9 is installed on the given machine.
        [Default: True]
        type: bool


NOTES:
      * Tested on vSphere 6.0


REQUIREMENTS:  python >= 2.7, PyVmomi

AUTHOR: Aaron Longchamps (@alongchamps)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Configure IPv6 to be off via tcpip4 kernel module
  vmware_host_kernel_manager:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    esxi_hostname: '{{ esxi_hostname }}'
    kernel_module_name: "tcpip4"
    kernel_module_option: "ipv6=0"

- name: Using cluster_name, configure vmw_psp_rr options
  vmware_host_kernel_manager:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    cluster_name: '{{ virtual_cluster_name }}'
    kernel_module_name: "vmw_psp_rr"
    kernel_module_option: "maxPathsPerDevice=2"


RETURN VALUES:

results:
    description:
    - dict with information on what was changed, by ESXi host in scope.
    returned: success
    type: dict
    sample: {
    "results": {
        "myhost01.example.com": {
            "changed": true,
            "configured_options": "ipv6=0",
            "msg": "Options have been changed on the kernel module",
            "original_options": "ipv6=1"
        }
    }
}

