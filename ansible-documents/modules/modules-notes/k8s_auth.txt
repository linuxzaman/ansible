> K8S_AUTH    (/usr/lib/python2.7/dist-packages/ansible/modules/clustering/k8s/k8s_auth.py)

        This module handles authenticating to Kubernetes clusters requiring `explicit' authentication procedures, meaning ones where a
        client logs in (obtains an authentication token), performs API operations using said token and then logs out (revokes the token).
        An example of a Kubernetes distribution requiring this module is OpenShift. On the other hand a popular configuration for
        username+password authentication is one utilizing HTTP Basic Auth, which does not involve any additional login/logout steps
        (instead login credentials can be attached to each and every API call performed) and as such is handled directly by the `k8s'
        module (and other resourceâ€“specific modules) by utilizing the `host', `username' and `password' parameters. Please consult your
        preferred module's documentation for more details.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- api_key
        When `state' is set to `absent', this specifies the token to revoke.
        [Default: (null)]

- ca_cert
        Path to a CA certificate file used to verify connection to the API server. The full certificate chain must be provided to avoid
        certificate validation errors.
        (Aliases: ssl_ca_cert)[Default: (null)]

= host
        Provide a URL for accessing the API server.


- password
        Provide a password for authenticating with the API server.
        [Default: (null)]

- state
        If set to `present' connect to the API server using the URL specified in `host' and attempt to log in.
        If set to `absent' attempt to log out by revoking the authentication token specified in `api_key'.
        (Choices: present, absent)[Default: present]

- username
        Provide a username for authenticating with the API server.
        [Default: (null)]

- validate_certs
        Whether or not to verify the API server's SSL certificates.
        (Aliases: verify_ssl)[Default: True]
        type: bool


REQUIREMENTS:  python >= 2.7, urllib3, requests, requests-oauthlib

AUTHOR: KubeVirt Team (@kubevirt)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- hosts: localhost
  module_defaults:
    group/k8s:
      host: https://k8s.example.com/
      ca_cert: ca.pem
  tasks:
  - block:
    # It's good practice to store login credentials in a secure vault and not
    # directly in playbooks.
    - include_vars: k8s_passwords.yml

    - name: Log in (obtain access token)
      k8s_auth:
        username: admin
        password: "{{ k8s_admin_password }}"
      register: k8s_auth_results

    # Previous task provides the token/api_key, while all other parameters
    # are taken from module_defaults
    - name: Get a list of all pods from any namespace
      k8s_facts:
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        kind: Pod
      register: pod_list

    always:
    - name: If login succeeded, try to log out (revoke access token)
      when: k8s_auth_results.k8s_auth.api_key is defined
      k8s_auth:
        state: absent
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"


RETURN VALUES:

k8s_auth:
  description: Kubernetes authentication facts.
  returned: success
  type: complex
  contains:
    api_key:
      description: Authentication token.
      returned: success
      type: str
    host:
      description: URL for accessing the API server.
      returned: success
      type: str
    ca_cert:
      description: Path to a CA certificate file used to verify connection to the API server.
      returned: success
      type: str
    validate_certs:
      description: "Whether or not to verify the API server's SSL certificates."
      returned: success
      type: bool
    username:
      description: Username for authenticating with the API server.
      returned: success
      type: str

