> BIGIP_PROFILE_FASTL4    (/usr/lib/python2.7/dist-packages/ansible/modules/network/f5/bigip_profile_fastl4.py)

        Manages Fast L4 profiles.

  * This module is maintained by an Ansible Partner
OPTIONS (= is mandatory):

- client_timeout
        Specifies a timeout for Late Binding.
        This is the time limit for the client to provide the application data required to select a back-end server. That is, this is the
        maximum time that the BIG-IP system waits for information about the sender and the target.
        This information typically arrives at the beginning of the FIX logon packet.
        When `0', or `immediate', allows for no time beyond the moment of the first packet transmission.
        When `indefinite', disables the limit. This allows the client unlimited time to send the sender and target information.
        [Default: (null)]
        type: str

- description
        Description of the profile.
        [Default: (null)]
        type: str

- explicit_flow_migration
        Specifies whether a qualified late-binding connection requires an explicit iRule command to migrate down to ePVA hardware.
        When `no', a late-binding connection migrates down to ePVA immediately after establishing the server-side connection.
        When `yes', this parameter stops automatic migration to ePVA, and requires that the iRule explicitly trigger ePVA processing by
        invoking the `release_flow' iRule command. This allows an iRule author to control when the connection uses the ePVA hardware.
        [Default: (null)]
        type: bool

- idle_timeout
        Specifies the length of time that a connection is idle (has no traffic) before the connection is eligible for deletion.
        When creating a new profile, if this parameter is not specified, the remote device will choose a default value appropriate for
        the profile, based on its `parent' profile.
        When a number is specified, indicates the number of seconds that the TCP connection can remain idle before the system deletes it.
        When `indefinite', specifies that the system does not delete TCP connections regardless of how long they remain idle.
        When `0', or `immediate', specifies that the system deletes connections immediately when they become idle.
        [Default: (null)]
        type: str

- ip_df_mode
        Specifies the Don't Fragment (DF) bit setting in the IP Header of the outgoing TCP packet.
        When `pmtu', sets the outgoing IP Header DF bit based on IP pmtu setting.
        When `preserve', sets the outgoing Packet's IP Header DF bit to be same as incoming IP Header DF bit.
        When `set', sets the outgoing packet's IP Header DF bit.
        When `clear', clears the outgoing packet's IP Header DF bit.
        (Choices: pmtu, preserve, set, clear)[Default: (null)]
        type: str

- ip_tos_to_client
        Specifies, for IP traffic passing through the system to clients, whether the system modifies the IP type-of-service (ToS) setting
        in an IP packet header.
        May be a number between 0 and 255 (inclusive). When a number, specifies the IP ToS setting that the system inserts in the IP
        packet header.
        When `pass-through', specifies that the IP ToS setting remains unchanged.
        When `mimic', specifies that the system sets the ToS level of outgoing packets to the same ToS level of the most-recently
        received incoming packet.
        [Default: (null)]
        type: str

- ip_tos_to_server
        Specifies, for IP traffic passing through the system to back-end servers, whether the system modifies the IP type-of-service
        (ToS) setting in an IP packet header.
        May be a number between 0 and 255 (inclusive). When a number, specifies the IP ToS setting that the system inserts in the IP
        packet header.
        When `pass-through', specifies that the IP ToS setting remains unchanged.
        When `mimic', specifies that the system sets the ToS level of outgoing packets to the same ToS level of the most-recently
        received incoming packet.
        [Default: (null)]
        type: str

- ip_ttl_mode
        Specifies the outgoing TCP packet's IP Header TTL mode.
        When `proxy', sets the outgoing IP Header TTL value to 255/64 for IPv4/IPv6 respectively.
        When `preserve', sets the outgoing IP Header TTL value to be same as the incoming IP Header TTL value.
        When `decrement', sets the outgoing IP Header TTL value to be one less than the incoming TTL value.
        When `set', sets the outgoing IP Header TTL value to a specific value(as specified by `ip_ttl_v4' or `ip_ttl_v6'.
        (Choices: proxy, preserve, decrement, set)[Default: (null)]
        type: str

- ip_ttl_v4
        Specifies the outgoing packet's IP Header TTL value for IPv4 traffic.
        Maximum TTL value that can be specified is 255.
        [Default: (null)]
        type: int

- ip_ttl_v6
        Specifies the outgoing packet's IP Header TTL value for IPv6 traffic.
        Maximum TTL value that can be specified is 255.
        [Default: (null)]
        type: int

- keep_alive_interval
        Specifies the keep-alive probe interval, in seconds.
        [Default: (null)]
        type: int

- late_binding
        Enables intelligent selection of a back-end server or pool, using an iRule to make the selection.
        [Default: (null)]
        type: bool

- link_qos_to_client
        Specifies, for IP traffic passing through the system to clients, whether the system modifies the link quality-of-service (QoS)
        setting in an IP packet header.
        The link QoS value prioritizes the IP packet relative to other Layer 2 traffic.
        You can specify a number between 0 (lowest priority) and 7 (highest priority).
        When a number, specifies the link QoS setting that the system inserts in the IP packet header.
        When `pass-through', specifies that the link QoS setting remains unchanged.
        [Default: (null)]
        type: str

- link_qos_to_server
        Specifies, for IP traffic passing through the system to back-end servers, whether the system modifies the link quality-of-service
        (QoS) setting in an IP packet header.
        The link QoS value prioritizes the IP packet relative to other Layer 2 traffic.
        You can specify a number between 0 (lowest priority) and 7 (highest priority).
        When a number, specifies the link QoS setting that the system inserts in the IP packet header.
        When `pass-through', specifies that the link QoS setting remains unchanged.
        [Default: (null)]
        type: str

- loose_close
        When `yes', specifies, that the system closes a loosely-initiated connection when the system receives the first FIN packet from
        either the client or the server.
        [Default: (null)]
        type: bool

- loose_initialization
        When `yes', specifies that the system initializes a connection when it receives any TCP packet, rather that requiring a SYN
        packet for connection initiation.
        [Default: (null)]
        type: bool

- mss_override
        Specifies a maximum segment size (MSS) override for server-side connections.
        Valid range is 256 to 9162 or 0 to disable.
        [Default: (null)]
        type: int

= name
        Specifies the name of the profile.

        type: str

- parent
        Specifies the profile from which this profile inherits settings.
        When creating a new profile, if this parameter is not specified, the default is the system-supplied `fastL4' profile.
        [Default: (null)]
        type: str

- partition
        Device partition to manage resources on.
        [Default: Common]
        type: str

= password
        The password for the user account used to connect to the BIG-IP.
        You may omit this option by setting the environment variable `F5_PASSWORD'.
        (Aliases: pass, pwd)
        type: str

- provider
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          password:
            aliases:
            - pass
            - pwd
            description:
            - The password for the user account used to connect to the BIG-IP.
            - You may omit this option by setting the environment variable `F5_PASSWORD'.
            required: true
            type: str
          server:
            description:
            - The BIG-IP host.
            - You may omit this option by setting the environment variable `F5_SERVER'.
            required: true
            type: str
          server_port:
            default: 443
            description:
            - The BIG-IP server port.
            - You may omit this option by setting the environment variable `F5_SERVER_PORT'.
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH keyfile to use to authenticate the connection to the remote
              device.  This argument is only used for `cli' transports.
            - You may omit this option by setting the environment variable `ANSIBLE_NET_SSH_KEYFILE'.
            type: path
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error.
            type: int
          transport:
            choices:
            - cli
            - rest
            default: rest
            description:
            - Configures the transport connection to use when connecting to the remote device.
            type: str
          user:
            description:
            - The username to connect to the BIG-IP with. This user must have administrative
              privileges on the device.
            - You may omit this option by setting the environment variable `F5_USER'.
            required: true
            type: str
          validate_certs:
            default: true
            description:
            - If `no', SSL certificates are not validated. Use this only on personally controlled
              sites using self-signed certificates.
            - You may omit this option by setting the environment variable `F5_VALIDATE_CERTS'.
            type: bool
        
        type: dict
        version_added: 2.5

- reassemble_fragments
        When `yes', specifies that the system reassembles IP fragments.
        [Default: (null)]
        type: bool

- receive_window_size
        Specifies the amount of data the BIG-IP system can accept without acknowledging the server.
        [Default: (null)]
        type: int

- reset_on_timeout
        When `yes', specifies that the system sends a reset packet (RST) in addition to deleting the connection, when a connection
        exceeds the idle timeout value.
        [Default: (null)]
        type: bool

- rtt_from_client
        When `yes', specifies that the system uses TCP timestamp options to measure the round-trip time to the client.
        [Default: (null)]
        type: bool

- rtt_from_server
        When `yes', specifies that the system uses TCP timestamp options to measure the round-trip time to the server.
        [Default: (null)]
        type: bool

= server
        The BIG-IP host.
        You may omit this option by setting the environment variable `F5_SERVER'.

        type: str

- server_port
        The BIG-IP server port.
        You may omit this option by setting the environment variable `F5_SERVER_PORT'.
        [Default: 443]
        type: int
        version_added: 2.2

- server_sack
        Specifies whether the BIG-IP system processes Selective ACK (Sack) packets in cookie responses from the server.
        [Default: (null)]
        type: bool

- server_timestamp
        Specifies whether the BIG-IP system processes timestamp request packets in cookie responses from the server.
        [Default: (null)]
        type: bool

- state
        When `present', ensures that the profile exists.
        When `absent', ensures the profile is removed.
        (Choices: present, absent)[Default: present]
        type: str

- syn_cookie_mss
        Specifies a value that overrides the SYN cookie maximum segment size (MSS) value in the SYN-ACK packet that is returned to the
        client.
        Valid values are 0, and values from 256 through 9162.
        [Default: (null)]
        type: int

- tcp_close_timeout
        Specifies the length of time a connection can remain idle before deletion.
        [Default: (null)]
        type: str

- tcp_generate_isn
        When `yes', specifies that the system generates initial sequence numbers for SYN packets, according to RFC 1948.
        [Default: (null)]
        type: bool

- tcp_handshake_timeout
        Specifies the acceptable duration for a TCP handshake, that is, the maximum idle time between a client synchronization (SYN) and
        a client acknowledgment (ACK). If the TCP handshake takes longer than the timeout, the system automatically closes the
        connection.
        When a number, specifies how long the system can try to establish a TCP handshake before timing out.
        When `disabled', specifies that the system does not apply a timeout to a TCP handshake.
        When `indefinite', specifies that attempting a TCP handshake never times out.
        [Default: (null)]
        type: str

- tcp_strip_sack
        When `yes', specifies that the system blocks a TCP selective ACK SackOK option from passing to the server on an initiating SYN.
        [Default: (null)]
        type: bool

- tcp_time_wait_timeout
        Specifies the number of milliseconds that a connection is in the TIME-WAIT state before closing.
        [Default: (null)]
        type: int

- tcp_timestamp_mode
        Specifies the action that the system should take on TCP timestamps.
        (Choices: preserve, rewrite, strip)[Default: (null)]
        type: str

- tcp_wscale_mode
        Specifies the action that the system should take on TCP windows.
        (Choices: preserve, rewrite, strip)[Default: (null)]
        type: str

- timeout_recovery
        Specifies how to handle client-timeout errors for Late Binding.
        Timeout errors may be caused by a DoS attack or a lossy connection.
        When `disconnect', causes the BIG-IP system to drop the connection.
        When `fallback', reverts the connection to normal FastL4 load-balancing, based on the client's TCP header. This causes the BIG-IP
        system to choose a back-end server based only on the source address and port.
        (Choices: disconnect, fallback)[Default: (null)]
        type: str

= user
        The username to connect to the BIG-IP with. This user must have administrative privileges on the device.
        You may omit this option by setting the environment variable `F5_USER'.

        type: str

- validate_certs
        If `no', SSL certificates are not validated. Use this only on personally controlled sites using self-signed certificates.
        You may omit this option by setting the environment variable `F5_VALIDATE_CERTS'.
        [Default: True]
        type: bool
        version_added: 2.0


NOTES:
      * For more information on using Ansible to manage F5 Networks devices see https://www.ansible.com/integrations/networks/f5.
      * Requires BIG-IP software version >= 12.
      * The F5 modules only manipulate the running configuration of the F5 product. To ensure that BIG-IP specific configuration
        persists to disk, be sure to include at least one task that uses the [bigip_config] module to save the running
        configuration. Refer to the module's documentation for the correct usage of the module to save your running configuration.


AUTHOR: Tim Rupp (@caphrim007)
        METADATA:
          status:
          - preview
          supported_by: certified
        

EXAMPLES:

- name: Create a fastL4 profile
  bigip_profile_fastl4:
    name: foo
    provider:
      password: secret
      server: lb.mydomain.com
      user: admin
  delegate_to: localhost


RETURN VALUES:

client_timeout:
  description: The new client timeout value of the resource.
  returned: changed
  type: str
  sample: true
description:
  description: The new description.
  returned: changed
  type: str
  sample: My description
explicit_flow_migration:
  description: The new flow migration setting.
  returned: changed
  type: bool
  sample: yes
idle_timeout:
  description: The new idle timeout setting.
  returned: changed
  type: str
  sample: 123
ip_df_mode:
  description: The new Don't Fragment Flag (DF) setting.
  returned: changed
  type: str
  sample: clear
ip_tos_to_client:
  description: The new IP ToS to Client setting.
  returned: changed
  type: str
  sample: 100
ip_tos_to_server:
  description: The new IP ToS to Server setting.
  returned: changed
  type: str
  sample: 100
ip_ttl_mode:
  description: The new Time To Live (TTL) setting.
  returned: changed
  type: str
  sample: proxy
ip_ttl_v4:
  description: The new Time To Live (TTL) v4 setting.
  returned: changed
  type: int
  sample: 200
ip_ttl_v6:
  description: The new Time To Live (TTL) v6 setting.
  returned: changed
  type: int
  sample: 200
keep_alive_interval:
  description: The new TCP Keep Alive Interval setting.
  returned: changed
  type: int
  sample: 100
late_binding:
  description: The new Late Binding setting.
  returned: changed
  type: bool
  sample: yes
link_qos_to_client:
  description: The new Link QoS to Client setting.
  returned: changed
  type: str
  sample: pass-through
link_qos_to_server:
  description: The new Link QoS to Server setting.
  returned: changed
  type: str
  sample: 123
loose_close:
  description: The new Loose Close setting.
  returned: changed
  type: bool
  sample: no
loose_initialization:
  description: The new Loose Initiation setting.
  returned: changed
  type: bool
  sample: no
mss_override:
  description: The new Maximum Segment Size Override setting.
  returned: changed
  type: int
  sample: 300
reassemble_fragments:
  description: The new Reassemble IP Fragments setting.
  returned: changed
  type: bool
  sample: yes
receive_window_size:
  description: The new Receive Window setting.
  returned: changed
  type: int
  sample: 1024
reset_on_timeout:
  description: The new Reset on Timeout setting.
  returned: changed
  type: bool
  sample: no
rtt_from_client:
  description: The new RTT from Client setting.
  returned: changed
  type: bool
  sample: no
rtt_from_server:
  description: The new RTT from Server setting.
  returned: changed
  type: bool
  sample: no
server_sack:
  description: The new Server Sack setting.
  returned: changed
  type: bool
  sample: yes
server_timestamp:
  description: The new Server Timestamp setting.
  returned: changed
  type: bool
  sample: yes
syn_cookie_mss:
  description: The new SYN Cookie MSS setting.
  returned: changed
  type: int
  sample: 1024
tcp_close_timeout:
  description: The new TCP Close Timeout setting.
  returned: changed
  type: str
  sample: 100
tcp_generate_isn:
  description: The new Generate Initial Sequence Number setting.
  returned: changed
  type: bool
  sample: no
tcp_handshake_timeout:
  description: The new TCP Handshake Timeout setting.
  returned: changed
  type: int
  sample: 5
tcp_strip_sack:
  description: The new Strip Sack OK setting.
  returned: changed
  type: bool
  sample: no
tcp_time_wait_timeout:
  description: The new TCP Time Wait Timeout setting.
  returned: changed
  type: int
  sample: 100
tcp_timestamp_mode:
  description: The new TCP Timestamp Mode setting.
  returned: changed
  type: str
  sample: rewrite
tcp_wscale_mode:
  description: The new TCP Window Scale Mode setting.
  returned: changed
  type: str
  sample: strip
timeout_recovery:
  description: The new Timeout Recovery setting.
  returned: changed
  type: str
  sample: fallback

