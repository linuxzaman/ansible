> JUNOS_VRF    (/usr/lib/python2.7/dist-packages/ansible/modules/network/junos/junos_vrf.py)

        This module provides declarative management of VRF definitions on Juniper JUNOS devices.  It allows playbooks to manage
        individual or the entire VRF collection.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

- active
        Specifies whether or not the configuration is active or deactivated
        [Default: True]
        type: bool

- aggregate
        The set of VRF definition objects to be configured on the remote JUNOS device.  Ths list entries can either be the VRF name or a
        hash of VRF definitions and attributes.  This argument is mutually exclusive with the `name' argument.
        [Default: (null)]

- description
        Provides a short description of the VRF definition in the current active configuration.  The VRF definition value accepts
        alphanumeric characters used to provide additional information about the VRF.
        [Default: (null)]

- interfaces
        Identifies the set of interfaces that should be configured in the VRF. Interfaces must be routed interfaces in order to be placed
        into a VRF.
        [Default: (null)]

- name
        The name of the VRF definition to be managed on the remote IOS device.  The VRF definition name is an ASCII string name used to
        uniquely identify the VRF.  This argument is mutually exclusive with the `aggregate' argument
        [Default: (null)]

- provider
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli' or `connection: netconf'.
        For more information please see the L(Junos OS Platform Options guide, ../network/user_guide/platform_junos.html).
        HORIZONTALLINE
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          host:
            description:
            - Specifies the DNS host name or address for connecting to the remote device over
              the specified transport.  The value of host is used as the destination address
              for the transport.
            required: true
            type: str
          password:
            description:
            - Specifies the password to use to authenticate the connection to the remote device.   This
              value is used to authenticate the SSH session. If the value is not specified
              in the task, the value of environment variable `ANSIBLE_NET_PASSWORD' will
              be used instead.
            type: str
          port:
            default: 22
            description:
            - Specifies the port to use when building the connection to the remote device.  The
              port value will default to the well known SSH port of 22 (for `transport=cli')
              or port 830 (for `transport=netconf') device.
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH key to use to authenticate the connection to the remote device.   This
              value is the path to the key used to authenticate the SSH session. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_SSH_KEYFILE'
              will be used instead.
            type: path
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error.
            type: int
          username:
            description:
            - Configures the username to use to authenticate the connection to the remote
              device.  This value is used to authenticate the SSH session. If the value is
              not specified in the task, the value of environment variable `ANSIBLE_NET_USERNAME'
              will be used instead.
            type: str
        
        type: dict

- rd
        The router-distinguisher value uniquely identifies the VRF to routing processes on the remote IOS system.  The RD value takes the
        form of `A:B' where `A' and `B' are both numeric values.
        [Default: (null)]

- state
        Configures the state of the VRF definition as it relates to the device operational configuration.  When set to `present', the VRF
        should be configured in the device active configuration and when set to `absent' the VRF should not be in the device active
        configuration
        (Choices: present, absent)[Default: present]

- table_label
        Causes JUNOS to allocate a VPN label per VRF rather than per VPN FEC. This allows for forwarding of traffic to directly connected
        subnets, COS Egress filtering etc.
        [Default: (null)]
        type: bool

- target
        It configures VRF target community configuration. The target value takes the form of `target:A:B' where `A' and `B' are both
        numeric values.
        [Default: (null)]


NOTES:
      * This module requires the netconf system service be enabled on the remote device being managed.
      * Tested against vSRX JUNOS version 15.1X49-D15.4, vqfx-10000 JUNOS Version 15.1X53-D60.4.
      * Recommended connection is `netconf'. See L(the Junos OS Platform Options,../network/user_guide/platform_junos.html).
      * This module also works with `local' connections for legacy playbooks.
      * For information on using CLI and netconf see the :ref:`Junos OS Platform Options guide <junos_platform_options>`
      * For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`
      * For more information on using Ansible to manage Juniper network devices see https://www.ansible.com/ansible-juniper.


REQUIREMENTS:  ncclient (>=v0.5.2)

AUTHOR: Ganesh Nalawade (@ganeshrn)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

- name: Configure vrf configuration
  junos_vrf:
    name: test-1
    description: test-vrf-1
    interfaces:
      - ge-0/0/3
      - ge-0/0/2
    rd: 192.0.2.1:10
    target: target:65514:113
    state: present

- name: Remove vrf configuration
  junos_vrf:
    name: test-1
    description: test-vrf-1
    interfaces:
      - ge-0/0/3
      - ge-0/0/2
    rd: 192.0.2.1:10
    target: target:65514:113
    state: absent

- name: Deactivate vrf configuration
  junos_vrf:
    name: test-1
    description: test-vrf-1
    interfaces:
      - ge-0/0/3
      - ge-0/0/2
    rd: 192.0.2.1:10
    target: target:65514:113
    active: False

- name: Activate vrf configuration
  junos_vrf:
    name: test-1
    description: test-vrf-1
    interfaces:
      - ge-0/0/3
      - ge-0/0/2
    rd: 192.0.2.1:10
    target: target:65514:113
    active: True

- name: Create vrf using aggregate
  junos_vrf:
    aggregate:
    - name: test-1
      description: test-vrf-1
      interfaces:
        - ge-0/0/3
         - ge-0/0/2
      rd: 192.0.2.1:10
      target: target:65514:113
    - name: test-2
      description: test-vrf-2
      interfaces:
        - ge-0/0/4
        - ge-0/0/5
      rd: 192.0.2.2:10
      target: target:65515:114
  state: present


RETURN VALUES:

diff.prepared:
  description: Configuration difference before and after applying change.
  returned: when configuration is changed and diff option is enabled.
  type: str
  sample: >
        [edit routing-instances]
        +   test-1 {
        +       description test-vrf-1;
        +       instance-type vrf;
        +       interface ge-0/0/2.0;
        +       interface ge-0/0/3.0;
        +       route-distinguisher 192.0.2.1:10;
        +       vrf-target target:65514:113;
        +   }

