> VYOS_COMMAND    (/usr/lib/python2.7/dist-packages/ansible/modules/network/vyos/vyos_command.py)

        The command module allows running one or more commands on remote devices running VyOS.  This module can also be introspected to
        validate key parameters before returning successfully.  If the conditional statements are not met in the wait period, the task
        fails. Certain `show' commands in VyOS produce many lines of output and use a custom pager that can cause this module to hang.
        If the value of the environment variable `ANSIBLE_VYOS_TERMINAL_LENGTH' is not set, the default number of 10000 is used.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

= commands
        The ordered set of commands to execute on the remote device running VyOS.  The output from the command execution is returned to
        the playbook.  If the `wait_for' argument is provided, the module is not returned until the condition is satisfied or the number
        of retries has been exceeded.


- interval
        Configures the interval in seconds to wait between `retries' of the command. If the command does not pass the specified
        conditions, the interval indicates how long to wait before trying the command again.
        [Default: 1]

- match
        The `match' argument is used in conjunction with the `wait_for' argument to specify the match policy. Valid values are `all' or
        `any'.  If the value is set to `all' then all conditionals in the wait_for must be satisfied.  If the value is set to `any' then
        only one of the values must be satisfied.
        (Choices: any, all)[Default: all]

- provider
        *Deprecated*
        Starting with Ansible 2.5 we recommend using `connection: network_cli'.
        For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-
        protocols).
        HORIZONTALLINE
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          host:
            description:
            - Specifies the DNS host name or address for connecting to the remote device over
              the specified transport.  The value of host is used as the destination address
              for the transport.
            required: true
            type: str
          password:
            description:
            - Specifies the password to use to authenticate the connection to the remote device.   This
              value is used to authenticate the SSH session. If the value is not specified
              in the task, the value of environment variable `ANSIBLE_NET_PASSWORD' will
              be used instead.
            type: str
          port:
            default: 22
            description:
            - Specifies the port to use when building the connection to the remote device.
            type: int
          ssh_keyfile:
            description:
            - Specifies the SSH key to use to authenticate the connection to the remote device.   This
              value is the path to the key used to authenticate the SSH session. If the value
              is not specified in the task, the value of environment variable `ANSIBLE_NET_SSH_KEYFILE'
              will be used instead.
            type: path
          timeout:
            default: 10
            description:
            - Specifies the timeout in seconds for communicating with the network device for
              either connecting or sending commands.  If the timeout is exceeded before the
              operation is completed, the module will error.
            type: int
          username:
            description:
            - Configures the username to use to authenticate the connection to the remote
              device.  This value is used to authenticate the SSH session. If the value is
              not specified in the task, the value of environment variable `ANSIBLE_NET_USERNAME'
              will be used instead.
            type: str
        
        type: dict

- retries
        Specifies the number of retries a command should be tried before it is considered failed. The command is run on the target device
        every retry and evaluated against the `wait_for' conditionals.
        [Default: 10]

- wait_for
        Specifies what to evaluate from the output of the command and what conditionals to apply.  This argument will cause the task to
        wait for a particular conditional to be true before moving forward.  If the conditional is not true by the configured `retries',
        the task fails. See examples.
        (Aliases: waitfor)[Default: (null)]


NOTES:
      * Tested against VYOS 1.1.7
      * Running `show system boot-messages all' will cause the module to hang since VyOS is using a custom pager setting to display
        the output of that command.
      * If a command sent to the device requires answering a prompt, it is possible to pass a dict containing `command', `answer'
        and `prompt'. See examples.
      * For more information on using Ansible to manage network devices see the :ref:`Ansible Network Guide <network_guide>`


AUTHOR: Nathaniel Case (@qalthos)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

tasks:
  - name: show configuration on ethernet devices eth0 and eth1
    vyos_command:
      commands:
        - show interfaces ethernet {{ item }}
    with_items:
      - eth0
      - eth1

  - name: run multiple commands and check if version output contains specific version string
    vyos_command:
      commands:
        - show version
        - show hardware cpu
      wait_for:
        - "result[0] contains 'VyOS 1.1.7'"

  - name: run command that requires answering a prompt
    vyos_command:
      commands:
        - command: 'rollback 1'
          prompt: 'Proceed with reboot? [confirm][y]'
          answer: y


RETURN VALUES:

stdout:
  description: The set of responses from the commands
  returned: always apart from low level errors (such as action plugin)
  type: list
  sample: ['...', '...']
stdout_lines:
  description: The value of stdout split into a list
  returned: always
  type: list
  sample: [['...', '...'], ['...'], ['...']]
failed_conditions:
  description: The list of conditionals that have failed
  returned: failed
  type: list
  sample: ['...', '...']
warnings:
  description: The list of warnings (if any) generated by module based on arguments
  returned: always
  type: list
  sample: ['...', '...']

