> POSTGRESQL_SET    (/usr/lib/python2.7/dist-packages/ansible/modules/database/postgresql/postgresql_set.py)

        Allows to change a PostgreSQL server configuration parameter. The module uses ALTER SYSTEM command
        https://www.postgresql.org/docs/current/sql-altersystem.html and applies changes by reload server configuration. ALTER SYSTEM is
        used for changing server configuration parameters across the entire database cluster. It can be more convenient and safe than the
        traditional method of manually editing the postgresql.conf file. ALTER SYSTEM writes the given parameter setting to the
        $PGDATA/postgresql.auto.conf file, which is read in addition to postgresql.conf https://www.postgresql.org/docs/current/sql-
        altersystem.html. The module allows to reset parameter to boot_val (cluster initial value) by `reset=yes' or remove parameter
        string from postgresql.auto.conf and reload `value=default' (for settings with postmaster context restart is required). After
        change you can see in the ansible output the previous and the new parameter value and other information using returned values and
        [debug] module.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- ca_cert
        Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
        If the file exists, the server's certificate will be verified to be signed by one of these authorities.
        (Aliases: ssl_rootcert)[Default: (null)]
        type: str

- db
        Name of database to connect.
        (Aliases: login_db)[Default: (null)]
        type: str

- login_host
        Host running the database.
        [Default: (null)]
        type: str

- login_password
        The password used to authenticate with.
        [Default: (null)]
        type: str

- login_unix_socket
        Path to a Unix domain socket for local connections.
        [Default: (null)]
        type: str

- login_user
        The username used to authenticate with.
        [Default: postgres]
        type: str

= name
        Name of PostgreSQL server parameter.

        type: str

- port
        Database port to connect to.
        (Aliases: login_port)[Default: 5432]
        type: int

- reset
        Restore parameter to initial state (boot_val). Mutually exclusive with `value'.
        [Default: False]
        type: bool

- session_role
        Switch to session_role after connecting. The specified session_role must be a role that the current login_user is a member of.
        Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.
        [Default: (null)]
        type: str

- ssl_mode
        Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
        See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
        Default of `prefer' matches libpq default.
        (Choices: allow, disable, prefer, require, verify-ca, verify-full)[Default: prefer]
        type: str

= value
        Parameter value to set.
        To remove parameter string from postgresql.auto.conf and reload the server configuration you must pass `value=default'. With
        `value=default' the playbook always returns changed is true.

        type: str


NOTES:
      * Supported version of PostgreSQL is 9.4 and later.
      * Pay attention, change setting with 'postmaster' context can return changed is true when actually nothing changes because
        the same value may be presented in several different form, for example, 1024MB, 1GB, etc. However in pg_settings system
        view it can be defined like 131072 number of 8kB pages. The final check of the parameter value cannot compare it because
        the server was not restarted and the value in pg_settings is not updated yet.
      * For some parameters restart of PostgreSQL server is required. See official documentation
        https://www.postgresql.org/docs/current/view-pg-settings.html.
      * The default authentication assumes that you are either logging in as or sudo'ing to the postgres account on the host.
      * This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module. If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must
        also be installed on the remote host. For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2
        packages on the remote host before using this module.
      * The default authentication assumes that you are either logging in as or sudo'ing to the `postgres' account on the host.
      * This module uses `psycopg2', a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host
        before using this module. If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must
        also be installed on the remote host. For Ubuntu-based systems, install the `postgresql', `libpq-dev', and `python-
        psycopg2' packages on the remote host before using this module.
      * The ca_cert parameter requires at least Postgres version 8.4 and `psycopg2' version 2.4.3.


REQUIREMENTS:  psycopg2

AUTHOR: Andrew Klychkov (@Andersson007)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Restore wal_keep_segments parameter to initial state
  postgresql_set:
    name: wal_keep_segments
    reset: yes

# Set work_mem parameter to 32MB and show what's been changed and restart is required or not
# (output example: "msg": "work_mem 4MB >> 64MB restart_req: False")
- name: Set work mem parameter
  postgresql_set:
    name: work_mem
    value: 32mb
    register: set

- debug:
    msg: "{{ set.name }} {{ set.prev_val_pretty }} >> {{ set.value_pretty }} restart_req: {{ set.restart_required }}"
  when: set.changed
# Ensure that the restart of PostgreSQL serever must be required for some parameters.
# In this situation you see the same parameter in prev_val and value_prettyue, but 'changed=True'
# (If you passed the value that was different from the current server setting).

- name: Set log_min_duration_statement parameter to 1 second
  postgresql_set:
    name: log_min_duration_statement
    value: 1s

- name: Set wal_log_hints parameter to default value (remove parameter from postgresql.auto.conf)
  postgresql_set:
    name: wal_log_hints
    value: default


RETURN VALUES:

name:
  description: Name of PostgreSQL server parameter.
  returned: always
  type: str
  sample: 'shared_buffers'
restart_required:
  description: Information about parameter current state.
  returned: always
  type: bool
  sample: true
prev_val_pretty:
  description: Information about previous state of the parameter.
  returned: always
  type: str
  sample: '4MB'
value_pretty:
  description: Information about current state of the parameter.
  returned: always
  type: str
  sample: '64MB'
value:
  description:
  - Dictionary that contains the current parameter value (at the time of playbook finish).
  - Pay attention that for real change some parameters restart of PostgreSQL server is required.
  - Returns the current value in the check mode.
  returned: always
  type: dict
  sample: { "value": 67108864, "unit": "b" }
context:
  description:
  - PostgreSQL setting context.
  returned: always
  type: str
  sample: user

