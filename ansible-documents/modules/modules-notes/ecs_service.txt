> ECS_SERVICE    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/ecs_service.py)

        Creates or terminates ecs services.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- aws_access_key
        AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is
        used.
        (Aliases: ec2_access_key, access_key)[Default: (null)]
        type: str

- aws_secret_key
        AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is
        used.
        (Aliases: ec2_secret_key, secret_key)[Default: (null)]
        type: str

- client_token
        Unique, case-sensitive identifier you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed.
        [Default: (null)]

- cluster
        The name of the cluster in which the service exists
        [Default: (null)]

- debug_botocore_endpoint_logs
        Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing
        the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during
        a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
        [Default: no]
        type: bool
        version_added: 2.8

- delay
        The time to wait before checking that the service is available
        [Default: 10]

- deployment_configuration
        Optional parameters that control the deployment_configuration; format is '{"maximum_percent":<integer>,
        "minimum_healthy_percent":<integer>}
        [Default: (null)]
        version_added: 2.3
        

- desired_count
        The count of how many instances of the service. This parameter is required when state=present
        [Default: (null)]

- ec2_url
        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where
        region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL
        environment variable, if any, is used.
        [Default: (null)]
        type: str

- force_new_deployment
        Force deployment of service even if there are no changes
        [Default: (null)]
        type: bool
        version_added: 2.8
        

- health_check_grace_period_seconds
        Seconds to wait before health checking the freshly added/updated services. This option requires botocore >= 1.8.20.
        [Default: (null)]
        version_added: 2.8
        

- launch_type
        The launch type on which to run your service
        (Choices: EC2, FARGATE)[Default: (null)]
        version_added: 2.7
        

- load_balancers
        The list of ELBs defined for this service
        [Default: (null)]

= name
        The name of the service


- network_configuration
        network configuration of the service. Only applicable for task definitions created with `awsvpc' `network_mode'.
        assign_public_ip requires botocore >= 1.8.4
        [Default: (null)]
        suboptions:
          assign_public_ip:
            description:
            - Whether the task's elastic network interface receives a public IP address. This
              option requires botocore >= 1.8.4.
            type: bool
            version_added: 2.7
          security_groups:
            description:
            - A list of security group names or group IDs to associate with the task
            version_added: 2.6
          subnets:
            description:
            - A list of subnet IDs to associate with the task
            version_added: 2.6
        

- placement_constraints
        The placement constraints for the tasks in the service
        [Default: (null)]
        version_added: 2.4
        

- placement_strategy
        The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules per service
        [Default: (null)]
        version_added: 2.4
        

- profile
        Uses a boto profile. Only works with boto >= 2.24.0.
        [Default: (null)]
        type: str
        version_added: 1.6

- region
        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
        (Aliases: aws_region, ec2_region)[Default: (null)]
        type: str

- repeat
        The number of times to check that the service is available
        [Default: 10]

- role
        The name or full Amazon Resource Name (ARN) of the IAM role that allows your Amazon ECS container agent to make calls to your
        load balancer on your behalf. This parameter is only required if you are using a load balancer with your service, in a network
        mode other than `awsvpc`.
        [Default: (null)]

- scheduling_strategy
        The scheduling strategy, defaults to "REPLICA" if not given to preserve previous behavior
        (Choices: DAEMON, REPLICA)[Default: (null)]
        version_added: 2.8
        

- security_token
        AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
        (Aliases: access_token)[Default: (null)]
        type: str
        version_added: 1.6

- service_registries
        describes service disovery registries this service will register with.
        [Default: (null)]
        suboptions:
          arn:
            description:
            - Service discovery registry ARN
          container_name:
            description:
            - container name for service disovery registration
          container_port:
            description:
            - container port for service disovery registration
        
        version_added: 2.8
        

= state
        The desired state of the service
        (Choices: present, absent, deleting)

- task_definition
        The task definition the service will run. This parameter is required when state=present
        [Default: (null)]

- validate_certs
        When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        [Default: True]
        type: bool
        version_added: 1.5


NOTES:
      * the service role specified must be assumable (i.e. have a trust relationship for the ecs service, ecs.amazonaws.com)
      * for details of the parameters and returns see https://boto3.readthedocs.io/en/latest/reference/services/ecs.html
      * An IAM role must have been previously created
      * If parameters are not set within the module, the following environment variables can be used in decreasing order of
        precedence `AWS_URL' or `EC2_URL', `AWS_ACCESS_KEY_ID' or `AWS_ACCESS_KEY' or `EC2_ACCESS_KEY', `AWS_SECRET_ACCESS_KEY' or
        `AWS_SECRET_KEY' or `EC2_SECRET_KEY', `AWS_SECURITY_TOKEN' or `EC2_SECURITY_TOKEN', `AWS_REGION' or `EC2_REGION'
      * Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See
        https://boto.readthedocs.io/en/latest/boto_config_tut.html
      * `AWS_REGION' or `EC2_REGION' can be typically be used to specify the AWS region, when required, but this can also be
        configured in the boto config file


REQUIREMENTS:  boto, boto3, botocore, json, python >= 2.6

AUTHOR: Mark Chance (@Java1Guy), Darek Kaczynski (@kaczynskid), Stephane Maarek (@simplesteph), Zac Blazic (@zacblazic)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Note: These examples do not set authentication details, see the AWS Guide for details.

# Basic provisioning example
- ecs_service:
    state: present
    name: console-test-service
    cluster: new_cluster
    task_definition: 'new_cluster-task:1'
    desired_count: 0

- name: create ECS service on VPC network
  ecs_service:
    state: present
    name: console-test-service
    cluster: new_cluster
    task_definition: 'new_cluster-task:1'
    desired_count: 0
    network_configuration:
      subnets:
      - subnet-abcd1234
      security_groups:
      - sg-aaaa1111
      - my_security_group

# Simple example to delete
- ecs_service:
    name: default
    state: absent
    cluster: new_cluster

# With custom deployment configuration (added in version 2.3), placement constraints and strategy (added in version 2.4)
- ecs_service:
    state: present
    name: test-service
    cluster: test-cluster
    task_definition: test-task-definition
    desired_count: 3
    deployment_configuration:
      minimum_healthy_percent: 75
      maximum_percent: 150
    placement_constraints:
      - type: memberOf
        expression: 'attribute:flavor==test'
    placement_strategy:
      - type: binpack
        field: memory


RETURN VALUES:

service:
    description: Details of created service.
    returned: when creating a service
    type: complex
    contains:
        clusterArn:
            description: The Amazon Resource Name (ARN) of the of the cluster that hosts the service.
            returned: always
            type: str
        desiredCount:
            description: The desired number of instantiations of the task definition to keep running on the service.
            returned: always
            type: int
        loadBalancers:
            description: A list of load balancer objects
            returned: always
            type: complex
            contains:
                loadBalancerName:
                    description: the name
                    returned: always
                    type: str
                containerName:
                    description: The name of the container to associate with the load balancer.
                    returned: always
                    type: str
                containerPort:
                    description: The port on the container to associate with the load balancer.
                    returned: always
                    type: int
        pendingCount:
            description: The number of tasks in the cluster that are in the PENDING state.
            returned: always
            type: int
        runningCount:
            description: The number of tasks in the cluster that are in the RUNNING state.
            returned: always
            type: int
        serviceArn:
            description: The Amazon Resource Name (ARN) that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the region
                         of the service, the AWS account ID of the service owner, the service namespace, and then the service name. For example,
                         arn:aws:ecs:region :012345678910 :service/my-service .
            returned: always
            type: str
        serviceName:
            description: A user-generated string used to identify the service
            returned: always
            type: str
        status:
            description: The valid values are ACTIVE, DRAINING, or INACTIVE.
            returned: always
            type: str
        taskDefinition:
            description: The ARN of a task definition to use for tasks in the service.
            returned: always
            type: str
        deployments:
            description: list of service deployments
            returned: always
            type: list of complex
        deploymentConfiguration:
            description: dictionary of deploymentConfiguration
            returned: always
            type: complex
            contains:
                maximumPercent:
                    description: maximumPercent param
                    returned: always
                    type: int
                minimumHealthyPercent:
                    description: minimumHealthyPercent param
                    returned: always
                    type: int
        events:
            description: list of service events
            returned: always
            type: list of complex
        placementConstraints:
            description: List of placement constraints objects
            returned: always
            type: list of complex
            contains:
                type:
                    description: The type of constraint. Valid values are distinctInstance and memberOf.
                    returned: always
                    type: str
                expression:
                    description: A cluster query language expression to apply to the constraint. Note you cannot specify an expression if the constraint type is
                                 distinctInstance.
                    returned: always
                    type: str
        placementStrategy:
            description: List of placement strategy objects
            returned: always
            type: list of complex
            contains:
                type:
                    description: The type of placement strategy. Valid values are random, spread and binpack.
                    returned: always
                    type: str
                field:
                    description: The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId
                                 (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance,
                                 such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are CPU and MEMORY.
                    returned: always
                    type: str
ansible_facts:
    description: Facts about deleted service.
    returned: when deleting a service
    type: complex
    contains:
        service:
            description: Details of deleted service in the same structure described above for service creation.
            returned: when service existed and was deleted
            type: complex

