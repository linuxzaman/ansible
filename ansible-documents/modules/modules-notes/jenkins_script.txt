> JENKINS_SCRIPT    (/usr/lib/python2.7/dist-packages/ansible/modules/web_infrastructure/jenkins_script.py)

        The `jenkins_script' module takes a script plus a dict of values to use within the script and returns the result of the script
        being run.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- args
        A dict of key-value pairs used in formatting the script using string.Template (see https://docs.python.org/2/library/string.html
        #template-strings).
        [Default: (null)]

- password
        The password to connect to the jenkins server with.
        [Default: (null)]

= script
        The groovy script to be executed. This gets passed as a string Template if args is defined.


- timeout
        The request timeout in seconds
        [Default: 10]
        version_added: 2.4

- url
        The jenkins server to execute the script against. The default is a local jenkins instance that is not being proxied through a
        webserver.
        [Default: http://localhost:8080]

- user
        The username to connect to the jenkins server with.
        [Default: (null)]

- validate_certs
        If set to `no', the SSL certificates will not be validated. This should only set to `no' used on personally controlled sites
        using self-signed certificates as it avoids verifying the source site.
        [Default: yes]
        type: bool


NOTES:
      * Since the script can do anything this does not report on changes. Knowing the script is being run it's important to set
        changed_when for the ansible output to be clear on any alterations made.


AUTHOR: James Hogarth (@hogarthj)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Obtaining a list of plugins
  jenkins_script:
    script: 'println(Jenkins.instance.pluginManager.plugins)'
    user: admin
    password: admin

- name: Setting master using a variable to hold a more complicate script
  set_fact:
    setmaster_mode: |
        import jenkins.model.*
        instance = Jenkins.getInstance()
        instance.setMode(${jenkins_mode})
        instance.save()

- name: use the variable as the script
  jenkins_script:
    script: "{{ setmaster_mode }}"
    args:
      jenkins_mode: Node.Mode.EXCLUSIVE

- name: interacting with an untrusted HTTPS connection
  jenkins_script:
    script: "println(Jenkins.instance.pluginManager.plugins)"
    user: admin
    password: admin
    url: https://localhost
    validate_certs: no


RETURN VALUES:

output:
    description: Result of script
    returned: success
    type: str
    sample: 'Result: true'

