> TERRAFORM    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/misc/terraform.py)

        Provides support for deploying resources with Terraform and pulling resource information back into Ansible.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- backend_config
        A group of key-values to provide at init stage to the -backend-config parameter.
        [Default: (null)]
        version_added: 2.7
        

- binary_path
        The path of a terraform binary to use, relative to the 'service_path' unless you supply an absolute path.
        [Default: (null)]

- force_init
        To avoid duplicating infra, if a state file can't be found this will force a `terraform init`. Generally, this should be turned
        off unless you intend to provision an entirely new Terraform deployment.
        [Default: False]
        type: bool

- lock
        Enable statefile locking, if you use a service that accepts locks (such as S3+DynamoDB) to store your statefile.
        [Default: (null)]
        type: bool

- lock_timeout
        How long to maintain the lock on the statefile, if you use a service that accepts locks (such as S3+DynamoDB).
        [Default: (null)]

- plan_file
        The path to an existing Terraform plan file to apply. If this is not specified, Ansible will build a new TF plan and execute it.
        Note that this option is required if 'state' has the 'planned' value.
        [Default: (null)]

= project_path
        The path to the root of the Terraform directory with the vars.tf/main.tf/etc to use.


- purge_workspace
        Only works with state = absent
        If true, the workspace will be deleted after the "terraform destroy" action.
        The 'default' workspace will not be deleted.
        [Default: False]
        type: bool
        version_added: 2.7
        

- state
        Goal state of given stage/project
        (Choices: planned, present, absent)[Default: present]

- state_file
        The path to an existing Terraform state file to use when building plan. If this is not specified, the default `terraform.tfstate`
        will be used.
        This option is ignored when plan is specified.
        [Default: (null)]

- targets
        A list of specific resources to target in this plan/application. The resources selected here will also auto-include any
        dependencies.
        [Default: (null)]

- variables
        A group of key-values to override template variables or those in variables files.
        [Default: (null)]

- variables_file
        The path to a variables file for Terraform to fill into the TF configurations.
        [Default: (null)]

- workspace
        The terraform workspace to work with.
        [Default: default]
        version_added: 2.7
        


NOTES:
      * To just run a `terraform plan`, use check mode.


REQUIREMENTS:  terraform

AUTHOR: Ryan Scott Brown (@ryansb)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Basic deploy of a service
- terraform:
    project_path: '{{ project_dir }}'
    state: present

# Define the backend configuration at init
- terraform:
    project_path: 'project/'
    state: "{{ state }}"
    force_init: true
    backend_config:
      region: "eu-west-1"
      bucket: "some-bucket"
      key: "random.tfstate"


RETURN VALUES:

outputs:
  type: complex
  description: A dictionary of all the TF outputs by their assigned name. Use `.outputs.MyOutputName.value` to access the value.
  returned: on success
  sample: '{"bukkit_arn": {"sensitive": false, "type": "string", "value": "arn:aws:s3:::tf-test-bukkit"}'
  contains:
    sensitive:
      type: bool
      returned: always
      description: Whether Terraform has marked this value as sensitive
    type:
      type: str
      returned: always
      description: The type of the value (string, int, etc)
    value:
      returned: always
      description: The value of the output as interpolated by Terraform
stdout:
  type: str
  description: Full `terraform` command stdout, in case you want to display it or examine the event log
  returned: always
  sample: ''
command:
  type: str
  description: Full `terraform` command built by this module, in case you want to re-run the command outside the module or debug a problem.
  returned: always
  sample: terraform apply ...

