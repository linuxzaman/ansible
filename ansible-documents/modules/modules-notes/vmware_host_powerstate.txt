> VMWARE_HOST_POWERSTATE    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/vmware/vmware_host_powerstate.py)

        This module can be used to manage power states of host systems in given vCenter infrastructure. User can set power state to
        'power-down-to-standby', 'power-up-from-standby', 'shutdown-host' and 'reboot-host'. State 'reboot-host', 'shutdown-host' and
        'power-down-to-standby' are not supported by all the host systems.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- cluster_name
        Name of the cluster from which all host systems will be used.
        This is required parameter if `esxi_hostname' is not specified.
        [Default: (null)]

- esxi_hostname
        Name of the host system to work with.
        This is required parameter if `cluster_name' is not specified.
        [Default: (null)]

- force
        This parameter specify if the host should be proceeding with user defined powerstate regardless of whether it is in maintenance
        mode.
        If `state' set to `reboot-host' and `force' as `true', then host system is rebooted regardless of whether it is in maintenance
        mode.
        If `state' set to `shutdown-host' and `force' as `true', then host system is shutdown regardless of whether it is in maintenance
        mode.
        If `state' set to `power-down-to-standby' and `force' to `true', then all powered off VMs will evacuated.
        Not applicable if `state' set to `power-up-from-standby'.
        [Default: False]
        type: bool

- hostname
        The hostname or IP address of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_HOST' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: (null)]
        type: str

- password
        The password of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PASSWORD' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: pass, pwd)[Default: (null)]
        type: str

- port
        The port number of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_PORT' will be used instead.
        Environment variable support added in Ansible 2.6.
        [Default: 443]
        type: int
        version_added: 2.5

- state
        Set the state of the host system.
        (Choices: power-down-to-standby, power-up-from-standby, shutdown-host, reboot-host)[Default: shutdown-host]

- timeout
        This parameter defines timeout for `state' set to `power-down-to-standby' or `power-up-from-standby'.
        Ignored if `state' set to `reboot-host' or `shutdown-host'.
        This parameter is defined in seconds.
        [Default: 600]

- username
        The username of the vSphere vCenter or ESXi server.
        If the value is not specified in the task, the value of environment variable `VMWARE_USER' will be used instead.
        Environment variable support added in Ansible 2.6.
        (Aliases: admin, user)[Default: (null)]
        type: str

- validate_certs
        Allows connection when SSL certificates are not valid. Set to `false' when certificates are not trusted.
        If the value is not specified in the task, the value of environment variable `VMWARE_VALIDATE_CERTS' will be used instead.
        Environment variable support added in Ansible 2.6.
        If set to `yes', please make sure Python >= 2.7.9 is installed on the given machine.
        [Default: True]
        type: bool


REQUIREMENTS:  python >= 2.6, PyVmomi

AUTHOR: Abhijeet Kasurde (@Akasurde) <akasurde@redhat.com>
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Set the state of a host system to reboot
  vmware_host_powerstate:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    esxi_hostname: '{{ esxi_hostname }}'
    state: reboot-host
  delegate_to: localhost
  register: reboot_host

- name: Set the state of a host system to power down to standby
  vmware_host_powerstate:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    esxi_hostname: '{{ esxi_hostname }}'
    state: power-down-to-standby
  delegate_to: localhost
  register: power_down

- name: Set the state of all host systems from cluster to reboot
  vmware_host_powerstate:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    cluster_name: '{{ cluster_name }}'
    state: reboot-host
  delegate_to: localhost
  register: reboot_host


RETURN VALUES:

result:
    description: metadata about host system's state
    returned: always
    type: dict
    sample: {
        "esxi01": {
            "msg": "power down 'esxi01' to standby",
            "error": "",
        },
    }

