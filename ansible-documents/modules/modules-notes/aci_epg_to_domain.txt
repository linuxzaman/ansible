> ACI_EPG_TO_DOMAIN    (/usr/lib/python2.7/dist-packages/ansible/modules/network/aci/aci_epg_to_domain.py)

        Bind EPGs to Physical and Virtual Domains on Cisco ACI fabrics.

  * This module is maintained by an Ansible Partner
OPTIONS (= is mandatory):

- allow_useg
        Allows micro-segmentation.
        The APIC defaults to `encap' when unset during creation.
        (Choices: encap, useg)[Default: (null)]
        type: str

- ap
        Name of an existing application network profile, that will contain the EPGs.
        (Aliases: app_profile, app_profile_name)[Default: (null)]
        type: str

- certificate_name
        The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.
        If a `private_key' filename was provided, this defaults to the `private_key' basename, without extension.
        If PEM-formatted content was provided for `private_key', this defaults to the `username' value.
        (Aliases: cert_name)[Default: (null)]
        type: str

- deploy_immediacy
        Determines when the policy is pushed to hardware Policy CAM.
        The APIC defaults to `lazy' when unset during creation.
        (Choices: immediate, lazy)[Default: (null)]
        type: str

- domain
        Name of the physical or virtual domain being associated with the EPG.
        (Aliases: domain_name, domain_profile)[Default: (null)]
        type: str

- domain_type
        Specify whether the Domain is a physical (phys), a virtual (vmm) or an L2 external domain association (l2dom).
        (Aliases: type)(Choices: l2dom, phys, vmm)[Default: (null)]
        type: str

- encap
        The VLAN encapsulation for the EPG when binding a VMM Domain with static `encap_mode'.
        This acts as the secondary encap when using useg.
        Accepted values range between `1' and `4096'.
        [Default: (null)]
        type: int

- encap_mode
        The ecapsulataion method to be used.
        The APIC defaults to `auto' when unset during creation.
        (Choices: auto, vlan, vxlan)[Default: (null)]
        type: str

- epg
        Name of the end point group.
        (Aliases: epg_name, name)[Default: (null)]
        type: str

= host
        IP Address or hostname of APIC resolvable by Ansible control host.
        (Aliases: hostname)
        type: str

- netflow
        Determines if netflow should be enabled.
        The APIC defaults to `no' when unset during creation.
        [Default: (null)]
        type: bool

- output_level
        Influence the output of this ACI module.
        `normal' means the standard output, incl. `current' dict
        `info' adds informational output, incl. `previous', `proposed' and `sent' dicts
        `debug' adds debugging output, incl. `filter_string', `method', `response', `status' and `url' information
        (Choices: debug, info, normal)[Default: normal]
        type: str

= password
        The password to use for authentication.
        This option is mutual exclusive with `private_key'. If `private_key' is provided too, it will be used instead.

        type: str

- port
        Port number to be used for REST connection.
        The default value depends on parameter `use_ssl'.
        [Default: (null)]
        type: int

- primary_encap
        Determines the primary VLAN ID when using useg.
        Accepted values range between `1' and `4096'.
        [Default: (null)]
        type: int

= private_key
        Either a PEM-formatted private key file or the private key content used for signature-based authentication.
        This value also influences the default `certificate_name' that is used.
        This option is mutual exclusive with `password'. If `password' is provided too, it will be ignored.
        (Aliases: cert_key)
        type: str

- resolution_immediacy
        Determines when the policies should be resolved and available.
        The APIC defaults to `lazy' when unset during creation.
        (Choices: immediate, lazy, pre-provision)[Default: (null)]
        type: str

- state
        Use `present' or `absent' for adding or removing.
        Use `query' for listing an object or multiple objects.
        (Choices: absent, present, query)[Default: present]
        type: str

- tenant
        Name of an existing tenant.
        (Aliases: tenant_name)[Default: (null)]
        type: str

- timeout
        The socket level timeout in seconds.
        [Default: 30]
        type: int

- use_proxy
        If `no', it will not use a proxy, even if one is defined in an environment variable on the target hosts.
        [Default: True]
        type: bool

- use_ssl
        If `no', an HTTP connection will be used instead of the default HTTPS connection.
        [Default: True]
        type: bool

- username
        The username to use for authentication.
        (Aliases: user)[Default: admin]
        type: str

- validate_certs
        If `no', SSL certificates will not be validated.
        This should only set to `no' when used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool

- vm_provider
        The VM platform for VMM Domains.
        Support for Kubernetes was added in ACI v3.0.
        Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.
        (Choices: cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware)[Default: (null)]
        type: str


NOTES:
      * The `tenant', `ap', `epg', and `domain' used must exist before using this module in your playbook. The [aci_tenant]
        [aci_ap], [aci_epg] [aci_domain] modules can be used for this.
      * OpenStack VMM domains must not be created using this module. The OpenStack VMM domain is created directly by the Cisco APIC
        Neutron plugin as part of the installation and configuration. This module can be used to query status of an OpenStack VMM
        domain.


SEE ALSO:
      * Module aci_ap
           The official documentation on the aci_ap module.
           https://docs.ansible.com/ansible/latest/modules/aci_ap_module.html
      * Module aci_epg
           The official documentation on the aci_epg module.
           https://docs.ansible.com/ansible/latest/modules/aci_epg_module.html
      * Module aci_domain
           The official documentation on the aci_domain module.
           https://docs.ansible.com/ansible/latest/modules/aci_domain_module.html
      * APIC Management Information Model reference
           More information about the internal APIC class *fv:RsDomAtt*.
           https://developer.cisco.com/docs/apic-mim-ref/
      * Ansible documentation [aci_guide]
           Detailed information on how to manage your ACI infrastructure using Ansible.
           https://docs.ansible.com/ansible/latest/#stq=aci_guide&stp=1
      * Ansible documentation [aci_dev_guide]
           Detailed guide on how to write your own Cisco ACI modules to contribute.
           https://docs.ansible.com/ansible/latest/#stq=aci_dev_guide&stp=1


AUTHOR: Jacob McGill (@jmcgill298)
        METADATA:
          status:
          - preview
          supported_by: certified
        

EXAMPLES:

- name: Add a new physical domain to EPG binding
  aci_epg_to_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: anstest
    ap: anstest
    epg: anstest
    domain: anstest
    domain_type: phys
    state: present
  delegate_to: localhost

- name: Remove an existing physical domain to EPG binding
  aci_epg_to_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: anstest
    ap: anstest
    epg: anstest
    domain: anstest
    domain_type: phys
    state: absent
  delegate_to: localhost

- name: Query a specific physical domain to EPG binding
  aci_epg_to_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: anstest
    ap: anstest
    epg: anstest
    domain: anstest
    domain_type: phys
    state: query
  delegate_to: localhost
  register: query_result

- name: Query all domain to EPG bindings
  aci_epg_to_domain:
    host: apic
    username: admin
    password: SomeSecretPassword
    state: query
  delegate_to: localhost
  register: query_result


RETURN VALUES:

current:
  description: The existing configuration from the APIC after the module has finished
  returned: success
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production environment",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
error:
  description: The error information as returned from the APIC
  returned: failure
  type: dict
  sample:
    {
        "code": "122",
        "text": "unknown managed object class foo"
    }
raw:
  description: The raw output returned by the APIC REST API (xml or json)
  returned: parse error
  type: str
  sample: '<?xml version="1.0" encoding="UTF-8"?><imdata totalCount="1"><error code="122" text="unknown managed object class foo"/></imdata>'
sent:
  description: The actual/minimal configuration pushed to the APIC
  returned: info
  type: list
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment"
            }
        }
    }
previous:
  description: The original configuration from the APIC before the module has started
  returned: info
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
proposed:
  description: The assembled configuration from the user-provided parameters
  returned: info
  type: dict
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment",
                "name": "production"
            }
        }
    }
filter_string:
  description: The filter string used for the request
  returned: failure or debug
  type: str
  sample: ?rsp-prop-include=config-only
method:
  description: The HTTP method used for the request to the APIC
  returned: failure or debug
  type: str
  sample: POST
response:
  description: The HTTP response from the APIC
  returned: failure or debug
  type: str
  sample: OK (30 bytes)
status:
  description: The HTTP status from the APIC
  returned: failure or debug
  type: int
  sample: 200
url:
  description: The HTTP url used for the request to the APIC
  returned: failure or debug
  type: str
  sample: https://10.11.12.13/api/mo/uni/tn-production.json

