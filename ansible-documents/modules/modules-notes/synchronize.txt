> SYNCHRONIZE    (/usr/lib/python2.7/dist-packages/ansible/modules/files/synchronize.py)

        `synchronize' is a wrapper around rsync to make common tasks in your playbooks quick and easy. It is run and originates on the
        local host where Ansible is being run. Of course, you could just use the `command' action to call rsync yourself, but you also
        have to add a fair number of boilerplate options and host facts. This module is not intended to provide access to the full power
        of rsync, but does make the most common invocations easier to implement. You `still` may need to call rsync directly via
        `command' or `shell' depending on your use case.

  * This module is maintained by The Ansible Core Team
  * note: This module has a corresponding action plugin.

OPTIONS (= is mandatory):

- archive
        Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.
        [Default: True]
        type: bool

- checksum
        Skip based on checksum, rather than mod-time & size; Note that that "archive" option is still enabled by default - the "checksum"
        option will not disable it.
        [Default: False]
        type: bool
        version_added: 1.6

- compress
        Compress file data during the transfer.
        In most cases, leave this enabled unless it causes problems.
        [Default: True]
        type: bool
        version_added: 1.7

- copy_links
        Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.
        [Default: False]
        type: bool

- delete
        Delete files in `dest' that don't exist (after transfer, not before) in the `src' path.
        This option requires `recursive=yes'.
        [Default: False]
        type: bool

= dest
        Path on the destination host that will be synchronized from the source.
        The path can be absolute or relative.

        type: str

- dest_port
        Port number for ssh on the destination host.
        Prior to Ansible 2.0, the ansible_ssh_port inventory var took precedence over this value.
        This parameter defaults to the value of `ansible_ssh_port' or `ansible_port', the `remote_port' config setting or the value from
        ssh client configuration if none of the former have been set.
        [Default: (null)]
        type: int
        version_added: 1.5

- dirs
        Transfer directories without recursing.
        [Default: False]
        type: bool

- existing_only
        Skip creating new files on receiver.
        [Default: False]
        type: bool
        version_added: 1.5

- group
        Preserve group.
        This parameter defaults to the value of the archive option.
        [Default: (null)]
        type: bool

- link_dest
        Add a destination to hard link against during the rsync.
        [Default: None]
        type: list
        version_added: 2.5

- links
        Copy symlinks as symlinks.
        This parameter defaults to the value of the archive option.
        [Default: (null)]
        type: bool

- mode
        Specify the direction of the synchronization.
        In push mode the localhost or delegate is the source.
        In pull mode the remote host in context is the source.
        (Choices: pull, push)[Default: push]
        type: str

- owner
        Preserve owner (super user only).
        This parameter defaults to the value of the archive option.
        [Default: (null)]
        type: bool

- partial
        Tells rsync to keep the partial file which should make a subsequent transfer of the rest of the file much faster.
        [Default: False]
        type: bool
        version_added: 2.0

- perms
        Preserve permissions.
        This parameter defaults to the value of the archive option.
        [Default: (null)]
        type: bool

- private_key
        Specify the private key to use for SSH-based rsync connections (e.g. `~/.ssh/id_rsa').
        [Default: (null)]
        type: path
        version_added: 1.6

- recursive
        Recurse into directories.
        This parameter defaults to the value of the archive option.
        [Default: (null)]
        type: bool

- rsync_opts
        Specify additional rsync options by passing in an array.
        Note that an empty string in `rsync_opts' will end up transfer the current working directory.
        [Default: None]
        type: list
        version_added: 1.6

- rsync_path
        Specify the rsync command to run on the remote host. See `--rsync-path' on the rsync man page.
        To specify the rsync command to run on the local host, you need to set this your task var `ansible_rsync_path'.
        [Default: (null)]
        type: str

- rsync_timeout
        Specify a `--timeout' for the rsync command in seconds.
        [Default: 0]
        type: int

- set_remote_user
        Put user@ for the remote paths.
        If you have a custom ssh config to define the remote user for a host that does not match the inventory user, you should set this
        parameter to `no'.
        [Default: True]
        type: bool

= src
        Path on the source host that will be synchronized to the destination.
        The path can be absolute or relative.

        type: str

- times
        Preserve modification times.
        This parameter defaults to the value of the archive option.
        [Default: (null)]
        type: bool

- use_ssh_args
        Use the ssh_args specified in ansible.cfg.
        [Default: False]
        type: bool
        version_added: 2.0

- verify_host
        Verify destination host key.
        [Default: False]
        type: bool
        version_added: 2.0


NOTES:
      * rsync must be installed on both the local and remote host.
      * For the `synchronize' module, the "local host" is the host `the synchronize task originates on`, and the "destination host"
        is the host `synchronize is connecting to`.
      * The "local host" can be changed to a different host by using `delegate_to`.  This enables copying between two remote hosts
        or entirely on one remote machine.
      * The user and permissions for the synchronize `src` are those of the user running the Ansible task on the local host (or the
        remote_user for a delegate_to host when delegate_to is used).
      * The user and permissions for the synchronize `dest` are those of the `remote_user` on the destination host or the
        `become_user` if `become=yes` is active.
      * In Ansible 2.0 a bug in the synchronize module made become occur on the "local host".  This was fixed in Ansible 2.0.1.
      * Currently, synchronize is limited to elevating permissions via passwordless sudo.  This is because rsync itself is
        connecting to the remote machine and rsync doesn't give us a way to pass sudo credentials in.
      * Currently there are only a few connection types which support synchronize (ssh, paramiko, local, and docker) because a sync
        strategy has been determined for those connection types.  Note that the connection for these must not need a password as
        rsync itself is making the connection and rsync does not provide us a way to pass a password to the connection.
      * Expect that dest=~/x will be ~<remote_user>/x even if using sudo.
      * Inspect the verbose output to validate the destination user/host/path are what was expected.
      * To exclude files and directories from being synchronized, you may add `.rsync-filter' files to the source directory.
      * rsync daemon must be up and running with correct permission when using rsync protocol in source or destination path.
      * The `synchronize' module forces `--delay-updates` to avoid leaving a destination in a broken in-between state if the
        underlying rsync process encounters an error. Those synchronizing large numbers of files that are willing to trade safety
        for performance should call rsync directly.
      * link_destination is subject to the same limitations as the underlaying rsync daemon. Hard links are only preserved if the
        relative subtrees of the source and destination are the same. Attempts to hardlink into a directory that is a subdirectory
        of the source will be prevented.


SEE ALSO:
      * Module copy
           The official documentation on the copy module.
           https://docs.ansible.com/ansible/latest/modules/copy_module.html
      * Module win_robocopy
           The official documentation on the win_robocopy module.
           https://docs.ansible.com/ansible/latest/modules/win_robocopy_module.html


AUTHOR: Timothy Appnel (@tima)
        METADATA:
          status:
          - preview
          supported_by: core
        

EXAMPLES:

- name: Synchronization of src on the control machine to dest on the remote hosts
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path

- name: Synchronization using rsync protocol (push)
  synchronize:
    src: some/relative/path/
    dest: rsync://somehost.com/path/

- name: Synchronization using rsync protocol (pull)
  synchronize:
    mode: pull
    src: rsync://somehost.com/path/
    dest: /some/absolute/path/

- name:  Synchronization using rsync protocol on delegate host (push)
  synchronize:
    src: /some/absolute/path/
    dest: rsync://somehost.com/path/
  delegate_to: delegate.host

- name: Synchronization using rsync protocol on delegate host (pull)
  synchronize:
    mode: pull
    src: rsync://somehost.com/path/
    dest: /some/absolute/path/
  delegate_to: delegate.host

- name: Synchronization without any --archive options enabled
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path
    archive: no

- name: Synchronization with --archive options enabled except for --recursive
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path
    recursive: no

- name: Synchronization with --archive options enabled except for --times, with --checksum option enabled
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path
    checksum: yes
    times: no

- name: Synchronization without --archive options enabled except use --links
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path
    archive: no
    links: yes

- name: Synchronization of two paths both on the control machine
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path
  delegate_to: localhost

- name: Synchronization of src on the inventory host to the dest on the localhost in pull mode
  synchronize:
    mode: pull
    src: some/relative/path
    dest: /some/absolute/path

- name: Synchronization of src on delegate host to dest on the current inventory host.
  synchronize:
    src: /first/absolute/path
    dest: /second/absolute/path
  delegate_to: delegate.host

- name: Synchronize two directories on one remote host.
  synchronize:
    src: /first/absolute/path
    dest: /second/absolute/path
  delegate_to: "{{ inventory_hostname }}"

- name: Synchronize and delete files in dest on the remote host that are not found in src of localhost.
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path
    delete: yes
    recursive: yes

# This specific command is granted su privileges on the destination
- name: Synchronize using an alternate rsync command
  synchronize:
    src: some/relative/path
    dest: /some/absolute/path
    rsync_path: su -c rsync

# Example .rsync-filter file in the source directory
# - var       # exclude any path whose last part is 'var'
# - /var      # exclude any path starting with 'var' starting at the source directory
# + /var/conf # include /var/conf even though it was previously excluded

- name: Synchronize passing in extra rsync options
  synchronize:
    src: /tmp/helloworld
    dest: /var/www/helloworld
    rsync_opts:
      - "--no-motd"
      - "--exclude=.git"

# Hardlink files if they didn't change
- name: Use hardlinks when synchronizing filesystems
  synchronize:
    src: /tmp/path_a/foo.txt
    dest: /tmp/path_b/foo.txt
    link_dest: /tmp/path_a/

# Specify the rsync binary to use on remote host and on local host
- hosts: groupofhosts
  vars:
        ansible_rsync_path: /usr/gnu/bin/rsync

  tasks:
    - name: copy /tmp/localpath/ to remote location /tmp/remotepath
      synchronize:
        src: /tmp/localpath/
        dest: /tmp/remotepath
        rsync_path: /usr/gnu/bin/rsync


