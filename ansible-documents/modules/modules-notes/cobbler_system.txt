> COBBLER_SYSTEM    (/usr/lib/python2.7/dist-packages/ansible/modules/remote_management/cobbler/cobbler_system.py)

        Add, modify or remove systems in Cobbler

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- host
        The name or IP address of the Cobbler system.
        [Default: 127.0.0.1]

- interfaces
        A list of dictionaries containing interface options.
        [Default: (null)]

- name
        The system name to manage.
        [Default: (null)]

= password
        The password to log in to Cobbler.


- port
        Port number to be used for REST connection.
        The default value depends on parameter `use_ssl'.
        [Default: (null)]

- properties
        A dictionary with system properties.
        [Default: (null)]

- state
        Whether the system should be present, absent or a query is made.
        (Choices: absent, present, query)[Default: present]

- sync
        Sync on changes.
        Concurrently syncing Cobbler is bound to fail.
        [Default: False]
        type: bool

- use_ssl
        If `no', an HTTP connection will be used instead of the default HTTPS connection.
        [Default: yes]
        type: bool

- username
        The username to log in to Cobbler.
        [Default: cobbler]

- validate_certs
        If `no', SSL certificates will not be validated.
        This should only set to `no' when used on personally controlled sites using self-signed certificates.
        [Default: yes]
        type: bool


NOTES:
      * Concurrently syncing Cobbler is bound to fail with weird errors.
      * On python 2.7.8 and older (i.e. on RHEL7) you may need to tweak the python behaviour to disable certificate validation.
        More information at L(Certificate verification in Python standard library HTTP
        clients,https://access.redhat.com/articles/2039753).


AUTHOR: Dag Wieers (@dagwieers)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Ensure the system exists in Cobbler
  cobbler_system:
    host: cobbler01
    username: cobbler
    password: MySuperSecureP4sswOrd
    name: myhost
    properties:
      profile: CentOS6-x86_64
      name_servers: [ 2.3.4.5, 3.4.5.6 ]
      name_servers_search: foo.com, bar.com
    interfaces:
      eth0:
        macaddress: 00:01:02:03:04:05
        ipaddress: 1.2.3.4
  delegate_to: localhost

- name: Enable network boot in Cobbler
  cobbler_system:
    host: bdsol-aci-cobbler-01
    username: cobbler
    password: ins3965!
    name: bdsol-aci51-apic1.cisco.com
    properties:
      netboot_enabled: yes
    state: present
  delegate_to: localhost

- name: Query all systems in Cobbler
  cobbler_system:
    host: cobbler01
    username: cobbler
    password: MySuperSecureP4sswOrd
  register: cobbler_systems
  delegate_to: localhost

- name: Query a specific system in Cobbler
  cobbler_system:
    host: cobbler01
    username: cobbler
    password: MySuperSecureP4sswOrd
    name: '{{ inventory_hostname }}'
  register: cobbler_properties
  delegate_to: localhost

- name: Ensure the system does not exist in Cobbler
  cobbler_system:
    host: cobbler01
    username: cobbler
    password: MySuperSecureP4sswOrd
    name: myhost
  delegate_to: localhost


RETURN VALUES:

systems:
  description: List of systems
  returned: C(state=query) and C(name) is not provided
  type: list
system:
  description: (Resulting) information about the system we are working with
  returned: when C(name) is provided
  type: dict

