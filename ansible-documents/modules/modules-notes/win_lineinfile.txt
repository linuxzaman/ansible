> WIN_LINEINFILE    (/usr/lib/python2.7/dist-packages/ansible/modules/windows/win_lineinfile.py)

        This module will search a file for a line, and ensure that it is present or absent. This is primarily useful when you want to
        change a single line in a file only.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- backrefs
        Used with `state=present'. If set, line can contain backreferences (both positional and named) that will get populated if the
        `regexp' matches. This flag changes the operation of the module slightly; `insertbefore' and `insertafter' will be ignored, and
        if the `regexp' doesn't match anywhere in the file, the file will be left unchanged.
        If the `regexp' does match, the last matching line will be replaced by the expanded line parameter.
        [Default: False]
        type: bool

- backup
        Determine whether a backup should be created.
        When set to `yes', create a backup file including the timestamp information so you can get the original file back if you somehow
        clobbered it incorrectly.
        [Default: False]
        type: bool

- create
        Used with `state=present'. If specified, the file will be created if it does not already exist. By default it will fail if the
        file is missing.
        [Default: False]
        type: bool

- encoding
        Specifies the encoding of the source text file to operate on (and thus what the output encoding will be). The default of `auto'
        will cause the module to auto-detect the encoding of the source file and ensure that the modified file is written with the same
        encoding.
        An explicit encoding can be passed as a string that is a valid value to pass to the .NET framework
        System.Text.Encoding.GetEncoding() method - see https://msdn.microsoft.com/en-us/library/system.text.encoding%28v=vs.110%29.aspx.
        This is mostly useful with `create=yes' if you want to create a new file with a specific encoding. If `create=yes' is specified
        without a specific encoding, the default encoding (UTF-8, no BOM) will be used.
        [Default: auto]
        type: str

- insertafter
        Used with `state=present'. If specified, the line will be inserted after the last match of specified regular expression. A
        special value is available; `EOF' for inserting the line at the end of the file.
        If specified regular expression has no matches, EOF will be used instead. May not be used with `backrefs'.
        (Choices: EOF, *regex*)[Default: EOF]
        type: str

- insertbefore
        Used with `state=present'. If specified, the line will be inserted before the last match of specified regular expression. A value
        is available; `BOF' for inserting the line at the beginning of the file.
        If specified regular expression has no matches, the line will be inserted at the end of the file. May not be used with
        `backrefs'.
        (Choices: BOF, *regex*)[Default: (null)]
        type: str

- line
        Required for `state=present'. The line to insert/replace into the file. If `backrefs' is set, may contain backreferences that
        will get expanded with the `regexp' capture groups if the regexp matches.
        Be aware that the line is processed first on the controller and thus is dependent on yaml quoting rules. Any double quoted line
        will have control characters, such as '\r\n', expanded. To print such characters literally, use single or no quotes.
        [Default: (null)]
        type: str

- newline
        Specifies the line separator style to use for the modified file. This defaults to the windows line separator (`\r\n'). Note that
        the indicated line separator will be used for file output regardless of the original line separator that appears in the input
        file.
        (Choices: unix, windows)[Default: windows]
        type: str

= path
        The path of the file to modify.
        Note that the Windows path delimiter `\' must be escaped as `\\' when the line is double quoted.
        Before Ansible 2.3 this option was only usable as `dest', `destfile' and `name'.
        (Aliases: dest, destfile, name)
        type: path

- regexp
        The regular expression to look for in every line of the file. For `state=present', the pattern to replace if found; only the last
        line found will be replaced. For `state=absent', the pattern of the line to remove. Uses .NET compatible regular expressions; see
        https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx.
        [Default: (null)]

- state
        Whether the line should be there or not.
        (Choices: absent, present)[Default: present]
        type: str

- validate
        Validation to run before copying into place. Use %s in the command to indicate the current file to validate.
        The command is passed securely so shell features like expansion and pipes won't work.
        [Default: (null)]
        type: str


NOTES:
      * As of Ansible 2.3, the `dest' option has been changed to `path' as default, but `dest' still works as well.


SEE ALSO:
      * Module assemble
           The official documentation on the assemble module.
           https://docs.ansible.com/ansible/latest/modules/assemble_module.html
      * Module lineinfile
           The official documentation on the lineinfile module.
           https://docs.ansible.com/ansible/latest/modules/lineinfile_module.html


AUTHOR: Brian Lloyd (@brianlloyd)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Before Ansible 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'
- name: Insert path without converting \r\n
  win_lineinfile:
    path: c:\file.txt
    line: c:\return\new

- win_lineinfile:
    path: C:\Temp\example.conf
    regexp: '^name='
    line: 'name=JohnDoe'

- win_lineinfile:
    path: C:\Temp\example.conf
    regexp: '^name='
    state: absent

- win_lineinfile:
    path: C:\Temp\example.conf
    regexp: '^127\.0\.0\.1'
    line: '127.0.0.1 localhost'

- win_lineinfile:
    path: C:\Temp\httpd.conf
    regexp: '^Listen '
    insertafter: '^#Listen '
    line: Listen 8080

- win_lineinfile:
    path: C:\Temp\services
    regexp: '^# port for http'
    insertbefore: '^www.*80/tcp'
    line: '# port for http by default'

- name: Create file if it doesn't exist with a specific encoding
  win_lineinfile:
    path: C:\Temp\utf16.txt
    create: yes
    encoding: utf-16
    line: This is a utf-16 encoded file

- name: Add a line to a file and ensure the resulting file uses unix line separators
  win_lineinfile:
    path: C:\Temp\testfile.txt
    line: Line added to file
    newline: unix

- name: Update a line using backrefs
  win_lineinfile:
    path: C:\Temp\example.conf
    backrefs: yes
    regexp: '(^name=)'
    line: '$1JohnDoe'


RETURN VALUES:

backup:
  description:
  - Name of the backup file that was created.
  - This is now deprecated, use C(backup_file) instead.
  returned: if backup=yes
  type: str
  sample: C:\Path\To\File.txt.11540.20150212-220915.bak
backup_file:
  description: Name of the backup file that was created.
  returned: if backup=yes
  type: str
  sample: C:\Path\To\File.txt.11540.20150212-220915.bak

