> CNOS_COMMAND    (/usr/lib/python2.7/dist-packages/ansible/modules/network/cnos/cnos_command.py)

        Sends arbitrary commands to an CNOS node and returns the results read from the device. The `cnos_command' module includes an
        argument that will cause the module to wait for a specific condition before returning or timing out if the condition is not met.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

= commands
        List of commands to send to the remote device. The resulting output from the command is returned. If the `wait_for' argument is
        provided, the module is not returned until the condition is satisfied or the number of retires is expired.

        version_added: 2.6

- interval
        Configures the interval in seconds to wait between retries of the command. If the command does not pass the specified conditions,
        the interval indicates how long to wait before trying the command again.
        [Default: 1]
        version_added: 2.6

- match
        The `match' argument is used in conjunction with the `wait_for' argument to specify the match policy.  Valid values are `all' or
        `any'.  If the value is set to `all' then all conditionals in the wait_for must be satisfied.  If the value is set to `any' then
        only one of the values must be satisfied.
        (Choices: any, all)[Default: all]
        version_added: 2.6

- retries
        Specifies the number of retries a command should by tried before it is considered failed. The command is run on the target device
        every retry and evaluated against the `wait_for' conditions.
        [Default: 10]
        version_added: 2.6

- wait_for
        List of conditions to evaluate against the output of the command. The task will wait for each condition to be true before moving
        forward. If the conditional is not true within the configured number of retries, the task fails. See examples.
        [Default: (null)]
        version_added: 2.6


AUTHOR: Anil Kumar Muraleedharan (@amuraleedhar)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

---
- name: test contains operator
  cnos_command:
    commands:
      - show version
      - show system memory
    wait_for:
      - "result[0] contains 'Lenovo'"
      - "result[1] contains 'MemFree'"
  register: result

- assert:
    that:
      - "result.changed == false"
      - "result.stdout is defined"

- name: get output for single command
  cnos_command:
    commands: ['show version']
  register: result

- assert:
    that:
      - "result.changed == false"
      - "result.stdout is defined"

- name: get output for multiple commands
  cnos_command:
    commands:
      - show version
      - show interface information
  register: result

- assert:
    that:
      - "result.changed == false"
      - "result.stdout is defined"
      - "result.stdout | length == 2"


RETURN VALUES:

stdout:
  description: the set of responses from the commands
  returned: always
  type: list
  sample: ['...', '...']
stdout_lines:
  description: The value of stdout split into a list
  returned: always
  type: list
  sample: [['...', '...'], ['...'], ['...']]
failed_conditions:
  description: the conditionals that failed
  returned: failed
  type: list
  sample: ['...', '...']

