> AOS_BLUEPRINT    (/usr/lib/python2.7/dist-packages/ansible/modules/network/aos/_aos_blueprint.py)

        Apstra AOS Blueprint module let you manage your Blueprint easily. You can create create and delete Blueprint by Name or ID. You
        can also use it to retrieve all data from a blueprint. This module is idempotent and support the `check' mode. It's using the AOS
        REST API.

DEPRECATED: 

	Reason: This module does not support AOS 2.1 or later
	Will be removed in: Ansible 2.9
	Alternatives: See new modules at U(https://www.ansible.com/ansible-apstra).


  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- id
        AOS Id of the IP Pool to manage (can't be used to create a new IP Pool). Only one of `name' or `id' can be set.
        [Default: (null)]

- name
        Name of the Blueprint to manage. Only one of `name' or `id' can be set.
        [Default: (null)]

- reference_arch
        When creating a blueprint, this value identifies a known AOS reference architecture value. `Refer to AOS-server documentation for
        available values'.
        [Default: (null)]

= session
        An existing AOS session as obtained by [aos_login] module.


- state
        Indicate what is the expected state of the Blueprint.
        (Choices: present, absent, build-ready)[Default: present]

- template
        When creating a blueprint, this value identifies, by name, an existing engineering design template within the AOS-server.
        [Default: (null)]

- timeout
        When `state=build-ready', this timeout identifies timeout in seconds to wait before declaring a failure.
        [Default: 5]


REQUIREMENTS:  aos-pyez >= 0.6.0

AUTHOR: jeremy@apstra.com (@jeremyschulman)
        METADATA:
          status:
          - deprecated
          supported_by: community
        

EXAMPLES:

- name: Creating blueprint
  aos_blueprint:
    session: "{{ aos_session }}"
    name: "my-blueprint"
    template: "my-template"
    reference_arch: two_stage_l3clos
    state: present

- name: Access a blueprint and get content
  aos_blueprint:
    session: "{{ aos_session }}"
    name: "{{ blueprint_name }}"
    template: "{{ blueprint_template }}"
    state: present
  register: bp

- name: Delete a blueprint
  aos_blueprint:
    session: "{{ aos_session }}"
    name: "my-blueprint"
    state: absent

- name: Await blueprint build-ready, and obtain contents
  aos_blueprint:
    session: "{{ aos_session }}"
    name: "{{ blueprint_name }}"
    state: build-ready
  register: bp


