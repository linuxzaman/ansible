> ACI_BD_SUBNET    (/usr/lib/python2.7/dist-packages/ansible/modules/network/aci/aci_bd_subnet.py)

        Manage Subnets on Cisco ACI fabrics.

  * This module is maintained by an Ansible Partner
OPTIONS (= is mandatory):

- bd
        The name of the Bridge Domain.
        (Aliases: bd_name)[Default: (null)]
        type: str

- certificate_name
        The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.
        If a `private_key' filename was provided, this defaults to the `private_key' basename, without extension.
        If PEM-formatted content was provided for `private_key', this defaults to the `username' value.
        (Aliases: cert_name)[Default: (null)]
        type: str

- description
        The description for the Subnet.
        (Aliases: descr)[Default: (null)]
        type: str

- enable_vip
        Determines if the Subnet should be treated as a VIP; used when the BD is extended to multiple sites.
        The APIC defaults to `no' when unset during creation.
        [Default: (null)]
        type: bool

- gateway
        The IPv4 or IPv6 gateway address for the Subnet.
        (Aliases: gateway_ip)[Default: (null)]
        type: str

= host
        IP Address or hostname of APIC resolvable by Ansible control host.
        (Aliases: hostname)
        type: str

- mask
        The subnet mask for the Subnet.
        This is the number assocated with CIDR notation.
        For IPv4 addresses, accepted values range between `0' and `32'.
        For IPv6 addresses, accepted Values range between `0' and `128'.
        (Aliases: subnet_mask)[Default: (null)]
        type: int

- nd_prefix_policy
        The IPv6 Neighbor Discovery Prefix Policy to associate with the Subnet.
        [Default: (null)]
        type: str

- output_level
        Influence the output of this ACI module.
        `normal' means the standard output, incl. `current' dict
        `info' adds informational output, incl. `previous', `proposed' and `sent' dicts
        `debug' adds debugging output, incl. `filter_string', `method', `response', `status' and `url' information
        (Choices: debug, info, normal)[Default: normal]
        type: str

= password
        The password to use for authentication.
        This option is mutual exclusive with `private_key'. If `private_key' is provided too, it will be used instead.

        type: str

- port
        Port number to be used for REST connection.
        The default value depends on parameter `use_ssl'.
        [Default: (null)]
        type: int

- preferred
        Determines if the Subnet is preferred over all available Subnets. Only one Subnet per Address Family (IPv4/IPv6). can be
        preferred in the Bridge Domain.
        The APIC defaults to `no' when unset during creation.
        [Default: (null)]
        type: bool

= private_key
        Either a PEM-formatted private key file or the private key content used for signature-based authentication.
        This value also influences the default `certificate_name' that is used.
        This option is mutual exclusive with `password'. If `password' is provided too, it will be ignored.
        (Aliases: cert_key)
        type: str

- route_profile
        The Route Profile to the associate with the Subnet.
        [Default: (null)]
        type: str

- route_profile_l3_out
        The L3 Out that contains the assocated Route Profile.
        [Default: (null)]
        type: str

- scope
        Determines the scope of the Subnet.
        The `private' option only allows communication with hosts in the same VRF.
        The `public' option allows the Subnet to be advertised outside of the ACI Fabric, and allows communication with hosts in other
        VRFs.
        The shared option limits communication to hosts in either the same VRF or the shared VRF.
        The value is a list of options, `private' and `public' are mutually exclusive, but both can be used with `shared'.
        The APIC defaults to `private' when unset during creation.
        (Choices: private, public, shared)[Default: (null)]
        type: list

- state
        Use `present' or `absent' for adding or removing.
        Use `query' for listing an object or multiple objects.
        (Choices: absent, present, query)[Default: present]
        type: str

- subnet_control
        Determines the Subnet's Control State.
        The `querier_ip' option is used to treat the gateway_ip as an IGMP querier source IP.
        The `nd_ra' option is used to treate the gateway_ip address as a Neighbor Discovery Router Advertisement Prefix.
        The `no_gw' option is used to remove default gateway functionality from the gateway address.
        The APIC defaults to `nd_ra' when unset during creation.
        (Choices: nd_ra, no_gw, querier_ip, unspecified)[Default: (null)]
        type: str

- subnet_name
        The name of the Subnet.
        (Aliases: name)[Default: (null)]
        type: str

- tenant
        The name of the Tenant.
        (Aliases: tenant_name)[Default: (null)]
        type: str

- timeout
        The socket level timeout in seconds.
        [Default: 30]
        type: int

- use_proxy
        If `no', it will not use a proxy, even if one is defined in an environment variable on the target hosts.
        [Default: True]
        type: bool

- use_ssl
        If `no', an HTTP connection will be used instead of the default HTTPS connection.
        [Default: True]
        type: bool

- username
        The username to use for authentication.
        (Aliases: user)[Default: admin]
        type: str

- validate_certs
        If `no', SSL certificates will not be validated.
        This should only set to `no' when used on personally controlled sites using self-signed certificates.
        [Default: True]
        type: bool


NOTES:
      * The `gateway' parameter is the root key used to access the Subnet (not name), so the `gateway' is required when the state
        is `absent' or `present'.
      * The `tenant' and `bd' used must exist before using this module in your playbook. The [aci_tenant] module and [aci_bd] can
        be used for these.


SEE ALSO:
      * Module aci_bd
           The official documentation on the aci_bd module.
           https://docs.ansible.com/ansible/latest/modules/aci_bd_module.html
      * Module aci_tenant
           The official documentation on the aci_tenant module.
           https://docs.ansible.com/ansible/latest/modules/aci_tenant_module.html
      * APIC Management Information Model reference
           More information about the internal APIC class *fv:Subnet*.
           https://developer.cisco.com/docs/apic-mim-ref/
      * Ansible documentation [aci_guide]
           Detailed information on how to manage your ACI infrastructure using Ansible.
           https://docs.ansible.com/ansible/latest/#stq=aci_guide&stp=1
      * Ansible documentation [aci_dev_guide]
           Detailed guide on how to write your own Cisco ACI modules to contribute.
           https://docs.ansible.com/ansible/latest/#stq=aci_dev_guide&stp=1


AUTHOR: Jacob McGill (@jmcgill298)
        METADATA:
          status:
          - preview
          supported_by: certified
        

EXAMPLES:

- name: Create a tenant
  aci_tenant:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    state: present
  delegate_to: localhost

- name: Create a bridge domain
  aci_bd:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    bd: database
    state: present
  delegate_to: localhost

- name: Create a subnet
  aci_bd_subnet:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    bd: database
    gateway: 10.1.1.1
    mask: 24
    state: present
  delegate_to: localhost

- name: Create a subnet with options
  aci_bd_subnet:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    bd: database
    subnet_name: sql
    gateway: 10.1.2.1
    mask: 23
    description: SQL Servers
    scope: public
    route_profile_l3_out: corp
    route_profile: corp_route_profile
    state: present
  delegate_to: localhost

- name: Update a subnets scope to private and shared
  aci_bd_subnet:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    bd: database
    gateway: 10.1.1.1
    mask: 24
    scope: [private, shared]
    state: present
  delegate_to: localhost

- name: Get all subnets
  aci_bd_subnet:
    host: apic
    username: admin
    password: SomeSecretPassword
    state: query
  delegate_to: localhost

- name: Get all subnets of specific gateway in specified tenant
  aci_bd_subnet:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    gateway: 10.1.1.1
    mask: 24
    state: query
  delegate_to: localhost
  register: query_result

- name: Get specific subnet
  aci_bd_subnet:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    bd: database
    gateway: 10.1.1.1
    mask: 24
    state: query
  delegate_to: localhost
  register: query_result

- name: Delete a subnet
  aci_bd_subnet:
    host: apic
    username: admin
    password: SomeSecretPassword
    tenant: production
    bd: database
    gateway: 10.1.1.1
    mask: 24
    state: absent
  delegate_to: localhost


RETURN VALUES:

current:
  description: The existing configuration from the APIC after the module has finished
  returned: success
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production environment",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
error:
  description: The error information as returned from the APIC
  returned: failure
  type: dict
  sample:
    {
        "code": "122",
        "text": "unknown managed object class foo"
    }
raw:
  description: The raw output returned by the APIC REST API (xml or json)
  returned: parse error
  type: str
  sample: '<?xml version="1.0" encoding="UTF-8"?><imdata totalCount="1"><error code="122" text="unknown managed object class foo"/></imdata>'
sent:
  description: The actual/minimal configuration pushed to the APIC
  returned: info
  type: list
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment"
            }
        }
    }
previous:
  description: The original configuration from the APIC before the module has started
  returned: info
  type: list
  sample:
    [
        {
            "fvTenant": {
                "attributes": {
                    "descr": "Production",
                    "dn": "uni/tn-production",
                    "name": "production",
                    "nameAlias": "",
                    "ownerKey": "",
                    "ownerTag": ""
                }
            }
        }
    ]
proposed:
  description: The assembled configuration from the user-provided parameters
  returned: info
  type: dict
  sample:
    {
        "fvTenant": {
            "attributes": {
                "descr": "Production environment",
                "name": "production"
            }
        }
    }
filter_string:
  description: The filter string used for the request
  returned: failure or debug
  type: str
  sample: ?rsp-prop-include=config-only
method:
  description: The HTTP method used for the request to the APIC
  returned: failure or debug
  type: str
  sample: POST
response:
  description: The HTTP response from the APIC
  returned: failure or debug
  type: str
  sample: OK (30 bytes)
status:
  description: The HTTP status from the APIC
  returned: failure or debug
  type: int
  sample: 200
url:
  description: The HTTP url used for the request to the APIC
  returned: failure or debug
  type: str
  sample: https://10.11.12.13/api/mo/uni/tn-production.json

