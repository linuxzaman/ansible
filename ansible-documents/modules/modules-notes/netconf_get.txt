> NETCONF_GET    (/usr/lib/python2.7/dist-packages/ansible/modules/network/netconf/netconf_get.py)

        NETCONF is a network management protocol developed and standardized by the IETF. It is documented in RFC 6241. This module allows
        the user to fetch configuration and state data from NETCONF enabled network devices.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

- display
        Encoding scheme to use when serializing output from the device. The option `json' will serialize the output as JSON data. If the
        option value is `json' it requires jxmlease to be installed on control node. The option `pretty' is similar to received XML
        response but is using human readable format (spaces, new lines). The option value `xml' is similar to received XML response but
        removes all XML namespaces.
        (Choices: json, pretty, xml)[Default: (null)]

- filter
        This argument specifies the XML string which acts as a filter to restrict the portions of the data to be are retrieved from the
        remote device. If this option is not specified entire configuration or state data is returned in result depending on the value of
        `source' option. The `filter' value can be either XML string or XPath, if the filter is in XPath format the NETCONF server
        running on remote host should support xpath capability else it will result in an error.
        [Default: (null)]

- lock
        Instructs the module to explicitly lock the datastore specified as `source'. If no `source' is defined, the `running' datastore
        will be locked. By setting the option value `always' is will explicitly lock the datastore mentioned in `source' option. By
        setting the option value `never' it will not lock the `source' datastore. The value `if-supported' allows better interworking
        with NETCONF servers, which do not support the (un)lock operation for all supported datastores.
        (Choices: never, always, if-supported)[Default: never]

- source
        This argument specifies the datastore from which configuration data should be fetched. Valid values are `running', `candidate'
        and `startup'. If the `source' value is not set both configuration and state information are returned in response from running
        datastore.
        (Choices: running, candidate, startup)[Default: (null)]


NOTES:
      * This module requires the NETCONF system service be enabled on the remote device being managed.
      * This module supports the use of connection=netconf
      * This module is supported on `ansible_network_os' network platforms. See the :ref:`Network Platform Options
        <platform_options>` for details.


REQUIREMENTS:  ncclient (>=v0.5.2), jxmlease

AUTHOR: Ganesh Nalawade (@ganeshrn), Sven Wisotzky (@wisotzky)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

- name: Get running configuration and state data
  netconf_get:

- name: Get configuration and state data from startup datastore
  netconf_get:
    source: startup

- name: Get system configuration data from running datastore state (junos)
  netconf_get:
    source: running
    filter: <configuration><system></system></configuration>

- name: Get configuration and state data in JSON format
  netconf_get:
    display: json

- name: get schema list using subtree w/ namespaces
  netconf_get:
    display: json
    filter: <netconf-state xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"><schemas><schema/></schemas></netconf-state>
    lock: never

- name: get schema list using xpath
  netconf_get:
    display: xml
    filter: /netconf-state/schemas/schema

- name: get interface confiugration with filter (iosxr)
  netconf_get:
    display: pretty
    filter: <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"></interface-configurations>
    lock: if-supported

- name: Get system configuration data from running datastore state (junos)
  netconf_get:
    source: running
    filter: <configuration><system></system></configuration>
    lock: if-supported

- name: Get complete configuration data from running datastore (SROS)
  netconf_get:
    source: running
    filter: <configure xmlns="urn:nokia.com:sros:ns:yang:sr:conf"/>

- name: Get complete state data (SROS)
  netconf_get:
    filter: <state xmlns="urn:nokia.com:sros:ns:yang:sr:state"/>


RETURN VALUES:

stdout:
  description: The raw XML string containing configuration or state data
               received from the underlying ncclient library.
  returned: always apart from low-level errors (such as action plugin)
  type: str
  sample: '...'
stdout_lines:
  description: The value of stdout split into a list
  returned: always apart from low-level errors (such as action plugin)
  type: list
  sample: ['...', '...']
output:
  description: Based on the value of display option will return either the set of
               transformed XML to JSON format from the RPC response with type dict
               or pretty XML string response (human-readable) or response with
               namespace removed from XML string.
  returned: when the display format is selected as JSON it is returned as dict type, if the
            display format is xml or pretty pretty it is retured as a string apart from low-level
            errors (such as action plugin).
  type: complex
  contains:
    formatted_output:
      - Contains formatted response received from remote host as per the value in display format.

