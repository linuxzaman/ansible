> SKYDIVE_EDGE    (/usr/lib/python2.7/dist-packages/ansible/modules/network/skydive/skydive_edge.py)

        This module handles setting up edges between two nodes based on the relationship type to the Skydive topology.

  * This module is maintained by The Ansible Network Team
OPTIONS (= is mandatory):

= child_node
        To defined the second node of the link, it can be either an ID or a gremlin expression


- host
        To define the host of the node.
        [Default: ]

- metadata
        To define metadata for the edge.
        [Default: (null)]

= parent_node
        To defined the first node of the link, it can be either an ID or a gremlin expression


- provider
        A dict object containing connection details.
        [Default: (null)]
        suboptions:
          endpoint:
            description:
            - Specifies the hostname/address along with the port as `localhost:8082'for connecting
              to the remote instance of SKYDIVE client over the REST API.
            required: true
          insecure:
            default: false
            description:
            - Ignore SSL certification verification.
            type: bool
          password:
            description:
            - Specifies the password to use to authenticate the connection to the remote instance
              of SKYDIVE client.
          ssl:
            default: false
            description:
            - Specifies the ssl parameter that decides if the connection type shall be http
              or https.
            type: bool
          user:
            description:
            - Configures the username to use to authenticate the connection to the remote
              instance of SKYDIVE client.
        

= relation_type
        To define relation type of the node `ownership, layer2, layer3'.


- state
        State of the Skydive Edge. If value is `present' new edge will be created else if it is `absent' it will be deleted.
        (Choices: present, absent)[Default: present]


NOTES:
      * This module must be run locally, which can be achieved by specifying `connection: local'.


REQUIREMENTS:  skydive-client

AUTHOR: Sumit Jaiswal (@sjaiswal)
        METADATA:
          status:
          - preview
          supported_by: network
        

EXAMPLES:

- name: create tor
  skydive_node:
    name: 'TOR'
    node_type: "fabric"
    seed: TOR
    metadata:
      Model: Cisco xxxx
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin
  register: tor_result

- name: create port 1
  skydive_node:
    name: 'PORT1'
    node_type: 'fabric'
    seed: PORT1
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin
  register: port1_result

- name: create port 2
  skydive_node:
    name: 'PORT2'
    node_type: 'fabric'
    seed: PORT2
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin
  register: port2_result

- name: link node tor and port 1
  skydive_edge:
    parent_node: "{{ tor_result.UUID }}"
    child_node: "{{ port1_result.UUID }}"
    relation_type: ownership
    state: present
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin

- name: link node tor and port 2
  skydive_edge:
    parent_node: "{{ tor_result.UUID }}"
    child_node: "{{ port2_result.UUID }}"
    relation_type: ownership
    state: present
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin

- name: update link node tor and port 1 relation
  skydive_edge:
    parent_node: "{{ tor_result.UUID }}"
    child_node: "{{ port2_result.UUID }}"
    relation_type: layer2
    state: upadte
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin

- name: Unlink tor and port 2
  skydive_edge:
    parent_node: "{{ tor_result.UUID }}"
    child_node: "{{ port2_result.UUID }}"
    relation_type: ownership
    state: absent
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin

- name: link tor and port 2 via Gremlin expression
  skydive_edge:
    parent_node: G.V().Has('Name', 'TOR')
    child_node: G.V().Has('Name', 'PORT2')
    relation_type: ownership
    state: present
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin

- name: Unlink tor and port 2 via Gremlin expression
  skydive_edge:
    parent_node: G.V().Has('Name', 'TOR')
    child_node: G.V().Has('Name', 'PORT2')
    relation_type: ownership
    state: absent
    provider:
      endpoint: localhost:8082
      username: admin
      password: admin


RETURN VALUES:
 # 
