> ONEPASSWORD_FACTS    (/usr/lib/python2.7/dist-packages/ansible/modules/identity/onepassword_facts.py)

        [onepassword_facts] wraps the `op' command line utility to fetch data about one or more 1Password items and return as Ansible
        facts. A fatal error occurs if any of the items being searched for can not be found. Recommend using with the `no_log' option to
        avoid logging the values of the secrets being retrieved.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- auto_login
        A dictionary containing authentication details. If this is set, [onepassword_facts] will attempt to sign in to 1Password
        automatically.
        Without this option, you must have already logged in via the 1Password CLI before running Ansible.
        It is *highly* recommened to store 1Password credentials in an Ansible Vault. Ensure that the key used to encrypt the Ansible
        Vault is equal to or greater in strength than the 1Password master password.
        [Default: {}]
        suboptions:
          master_password:
            description:
            - The master password for your subdomain.
            - This is always required when specifying `auto_login'.
            required: true
          secret_key:
            description:
            - The secret key for your subdomain.
            - Only required for initial sign in.
          subdomain:
            description:
            - 1Password subdomain name (<subdomain>.1password.com).
            - If this is not specified, the most recent subdomain will be used.
          username:
            description:
            - 1Password username.
            - Only required for initial sign in.
        

- cli_path
        Used to specify the exact path to the `op' command line interface
        [Default: op]

= search_terms
        A list of one or more search terms.
        Each search term can either be a simple string or it can be a dictionary for more control.
        When passing a simple string, `field' is assumed to be `password'.
        When passing a dictionary, the following fields are available.

        suboptions:
          field:
            description:
            - The name of the field to search for within this item (optional, defaults to
              "password" (or "document" if the item has an attachment).
          name:
            description:
            - The name of the 1Password item to search for (required).
          section:
            description:
            - The name of a section within this item containing the specified field (optional,
              will search all sections if not specified).
          vault:
            description:
            - The name of the particular 1Password vault to search, useful if your 1Password
              user has access to multiple vaults (optional).
        


NOTES:
      * Based on the `onepassword' lookup plugin by Scott Buchanan <sbuchanan@ri.pn>.
      * This module stores potentially sensitive data from 1Password as Ansible facts. Facts are subject to caching if enabled,
        which means this data could be stored in clear text on disk or in a database. - Tested with `op' version 0.5.5


REQUIREMENTS:  `op' 1Password command line utility. See https://support.1password.com/command-line/

AUTHOR: Ryan Conway (@Rylon)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Gather secrets from 1Password, assuming there is a 'password' field:
- name: Get a password
  onepassword_facts:
    search_terms: My 1Password item
  delegate_to: localhost
  no_log: true         # Don't want to log the secrets to the console!

# Gather secrets from 1Password, with more advanced search terms:
- name: Get a password
  onepassword_facts:
    search_terms:
      - name:    My 1Password item
        field:   Custom field name       # optional, defaults to 'password'
        section: Custom section name     # optional, defaults to 'None'
        vault:   Name of the vault       # optional, only necessary if there is more than 1 Vault available
  delegate_to: localhost
  no_log: True                           # Don't want to log the secrets to the console!

# Gather secrets combining simple and advanced search terms to retrieve two items, one of which we fetch two
# fields. In the first 'password' is fetched, as a field name is not specified (default behaviour) and in the
# second, 'Custom field name' is fetched, as that is specified explicitly.
- name: Get a password
  onepassword_facts:
    search_terms:
      - My 1Password item                # 'name' is optional when passing a simple string...
      - name: My Other 1Password item    # ...but it can also be set for consistency
      - name:    My 1Password item
        field:   Custom field name       # optional, defaults to 'password'
        section: Custom section name     # optional, defaults to 'None'
        vault:   Name of the vault       # optional, only necessary if there is more than 1 Vault available
      - name: A 1Password item with document attachment
  delegate_to: localhost
  no_log: true                           # Don't want to log the secrets to the console!


RETURN VALUES:

---
# One or more dictionaries for each matching item from 1Password, along with the appropriate fields.
# This shows the response you would expect to receive from the third example documented above.
onepassword:
    description: Dictionary of each 1password item matching the given search terms, shows what would be returned from the third example above.
    returned: success
    type: dict
    sample:
        "My 1Password item":
            password: the value of this field
            Custom field name: the value of this field
        "My Other 1Password item":
            password: the value of this field
        "A 1Password item with document attachment":
            document: the contents of the document attached to this item

