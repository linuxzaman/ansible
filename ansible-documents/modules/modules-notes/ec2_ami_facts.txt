> EC2_AMI_FACTS    (/usr/lib/python2.7/dist-packages/ansible/modules/cloud/amazon/ec2_ami_facts.py)

        Gather facts about ec2 AMIs

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- aws_access_key
        AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is
        used.
        (Aliases: ec2_access_key, access_key)[Default: (null)]
        type: str

- aws_secret_key
        AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is
        used.
        (Aliases: ec2_secret_key, secret_key)[Default: (null)]
        type: str

- debug_botocore_endpoint_logs
        Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing
        the set to the resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during
        a playbook. The ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
        [Default: no]
        type: bool
        version_added: 2.8

- describe_image_attributes
        Describe attributes (like launchPermission) of the images found.
        [Default: False]
        type: bool

- ec2_url
        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where
        region is required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL
        environment variable, if any, is used.
        [Default: (null)]
        type: str

- executable_users
        Filter images by users with explicit launch permissions. Valid options are an AWS account ID, self, or all (public AMIs).
        (Aliases: executable_user)[Default: (null)]

- filters
        A dict of filters to apply. Each dict item consists of a filter key and a filter value.
        See https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html for possible filters.
        Filter names and values are case sensitive.
        [Default: (null)]

- image_ids
        One or more image IDs.
        (Aliases: image_id)[Default: (null)]

- owners
        Filter the images by the owner. Valid options are an AWS account ID, self,
        or an AWS owner alias ( amazon | aws-marketplace | microsoft ).
        (Aliases: owner)[Default: (null)]

- profile
        Uses a boto profile. Only works with boto >= 2.24.0.
        [Default: (null)]
        type: str
        version_added: 1.6

- region
        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
        (Aliases: aws_region, ec2_region)[Default: (null)]
        type: str

- security_token
        AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
        (Aliases: access_token)[Default: (null)]
        type: str
        version_added: 1.6

- validate_certs
        When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
        [Default: True]
        type: bool
        version_added: 1.5


NOTES:
      * If parameters are not set within the module, the following environment variables can be used in decreasing order of
        precedence `AWS_URL' or `EC2_URL', `AWS_ACCESS_KEY_ID' or `AWS_ACCESS_KEY' or `EC2_ACCESS_KEY', `AWS_SECRET_ACCESS_KEY' or
        `AWS_SECRET_KEY' or `EC2_SECRET_KEY', `AWS_SECURITY_TOKEN' or `EC2_SECURITY_TOKEN', `AWS_REGION' or `EC2_REGION'
      * Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See
        https://boto.readthedocs.io/en/latest/boto_config_tut.html
      * `AWS_REGION' or `EC2_REGION' can be typically be used to specify the AWS region, when required, but this can also be
        configured in the boto config file


REQUIREMENTS:  boto, boto3, python >= 2.6

AUTHOR: Prasad Katti (@prasadkatti)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

# Note: These examples do not set authentication details, see the AWS Guide for details.

- name: gather facts about an AMI using ami-id
  ec2_ami_facts:
    image_ids: ami-5b488823

- name: gather facts about all AMIs with tag key Name and value webapp
  ec2_ami_facts:
    filters:
      "tag:Name": webapp

- name: gather facts about an AMI with 'AMI Name' equal to foobar
  ec2_ami_facts:
    filters:
      name: foobar

- name: gather facts about Ubuntu 17.04 AMIs published by Canonical (099720109477)
  ec2_ami_facts:
    owners: 099720109477
    filters:
      name: "ubuntu/images/ubuntu-zesty-17.04-*"


RETURN VALUES:

images:
  description: a list of images
  returned: always
  type: complex
  contains:
    architecture:
      description: The architecture of the image
      returned: always
      type: str
      sample: x86_64
    block_device_mappings:
      description: Any block device mapping entries
      returned: always
      type: complex
      contains:
        device_name:
          description: The device name exposed to the instance
          returned: always
          type: str
          sample: /dev/sda1
        ebs:
          description: EBS volumes
          returned: always
          type: complex
    creation_date:
      description: The date and time the image was created
      returned: always
      type: str
      sample: '2017-10-16T19:22:13.000Z'
    description:
      description: The description of the AMI
      returned: always
      type: str
      sample: ''
    ena_support:
      description: whether enhanced networking with ENA is enabled
      returned: always
      type: bool
      sample: true
    hypervisor:
      description: The hypervisor type of the image
      returned: always
      type: str
      sample: xen
    image_id:
      description: The ID of the AMI
      returned: always
      type: str
      sample: ami-5b466623
    image_location:
      description: The location of the AMI
      returned: always
      type: str
      sample: 408466080000/Webapp
    image_type:
      description: The type of image
      returned: always
      type: str
      sample: machine
    launch_permissions:
      description: launch permissions of the ami
      returned: when image is owned by calling account and describe_image_attributes is yes
      type: complex
      sample: [{"group": "all"}, {"user_id": "408466080000"}]
    name:
      description: The name of the AMI that was provided during image creation
      returned: always
      type: str
      sample: Webapp
    owner_id:
      description: The AWS account ID of the image owner
      returned: always
      type: str
      sample: '408466080000'
    public:
      description: whether the image has public launch permissions
      returned: always
      type: bool
      sample: true
    root_device_name:
      description: The device name of the root device
      returned: always
      type: str
      sample: /dev/sda1
    root_device_type:
      description: The type of root device used by the AMI
      returned: always
      type: str
      sample: ebs
    sriov_net_support:
      description: whether enhanced networking is enabled
      returned: always
      type: str
      sample: simple
    state:
      description: The current state of the AMI
      returned: always
      type: str
      sample: available
    tags:
      description: Any tags assigned to the image
      returned: always
      type: complex
    virtualization_type:
      description: The type of virtualization of the AMI
      returned: always
      type: str
      sample: hvm

