> OPENSSL_CSR    (/usr/lib/python2.7/dist-packages/ansible/modules/crypto/openssl_csr.py)

        This module allows one to (re)generate OpenSSL certificate signing requests. It uses the pyOpenSSL python library to interact
        with openssl. This module supports the subjectAltName, keyUsage, extendedKeyUsage, basicConstraints and OCSP Must Staple
        extensions. Please note that the module regenerates existing CSR if it doesn't match the module's options, or if it seems to be
        corrupt. If you are concerned that this could overwrite your existing CSR, consider using the `backup' option.

  * This module is maintained by The Ansible Community
OPTIONS (= is mandatory):

- attributes
        The attributes the resulting file or directory should have.
        To get supported flags look at the man page for `chattr' on the target system.
        This string should contain the attributes in the same order as the one displayed by `lsattr'.
        The `=' operator is assumed as default, otherwise `+' or `-' operators need to be included in the string.
        (Aliases: attr)[Default: (null)]
        type: str
        version_added: 2.3

- backup
        Create a backup file including a timestamp so you can get the original CSR back if you overwrote it with a new one by accident.
        [Default: False]
        type: bool
        version_added: 2.8

- basic_constraints
        Indicates basic constraints, such as if the certificate is a CA.
        (Aliases: basicConstraints)[Default: (null)]
        type: list
        version_added: 2.5

- basic_constraints_critical
        Should the basicConstraints extension be considered as critical.
        (Aliases: basicConstraints_critical)[Default: (null)]
        type: bool
        version_added: 2.5

- common_name
        The commonName field of the certificate signing request subject.
        (Aliases: CN, commonName)[Default: (null)]
        type: str

- country_name
        The countryName field of the certificate signing request subject.
        (Aliases: C, countryName)[Default: (null)]
        type: str

- digest
        The digest used when signing the certificate signing request with the private key.
        [Default: sha256]
        type: str

- email_address
        The emailAddress field of the certificate signing request subject.
        (Aliases: E, emailAddress)[Default: (null)]
        type: str

- extended_key_usage
        Additional restrictions (e.g. client authentication, server authentication) on the allowed purposes for which the public key may
        be used.
        (Aliases: extKeyUsage, extendedKeyUsage)[Default: (null)]
        type: list

- extended_key_usage_critical
        Should the extkeyUsage extension be considered as critical.
        (Aliases: extKeyUsage_critical, extendedKeyUsage_critical)[Default: (null)]
        type: bool

- force
        Should the certificate signing request be forced regenerated by this ansible module.
        [Default: False]
        type: bool

- group
        Name of the group that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

- key_usage
        This defines the purpose (e.g. encipherment, signature, certificate signing) of the key contained in the certificate.
        (Aliases: keyUsage)[Default: (null)]
        type: list

- key_usage_critical
        Should the keyUsage extension be considered as critical.
        (Aliases: keyUsage_critical)[Default: (null)]
        type: bool

- locality_name
        The localityName field of the certificate signing request subject.
        (Aliases: L, localityName)[Default: (null)]
        type: str

- mode
        The permissions the resulting file or directory should have.
        For those used to `/usr/bin/chmod' remember that modes are actually octal numbers. You must either add a leading zero so that
        Ansible's YAML parser knows it is an octal number (like `0644' or `01777') or quote it (like `'644'' or `'1777'') so Ansible
        receives a string and can do its own conversion from string into number.
        Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected
        results.
        As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, `u+rwx' or `u=rw,g=r,o=r').
        As of Ansible 2.6, the mode may also be the special string `preserve'.
        When set to `preserve' the file will be given the same permissions as the source file.
        [Default: (null)]
        type: str

- ocsp_must_staple
        Indicates that the certificate should contain the OCSP Must Staple extension (https://tools.ietf.org/html/rfc7633).
        (Aliases: ocspMustStaple)[Default: (null)]
        type: bool
        version_added: 2.5

- ocsp_must_staple_critical
        Should the OCSP Must Staple extension be considered as critical
        Note that according to the RFC, this extension should not be marked as critical, as old clients not knowing about OCSP Must
        Staple are required to reject such certificates (see https://tools.ietf.org/html/rfc7633#section-4).
        (Aliases: ocspMustStaple_critical)[Default: (null)]
        type: bool
        version_added: 2.5

- organization_name
        The organizationName field of the certificate signing request subject.
        (Aliases: O, organizationName)[Default: (null)]
        type: str

- organizational_unit_name
        The organizationalUnitName field of the certificate signing request subject.
        (Aliases: OU, organizationalUnitName)[Default: (null)]
        type: str

- owner
        Name of the user that should own the file/directory, as would be fed to `chown'.
        [Default: (null)]
        type: str

= path
        The name of the file into which the generated OpenSSL certificate signing request will be written.

        type: path

- privatekey_passphrase
        The passphrase for the private key.
        This is required if the private key is password protected.
        [Default: (null)]
        type: str

= privatekey_path
        The path to the private key to use when signing the certificate signing request.

        type: path

- select_crypto_backend
        Determines which crypto backend to use.
        The default choice is `auto', which tries to use `cryptography' if available, and falls back to `pyopenssl'.
        If set to `pyopenssl', will try to use the L(pyOpenSSL,https://pypi.org/project/pyOpenSSL/) library.
        If set to `cryptography', will try to use the L(cryptography,https://cryptography.io/) library.
        (Choices: auto, cryptography, pyopenssl)[Default: auto]
        type: str
        version_added: 2.8

- selevel
        The level part of the SELinux file context.
        This is the MLS/MCS attribute, sometimes known as the `range'.
        When set to `_default', it will use the `level' portion of the policy if available.
        [Default: s0]
        type: str

- serole
        The role part of the SELinux file context.
        When set to `_default', it will use the `role' portion of the policy if available.
        [Default: (null)]
        type: str

- setype
        The type part of the SELinux file context.
        When set to `_default', it will use the `type' portion of the policy if available.
        [Default: (null)]
        type: str

- seuser
        The user part of the SELinux file context.
        By default it uses the `system' policy, where applicable.
        When set to `_default', it will use the `user' portion of the policy if available.
        [Default: (null)]
        type: str

- state
        Whether the certificate signing request should exist or not, taking action if the state is different from what is stated.
        (Choices: absent, present)[Default: present]
        type: str

- state_or_province_name
        The stateOrProvinceName field of the certificate signing request subject.
        (Aliases: ST, stateOrProvinceName)[Default: (null)]
        type: str

- subject
        Key/value pairs that will be present in the subject name field of the certificate signing request.
        If you need to specify more than one value with the same key, use a list as value.
        [Default: (null)]
        type: dict
        version_added: 2.5

- subject_alt_name
        SAN extension to attach to the certificate signing request.
        This can either be a 'comma separated string' or a YAML list.
        Values must be prefixed by their options. (i.e., `email', `URI', `DNS', `RID', `IP', `dirName', `otherName' and the ones specific
        to your CA)
        Note that if no SAN is specified, but a common name, the common name will be added as a SAN except if `useCommonNameForSAN' is
        set to `false'.
        More at https://tools.ietf.org/html/rfc5280#section-4.2.1.6.
        (Aliases: subjectAltName)[Default: (null)]
        type: list

- subject_alt_name_critical
        Should the subjectAltName extension be considered as critical.
        (Aliases: subjectAltName_critical)[Default: (null)]
        type: bool

- unsafe_writes
        Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.
        By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but
        sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be
        updated atomically from inside the container and can only be written in an unsafe manner.
        This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't
        force Ansible to perform unsafe writes).
        IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
        [Default: False]
        type: bool
        version_added: 2.2

- use_common_name_for_san
        If set to `yes', the module will fill the common name in for `subject_alt_name' with `DNS:' prefix if no SAN is specified.
        (Aliases: useCommonNameForSAN)[Default: True]
        type: bool
        version_added: 2.8

- version
        The version of the certificate signing request.
        [Default: 1]
        type: int


NOTES:
      * If the certificate signing request already exists it will be checked whether subjectAltName, keyUsage, extendedKeyUsage and
        basicConstraints only contain the requested values, whether OCSP Must Staple is as requested, and if the request was signed
        by the given private key.


SEE ALSO:
      * Module openssl_certificate
           The official documentation on the openssl_certificate module.
           https://docs.ansible.com/ansible/latest/modules/openssl_certificate_module.html
      * Module openssl_dhparam
           The official documentation on the openssl_dhparam module.
           https://docs.ansible.com/ansible/latest/modules/openssl_dhparam_module.html
      * Module openssl_pkcs12
           The official documentation on the openssl_pkcs12 module.
           https://docs.ansible.com/ansible/latest/modules/openssl_pkcs12_module.html
      * Module openssl_privatekey
           The official documentation on the openssl_privatekey module.
           https://docs.ansible.com/ansible/latest/modules/openssl_privatekey_module.html
      * Module openssl_publickey
           The official documentation on the openssl_publickey module.
           https://docs.ansible.com/ansible/latest/modules/openssl_publickey_module.html


REQUIREMENTS:  Either cryptography >= 1.3, Or pyOpenSSL >= 0.15

AUTHOR: Yanis Guenane (@Spredzy)
        METADATA:
          status:
          - preview
          supported_by: community
        

EXAMPLES:

- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    common_name: www.ansible.com

- name: Generate an OpenSSL Certificate Signing Request with a passphrase protected private key
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    privatekey_passphrase: ansible
    common_name: www.ansible.com

- name: Generate an OpenSSL Certificate Signing Request with Subject information
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    country_name: FR
    organization_name: Ansible
    email_address: jdoe@ansible.com
    common_name: www.ansible.com

- name: Generate an OpenSSL Certificate Signing Request with subjectAltName extension
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    subject_alt_name: 'DNS:www.ansible.com,DNS:m.ansible.com'

- name: Generate an OpenSSL CSR with subjectAltName extension with dynamic list
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
  with_dict:
    dns_server:
    - www.ansible.com
    - m.ansible.com

- name: Force re-generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    force: yes
    common_name: www.ansible.com

- name: Generate an OpenSSL Certificate Signing Request with special key usages
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    common_name: www.ansible.com
    key_usage:
      - digitalSignature
      - keyAgreement
    extended_key_usage:
      - clientAuth

- name: Generate an OpenSSL Certificate Signing Request with OCSP Must Staple
  openssl_csr:
    path: /etc/ssl/csr/www.ansible.com.csr
    privatekey_path: /etc/ssl/private/ansible.com.pem
    common_name: www.ansible.com
    ocsp_must_staple: yes


RETURN VALUES:

privatekey:
    description: Path to the TLS/SSL private key the CSR was generated for
    returned: changed or success
    type: str
    sample: /etc/ssl/private/ansible.com.pem
filename:
    description: Path to the generated Certificate Signing Request
    returned: changed or success
    type: str
    sample: /etc/ssl/csr/www.ansible.com.csr
subject:
    description: A list of the subject tuples attached to the CSR
    returned: changed or success
    type: list
    sample: "[('CN', 'www.ansible.com'), ('O', 'Ansible')]"
subjectAltName:
    description: The alternative names this CSR is valid for
    returned: changed or success
    type: list
    sample: [ 'DNS:www.ansible.com', 'DNS:m.ansible.com' ]
keyUsage:
    description: Purpose for which the public key may be used
    returned: changed or success
    type: list
    sample: [ 'digitalSignature', 'keyAgreement' ]
extendedKeyUsage:
    description: Additional restriction on the public key purposes
    returned: changed or success
    type: list
    sample: [ 'clientAuth' ]
basicConstraints:
    description: Indicates if the certificate belongs to a CA
    returned: changed or success
    type: list
    sample: ['CA:TRUE', 'pathLenConstraint:0']
ocsp_must_staple:
    description: Indicates whether the certificate has the OCSP
                 Must Staple feature enabled
    returned: changed or success
    type: bool
    sample: false
backup_file:
    description: Name of backup file created.
    returned: changed and if I(backup) is C(yes)
    type: str
    sample: /path/to/www.ansible.com.csr.2019-03-09@11:22~

